
RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007520  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e8  080075e0  080075e0  000175e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ac8  08007ac8  000200e0  2**0
                  CONTENTS
  4 .ARM          00000008  08007ac8  08007ac8  00017ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ad0  08007ad0  000200e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ad0  08007ad0  00017ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ad4  08007ad4  00017ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  08007ad8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  200000e0  08007bb8  000200e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08007bb8  00020260  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c7cb  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022ee  00000000  00000000  0002c8d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c0  00000000  00000000  0002ebc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008c8  00000000  00000000  0002f588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014d28  00000000  00000000  0002fe50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e4f1  00000000  00000000  00044b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00078200  00000000  00000000  00053069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cb269  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003338  00000000  00000000  000cb2bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000e0 	.word	0x200000e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080075c8 	.word	0x080075c8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000e4 	.word	0x200000e4
 8000104:	080075c8 	.word	0x080075c8

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_ldivmod>:
 800042c:	2b00      	cmp	r3, #0
 800042e:	d115      	bne.n	800045c <__aeabi_ldivmod+0x30>
 8000430:	2a00      	cmp	r2, #0
 8000432:	d113      	bne.n	800045c <__aeabi_ldivmod+0x30>
 8000434:	2900      	cmp	r1, #0
 8000436:	db06      	blt.n	8000446 <__aeabi_ldivmod+0x1a>
 8000438:	dc01      	bgt.n	800043e <__aeabi_ldivmod+0x12>
 800043a:	2800      	cmp	r0, #0
 800043c:	d006      	beq.n	800044c <__aeabi_ldivmod+0x20>
 800043e:	2000      	movs	r0, #0
 8000440:	43c0      	mvns	r0, r0
 8000442:	0841      	lsrs	r1, r0, #1
 8000444:	e002      	b.n	800044c <__aeabi_ldivmod+0x20>
 8000446:	2180      	movs	r1, #128	; 0x80
 8000448:	0609      	lsls	r1, r1, #24
 800044a:	2000      	movs	r0, #0
 800044c:	b407      	push	{r0, r1, r2}
 800044e:	4802      	ldr	r0, [pc, #8]	; (8000458 <__aeabi_ldivmod+0x2c>)
 8000450:	a101      	add	r1, pc, #4	; (adr r1, 8000458 <__aeabi_ldivmod+0x2c>)
 8000452:	1840      	adds	r0, r0, r1
 8000454:	9002      	str	r0, [sp, #8]
 8000456:	bd03      	pop	{r0, r1, pc}
 8000458:	ffffffd1 	.word	0xffffffd1
 800045c:	b403      	push	{r0, r1}
 800045e:	4668      	mov	r0, sp
 8000460:	b501      	push	{r0, lr}
 8000462:	9802      	ldr	r0, [sp, #8]
 8000464:	f000 f920 	bl	80006a8 <__gnu_ldivmod_helper>
 8000468:	9b01      	ldr	r3, [sp, #4]
 800046a:	469e      	mov	lr, r3
 800046c:	b002      	add	sp, #8
 800046e:	bc0c      	pop	{r2, r3}
 8000470:	4770      	bx	lr
 8000472:	46c0      	nop			; (mov r8, r8)

08000474 <__aeabi_uldivmod>:
 8000474:	2b00      	cmp	r3, #0
 8000476:	d111      	bne.n	800049c <__aeabi_uldivmod+0x28>
 8000478:	2a00      	cmp	r2, #0
 800047a:	d10f      	bne.n	800049c <__aeabi_uldivmod+0x28>
 800047c:	2900      	cmp	r1, #0
 800047e:	d100      	bne.n	8000482 <__aeabi_uldivmod+0xe>
 8000480:	2800      	cmp	r0, #0
 8000482:	d002      	beq.n	800048a <__aeabi_uldivmod+0x16>
 8000484:	2100      	movs	r1, #0
 8000486:	43c9      	mvns	r1, r1
 8000488:	0008      	movs	r0, r1
 800048a:	b407      	push	{r0, r1, r2}
 800048c:	4802      	ldr	r0, [pc, #8]	; (8000498 <__aeabi_uldivmod+0x24>)
 800048e:	a102      	add	r1, pc, #8	; (adr r1, 8000498 <__aeabi_uldivmod+0x24>)
 8000490:	1840      	adds	r0, r0, r1
 8000492:	9002      	str	r0, [sp, #8]
 8000494:	bd03      	pop	{r0, r1, pc}
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	ffffff91 	.word	0xffffff91
 800049c:	b403      	push	{r0, r1}
 800049e:	4668      	mov	r0, sp
 80004a0:	b501      	push	{r0, lr}
 80004a2:	9802      	ldr	r0, [sp, #8]
 80004a4:	f000 f834 	bl	8000510 <__udivmoddi4>
 80004a8:	9b01      	ldr	r3, [sp, #4]
 80004aa:	469e      	mov	lr, r3
 80004ac:	b002      	add	sp, #8
 80004ae:	bc0c      	pop	{r2, r3}
 80004b0:	4770      	bx	lr
 80004b2:	46c0      	nop			; (mov r8, r8)

080004b4 <__aeabi_lmul>:
 80004b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004b6:	46ce      	mov	lr, r9
 80004b8:	4647      	mov	r7, r8
 80004ba:	b580      	push	{r7, lr}
 80004bc:	0007      	movs	r7, r0
 80004be:	4699      	mov	r9, r3
 80004c0:	0c3b      	lsrs	r3, r7, #16
 80004c2:	469c      	mov	ip, r3
 80004c4:	0413      	lsls	r3, r2, #16
 80004c6:	0c1b      	lsrs	r3, r3, #16
 80004c8:	001d      	movs	r5, r3
 80004ca:	000e      	movs	r6, r1
 80004cc:	4661      	mov	r1, ip
 80004ce:	0400      	lsls	r0, r0, #16
 80004d0:	0c14      	lsrs	r4, r2, #16
 80004d2:	0c00      	lsrs	r0, r0, #16
 80004d4:	4345      	muls	r5, r0
 80004d6:	434b      	muls	r3, r1
 80004d8:	4360      	muls	r0, r4
 80004da:	4361      	muls	r1, r4
 80004dc:	18c0      	adds	r0, r0, r3
 80004de:	0c2c      	lsrs	r4, r5, #16
 80004e0:	1820      	adds	r0, r4, r0
 80004e2:	468c      	mov	ip, r1
 80004e4:	4283      	cmp	r3, r0
 80004e6:	d903      	bls.n	80004f0 <__aeabi_lmul+0x3c>
 80004e8:	2380      	movs	r3, #128	; 0x80
 80004ea:	025b      	lsls	r3, r3, #9
 80004ec:	4698      	mov	r8, r3
 80004ee:	44c4      	add	ip, r8
 80004f0:	4649      	mov	r1, r9
 80004f2:	4379      	muls	r1, r7
 80004f4:	4372      	muls	r2, r6
 80004f6:	0c03      	lsrs	r3, r0, #16
 80004f8:	4463      	add	r3, ip
 80004fa:	042d      	lsls	r5, r5, #16
 80004fc:	0c2d      	lsrs	r5, r5, #16
 80004fe:	18c9      	adds	r1, r1, r3
 8000500:	0400      	lsls	r0, r0, #16
 8000502:	1940      	adds	r0, r0, r5
 8000504:	1889      	adds	r1, r1, r2
 8000506:	bcc0      	pop	{r6, r7}
 8000508:	46b9      	mov	r9, r7
 800050a:	46b0      	mov	r8, r6
 800050c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800050e:	46c0      	nop			; (mov r8, r8)

08000510 <__udivmoddi4>:
 8000510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000512:	4657      	mov	r7, sl
 8000514:	464e      	mov	r6, r9
 8000516:	4645      	mov	r5, r8
 8000518:	46de      	mov	lr, fp
 800051a:	b5e0      	push	{r5, r6, r7, lr}
 800051c:	0004      	movs	r4, r0
 800051e:	000d      	movs	r5, r1
 8000520:	4692      	mov	sl, r2
 8000522:	4699      	mov	r9, r3
 8000524:	b083      	sub	sp, #12
 8000526:	428b      	cmp	r3, r1
 8000528:	d830      	bhi.n	800058c <__udivmoddi4+0x7c>
 800052a:	d02d      	beq.n	8000588 <__udivmoddi4+0x78>
 800052c:	4649      	mov	r1, r9
 800052e:	4650      	mov	r0, sl
 8000530:	f000 f8d8 	bl	80006e4 <__clzdi2>
 8000534:	0029      	movs	r1, r5
 8000536:	0006      	movs	r6, r0
 8000538:	0020      	movs	r0, r4
 800053a:	f000 f8d3 	bl	80006e4 <__clzdi2>
 800053e:	1a33      	subs	r3, r6, r0
 8000540:	4698      	mov	r8, r3
 8000542:	3b20      	subs	r3, #32
 8000544:	469b      	mov	fp, r3
 8000546:	d433      	bmi.n	80005b0 <__udivmoddi4+0xa0>
 8000548:	465a      	mov	r2, fp
 800054a:	4653      	mov	r3, sl
 800054c:	4093      	lsls	r3, r2
 800054e:	4642      	mov	r2, r8
 8000550:	001f      	movs	r7, r3
 8000552:	4653      	mov	r3, sl
 8000554:	4093      	lsls	r3, r2
 8000556:	001e      	movs	r6, r3
 8000558:	42af      	cmp	r7, r5
 800055a:	d83a      	bhi.n	80005d2 <__udivmoddi4+0xc2>
 800055c:	42af      	cmp	r7, r5
 800055e:	d100      	bne.n	8000562 <__udivmoddi4+0x52>
 8000560:	e078      	b.n	8000654 <__udivmoddi4+0x144>
 8000562:	465b      	mov	r3, fp
 8000564:	1ba4      	subs	r4, r4, r6
 8000566:	41bd      	sbcs	r5, r7
 8000568:	2b00      	cmp	r3, #0
 800056a:	da00      	bge.n	800056e <__udivmoddi4+0x5e>
 800056c:	e075      	b.n	800065a <__udivmoddi4+0x14a>
 800056e:	2200      	movs	r2, #0
 8000570:	2300      	movs	r3, #0
 8000572:	9200      	str	r2, [sp, #0]
 8000574:	9301      	str	r3, [sp, #4]
 8000576:	2301      	movs	r3, #1
 8000578:	465a      	mov	r2, fp
 800057a:	4093      	lsls	r3, r2
 800057c:	9301      	str	r3, [sp, #4]
 800057e:	2301      	movs	r3, #1
 8000580:	4642      	mov	r2, r8
 8000582:	4093      	lsls	r3, r2
 8000584:	9300      	str	r3, [sp, #0]
 8000586:	e028      	b.n	80005da <__udivmoddi4+0xca>
 8000588:	4282      	cmp	r2, r0
 800058a:	d9cf      	bls.n	800052c <__udivmoddi4+0x1c>
 800058c:	2200      	movs	r2, #0
 800058e:	2300      	movs	r3, #0
 8000590:	9200      	str	r2, [sp, #0]
 8000592:	9301      	str	r3, [sp, #4]
 8000594:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <__udivmoddi4+0x8e>
 800059a:	601c      	str	r4, [r3, #0]
 800059c:	605d      	str	r5, [r3, #4]
 800059e:	9800      	ldr	r0, [sp, #0]
 80005a0:	9901      	ldr	r1, [sp, #4]
 80005a2:	b003      	add	sp, #12
 80005a4:	bcf0      	pop	{r4, r5, r6, r7}
 80005a6:	46bb      	mov	fp, r7
 80005a8:	46b2      	mov	sl, r6
 80005aa:	46a9      	mov	r9, r5
 80005ac:	46a0      	mov	r8, r4
 80005ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b0:	4642      	mov	r2, r8
 80005b2:	2320      	movs	r3, #32
 80005b4:	1a9b      	subs	r3, r3, r2
 80005b6:	4652      	mov	r2, sl
 80005b8:	40da      	lsrs	r2, r3
 80005ba:	4641      	mov	r1, r8
 80005bc:	0013      	movs	r3, r2
 80005be:	464a      	mov	r2, r9
 80005c0:	408a      	lsls	r2, r1
 80005c2:	0017      	movs	r7, r2
 80005c4:	4642      	mov	r2, r8
 80005c6:	431f      	orrs	r7, r3
 80005c8:	4653      	mov	r3, sl
 80005ca:	4093      	lsls	r3, r2
 80005cc:	001e      	movs	r6, r3
 80005ce:	42af      	cmp	r7, r5
 80005d0:	d9c4      	bls.n	800055c <__udivmoddi4+0x4c>
 80005d2:	2200      	movs	r2, #0
 80005d4:	2300      	movs	r3, #0
 80005d6:	9200      	str	r2, [sp, #0]
 80005d8:	9301      	str	r3, [sp, #4]
 80005da:	4643      	mov	r3, r8
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d0d9      	beq.n	8000594 <__udivmoddi4+0x84>
 80005e0:	07fb      	lsls	r3, r7, #31
 80005e2:	0872      	lsrs	r2, r6, #1
 80005e4:	431a      	orrs	r2, r3
 80005e6:	4646      	mov	r6, r8
 80005e8:	087b      	lsrs	r3, r7, #1
 80005ea:	e00e      	b.n	800060a <__udivmoddi4+0xfa>
 80005ec:	42ab      	cmp	r3, r5
 80005ee:	d101      	bne.n	80005f4 <__udivmoddi4+0xe4>
 80005f0:	42a2      	cmp	r2, r4
 80005f2:	d80c      	bhi.n	800060e <__udivmoddi4+0xfe>
 80005f4:	1aa4      	subs	r4, r4, r2
 80005f6:	419d      	sbcs	r5, r3
 80005f8:	2001      	movs	r0, #1
 80005fa:	1924      	adds	r4, r4, r4
 80005fc:	416d      	adcs	r5, r5
 80005fe:	2100      	movs	r1, #0
 8000600:	3e01      	subs	r6, #1
 8000602:	1824      	adds	r4, r4, r0
 8000604:	414d      	adcs	r5, r1
 8000606:	2e00      	cmp	r6, #0
 8000608:	d006      	beq.n	8000618 <__udivmoddi4+0x108>
 800060a:	42ab      	cmp	r3, r5
 800060c:	d9ee      	bls.n	80005ec <__udivmoddi4+0xdc>
 800060e:	3e01      	subs	r6, #1
 8000610:	1924      	adds	r4, r4, r4
 8000612:	416d      	adcs	r5, r5
 8000614:	2e00      	cmp	r6, #0
 8000616:	d1f8      	bne.n	800060a <__udivmoddi4+0xfa>
 8000618:	9800      	ldr	r0, [sp, #0]
 800061a:	9901      	ldr	r1, [sp, #4]
 800061c:	465b      	mov	r3, fp
 800061e:	1900      	adds	r0, r0, r4
 8000620:	4169      	adcs	r1, r5
 8000622:	2b00      	cmp	r3, #0
 8000624:	db24      	blt.n	8000670 <__udivmoddi4+0x160>
 8000626:	002b      	movs	r3, r5
 8000628:	465a      	mov	r2, fp
 800062a:	4644      	mov	r4, r8
 800062c:	40d3      	lsrs	r3, r2
 800062e:	002a      	movs	r2, r5
 8000630:	40e2      	lsrs	r2, r4
 8000632:	001c      	movs	r4, r3
 8000634:	465b      	mov	r3, fp
 8000636:	0015      	movs	r5, r2
 8000638:	2b00      	cmp	r3, #0
 800063a:	db2a      	blt.n	8000692 <__udivmoddi4+0x182>
 800063c:	0026      	movs	r6, r4
 800063e:	409e      	lsls	r6, r3
 8000640:	0033      	movs	r3, r6
 8000642:	0026      	movs	r6, r4
 8000644:	4647      	mov	r7, r8
 8000646:	40be      	lsls	r6, r7
 8000648:	0032      	movs	r2, r6
 800064a:	1a80      	subs	r0, r0, r2
 800064c:	4199      	sbcs	r1, r3
 800064e:	9000      	str	r0, [sp, #0]
 8000650:	9101      	str	r1, [sp, #4]
 8000652:	e79f      	b.n	8000594 <__udivmoddi4+0x84>
 8000654:	42a3      	cmp	r3, r4
 8000656:	d8bc      	bhi.n	80005d2 <__udivmoddi4+0xc2>
 8000658:	e783      	b.n	8000562 <__udivmoddi4+0x52>
 800065a:	4642      	mov	r2, r8
 800065c:	2320      	movs	r3, #32
 800065e:	2100      	movs	r1, #0
 8000660:	1a9b      	subs	r3, r3, r2
 8000662:	2200      	movs	r2, #0
 8000664:	9100      	str	r1, [sp, #0]
 8000666:	9201      	str	r2, [sp, #4]
 8000668:	2201      	movs	r2, #1
 800066a:	40da      	lsrs	r2, r3
 800066c:	9201      	str	r2, [sp, #4]
 800066e:	e786      	b.n	800057e <__udivmoddi4+0x6e>
 8000670:	4642      	mov	r2, r8
 8000672:	2320      	movs	r3, #32
 8000674:	1a9b      	subs	r3, r3, r2
 8000676:	002a      	movs	r2, r5
 8000678:	4646      	mov	r6, r8
 800067a:	409a      	lsls	r2, r3
 800067c:	0023      	movs	r3, r4
 800067e:	40f3      	lsrs	r3, r6
 8000680:	4644      	mov	r4, r8
 8000682:	4313      	orrs	r3, r2
 8000684:	002a      	movs	r2, r5
 8000686:	40e2      	lsrs	r2, r4
 8000688:	001c      	movs	r4, r3
 800068a:	465b      	mov	r3, fp
 800068c:	0015      	movs	r5, r2
 800068e:	2b00      	cmp	r3, #0
 8000690:	dad4      	bge.n	800063c <__udivmoddi4+0x12c>
 8000692:	4642      	mov	r2, r8
 8000694:	002f      	movs	r7, r5
 8000696:	2320      	movs	r3, #32
 8000698:	0026      	movs	r6, r4
 800069a:	4097      	lsls	r7, r2
 800069c:	1a9b      	subs	r3, r3, r2
 800069e:	40de      	lsrs	r6, r3
 80006a0:	003b      	movs	r3, r7
 80006a2:	4333      	orrs	r3, r6
 80006a4:	e7cd      	b.n	8000642 <__udivmoddi4+0x132>
 80006a6:	46c0      	nop			; (mov r8, r8)

080006a8 <__gnu_ldivmod_helper>:
 80006a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006aa:	46ce      	mov	lr, r9
 80006ac:	4647      	mov	r7, r8
 80006ae:	b580      	push	{r7, lr}
 80006b0:	4691      	mov	r9, r2
 80006b2:	4698      	mov	r8, r3
 80006b4:	0004      	movs	r4, r0
 80006b6:	000d      	movs	r5, r1
 80006b8:	f000 f820 	bl	80006fc <__divdi3>
 80006bc:	0007      	movs	r7, r0
 80006be:	000e      	movs	r6, r1
 80006c0:	0002      	movs	r2, r0
 80006c2:	000b      	movs	r3, r1
 80006c4:	4648      	mov	r0, r9
 80006c6:	4641      	mov	r1, r8
 80006c8:	f7ff fef4 	bl	80004b4 <__aeabi_lmul>
 80006cc:	1a24      	subs	r4, r4, r0
 80006ce:	418d      	sbcs	r5, r1
 80006d0:	9b08      	ldr	r3, [sp, #32]
 80006d2:	0038      	movs	r0, r7
 80006d4:	0031      	movs	r1, r6
 80006d6:	601c      	str	r4, [r3, #0]
 80006d8:	605d      	str	r5, [r3, #4]
 80006da:	bcc0      	pop	{r6, r7}
 80006dc:	46b9      	mov	r9, r7
 80006de:	46b0      	mov	r8, r6
 80006e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80006e2:	46c0      	nop			; (mov r8, r8)

080006e4 <__clzdi2>:
 80006e4:	b510      	push	{r4, lr}
 80006e6:	2900      	cmp	r1, #0
 80006e8:	d103      	bne.n	80006f2 <__clzdi2+0xe>
 80006ea:	f000 f8ed 	bl	80008c8 <__clzsi2>
 80006ee:	3020      	adds	r0, #32
 80006f0:	e002      	b.n	80006f8 <__clzdi2+0x14>
 80006f2:	0008      	movs	r0, r1
 80006f4:	f000 f8e8 	bl	80008c8 <__clzsi2>
 80006f8:	bd10      	pop	{r4, pc}
 80006fa:	46c0      	nop			; (mov r8, r8)

080006fc <__divdi3>:
 80006fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006fe:	4657      	mov	r7, sl
 8000700:	464e      	mov	r6, r9
 8000702:	4645      	mov	r5, r8
 8000704:	46de      	mov	lr, fp
 8000706:	b5e0      	push	{r5, r6, r7, lr}
 8000708:	000f      	movs	r7, r1
 800070a:	0019      	movs	r1, r3
 800070c:	2300      	movs	r3, #0
 800070e:	0006      	movs	r6, r0
 8000710:	4698      	mov	r8, r3
 8000712:	0010      	movs	r0, r2
 8000714:	b083      	sub	sp, #12
 8000716:	2f00      	cmp	r7, #0
 8000718:	da07      	bge.n	800072a <__divdi3+0x2e>
 800071a:	0033      	movs	r3, r6
 800071c:	003c      	movs	r4, r7
 800071e:	2700      	movs	r7, #0
 8000720:	425e      	negs	r6, r3
 8000722:	41a7      	sbcs	r7, r4
 8000724:	2301      	movs	r3, #1
 8000726:	425b      	negs	r3, r3
 8000728:	4698      	mov	r8, r3
 800072a:	2900      	cmp	r1, #0
 800072c:	da07      	bge.n	800073e <__divdi3+0x42>
 800072e:	4643      	mov	r3, r8
 8000730:	43db      	mvns	r3, r3
 8000732:	000c      	movs	r4, r1
 8000734:	4698      	mov	r8, r3
 8000736:	0003      	movs	r3, r0
 8000738:	2100      	movs	r1, #0
 800073a:	4258      	negs	r0, r3
 800073c:	41a1      	sbcs	r1, r4
 800073e:	0034      	movs	r4, r6
 8000740:	003d      	movs	r5, r7
 8000742:	4682      	mov	sl, r0
 8000744:	4689      	mov	r9, r1
 8000746:	42b9      	cmp	r1, r7
 8000748:	d86a      	bhi.n	8000820 <__divdi3+0x124>
 800074a:	d067      	beq.n	800081c <__divdi3+0x120>
 800074c:	4649      	mov	r1, r9
 800074e:	4650      	mov	r0, sl
 8000750:	f7ff ffc8 	bl	80006e4 <__clzdi2>
 8000754:	4683      	mov	fp, r0
 8000756:	0039      	movs	r1, r7
 8000758:	0030      	movs	r0, r6
 800075a:	f7ff ffc3 	bl	80006e4 <__clzdi2>
 800075e:	465b      	mov	r3, fp
 8000760:	1a1b      	subs	r3, r3, r0
 8000762:	469c      	mov	ip, r3
 8000764:	3b20      	subs	r3, #32
 8000766:	469b      	mov	fp, r3
 8000768:	d46b      	bmi.n	8000842 <__divdi3+0x146>
 800076a:	4658      	mov	r0, fp
 800076c:	4651      	mov	r1, sl
 800076e:	4081      	lsls	r1, r0
 8000770:	4660      	mov	r0, ip
 8000772:	000b      	movs	r3, r1
 8000774:	4651      	mov	r1, sl
 8000776:	4081      	lsls	r1, r0
 8000778:	000a      	movs	r2, r1
 800077a:	42bb      	cmp	r3, r7
 800077c:	d900      	bls.n	8000780 <__divdi3+0x84>
 800077e:	e072      	b.n	8000866 <__divdi3+0x16a>
 8000780:	42bb      	cmp	r3, r7
 8000782:	d100      	bne.n	8000786 <__divdi3+0x8a>
 8000784:	e079      	b.n	800087a <__divdi3+0x17e>
 8000786:	0034      	movs	r4, r6
 8000788:	003d      	movs	r5, r7
 800078a:	4659      	mov	r1, fp
 800078c:	1aa4      	subs	r4, r4, r2
 800078e:	419d      	sbcs	r5, r3
 8000790:	2900      	cmp	r1, #0
 8000792:	da00      	bge.n	8000796 <__divdi3+0x9a>
 8000794:	e074      	b.n	8000880 <__divdi3+0x184>
 8000796:	2100      	movs	r1, #0
 8000798:	2000      	movs	r0, #0
 800079a:	2601      	movs	r6, #1
 800079c:	9000      	str	r0, [sp, #0]
 800079e:	9101      	str	r1, [sp, #4]
 80007a0:	4659      	mov	r1, fp
 80007a2:	408e      	lsls	r6, r1
 80007a4:	9601      	str	r6, [sp, #4]
 80007a6:	4661      	mov	r1, ip
 80007a8:	2601      	movs	r6, #1
 80007aa:	408e      	lsls	r6, r1
 80007ac:	4661      	mov	r1, ip
 80007ae:	9600      	str	r6, [sp, #0]
 80007b0:	2900      	cmp	r1, #0
 80007b2:	d05f      	beq.n	8000874 <__divdi3+0x178>
 80007b4:	07d9      	lsls	r1, r3, #31
 80007b6:	0856      	lsrs	r6, r2, #1
 80007b8:	430e      	orrs	r6, r1
 80007ba:	085f      	lsrs	r7, r3, #1
 80007bc:	4661      	mov	r1, ip
 80007be:	2201      	movs	r2, #1
 80007c0:	2300      	movs	r3, #0
 80007c2:	e00c      	b.n	80007de <__divdi3+0xe2>
 80007c4:	42af      	cmp	r7, r5
 80007c6:	d101      	bne.n	80007cc <__divdi3+0xd0>
 80007c8:	42a6      	cmp	r6, r4
 80007ca:	d80a      	bhi.n	80007e2 <__divdi3+0xe6>
 80007cc:	1ba4      	subs	r4, r4, r6
 80007ce:	41bd      	sbcs	r5, r7
 80007d0:	1924      	adds	r4, r4, r4
 80007d2:	416d      	adcs	r5, r5
 80007d4:	3901      	subs	r1, #1
 80007d6:	18a4      	adds	r4, r4, r2
 80007d8:	415d      	adcs	r5, r3
 80007da:	2900      	cmp	r1, #0
 80007dc:	d006      	beq.n	80007ec <__divdi3+0xf0>
 80007de:	42af      	cmp	r7, r5
 80007e0:	d9f0      	bls.n	80007c4 <__divdi3+0xc8>
 80007e2:	3901      	subs	r1, #1
 80007e4:	1924      	adds	r4, r4, r4
 80007e6:	416d      	adcs	r5, r5
 80007e8:	2900      	cmp	r1, #0
 80007ea:	d1f8      	bne.n	80007de <__divdi3+0xe2>
 80007ec:	9800      	ldr	r0, [sp, #0]
 80007ee:	9901      	ldr	r1, [sp, #4]
 80007f0:	465b      	mov	r3, fp
 80007f2:	1900      	adds	r0, r0, r4
 80007f4:	4169      	adcs	r1, r5
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	db4d      	blt.n	8000896 <__divdi3+0x19a>
 80007fa:	002e      	movs	r6, r5
 80007fc:	002c      	movs	r4, r5
 80007fe:	40de      	lsrs	r6, r3
 8000800:	4663      	mov	r3, ip
 8000802:	40dc      	lsrs	r4, r3
 8000804:	465b      	mov	r3, fp
 8000806:	2b00      	cmp	r3, #0
 8000808:	db55      	blt.n	80008b6 <__divdi3+0x1ba>
 800080a:	0034      	movs	r4, r6
 800080c:	409c      	lsls	r4, r3
 800080e:	0023      	movs	r3, r4
 8000810:	4664      	mov	r4, ip
 8000812:	40a6      	lsls	r6, r4
 8000814:	0032      	movs	r2, r6
 8000816:	1a80      	subs	r0, r0, r2
 8000818:	4199      	sbcs	r1, r3
 800081a:	e003      	b.n	8000824 <__divdi3+0x128>
 800081c:	42b0      	cmp	r0, r6
 800081e:	d995      	bls.n	800074c <__divdi3+0x50>
 8000820:	2000      	movs	r0, #0
 8000822:	2100      	movs	r1, #0
 8000824:	4643      	mov	r3, r8
 8000826:	2b00      	cmp	r3, #0
 8000828:	d004      	beq.n	8000834 <__divdi3+0x138>
 800082a:	0003      	movs	r3, r0
 800082c:	000c      	movs	r4, r1
 800082e:	2100      	movs	r1, #0
 8000830:	4258      	negs	r0, r3
 8000832:	41a1      	sbcs	r1, r4
 8000834:	b003      	add	sp, #12
 8000836:	bcf0      	pop	{r4, r5, r6, r7}
 8000838:	46bb      	mov	fp, r7
 800083a:	46b2      	mov	sl, r6
 800083c:	46a9      	mov	r9, r5
 800083e:	46a0      	mov	r8, r4
 8000840:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000842:	4662      	mov	r2, ip
 8000844:	4648      	mov	r0, r9
 8000846:	2320      	movs	r3, #32
 8000848:	4651      	mov	r1, sl
 800084a:	4090      	lsls	r0, r2
 800084c:	1a9b      	subs	r3, r3, r2
 800084e:	40d9      	lsrs	r1, r3
 8000850:	0003      	movs	r3, r0
 8000852:	9100      	str	r1, [sp, #0]
 8000854:	9900      	ldr	r1, [sp, #0]
 8000856:	4660      	mov	r0, ip
 8000858:	430b      	orrs	r3, r1
 800085a:	4651      	mov	r1, sl
 800085c:	4081      	lsls	r1, r0
 800085e:	000a      	movs	r2, r1
 8000860:	42bb      	cmp	r3, r7
 8000862:	d800      	bhi.n	8000866 <__divdi3+0x16a>
 8000864:	e78c      	b.n	8000780 <__divdi3+0x84>
 8000866:	2100      	movs	r1, #0
 8000868:	2000      	movs	r0, #0
 800086a:	9000      	str	r0, [sp, #0]
 800086c:	9101      	str	r1, [sp, #4]
 800086e:	4661      	mov	r1, ip
 8000870:	2900      	cmp	r1, #0
 8000872:	d19f      	bne.n	80007b4 <__divdi3+0xb8>
 8000874:	9800      	ldr	r0, [sp, #0]
 8000876:	9901      	ldr	r1, [sp, #4]
 8000878:	e7d4      	b.n	8000824 <__divdi3+0x128>
 800087a:	42b1      	cmp	r1, r6
 800087c:	d8f3      	bhi.n	8000866 <__divdi3+0x16a>
 800087e:	e782      	b.n	8000786 <__divdi3+0x8a>
 8000880:	4661      	mov	r1, ip
 8000882:	2620      	movs	r6, #32
 8000884:	2701      	movs	r7, #1
 8000886:	1a76      	subs	r6, r6, r1
 8000888:	2000      	movs	r0, #0
 800088a:	2100      	movs	r1, #0
 800088c:	40f7      	lsrs	r7, r6
 800088e:	9000      	str	r0, [sp, #0]
 8000890:	9101      	str	r1, [sp, #4]
 8000892:	9701      	str	r7, [sp, #4]
 8000894:	e787      	b.n	80007a6 <__divdi3+0xaa>
 8000896:	4662      	mov	r2, ip
 8000898:	2320      	movs	r3, #32
 800089a:	1a9b      	subs	r3, r3, r2
 800089c:	002a      	movs	r2, r5
 800089e:	409a      	lsls	r2, r3
 80008a0:	0026      	movs	r6, r4
 80008a2:	0013      	movs	r3, r2
 80008a4:	4662      	mov	r2, ip
 80008a6:	40d6      	lsrs	r6, r2
 80008a8:	002c      	movs	r4, r5
 80008aa:	431e      	orrs	r6, r3
 80008ac:	4663      	mov	r3, ip
 80008ae:	40dc      	lsrs	r4, r3
 80008b0:	465b      	mov	r3, fp
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	daa9      	bge.n	800080a <__divdi3+0x10e>
 80008b6:	4662      	mov	r2, ip
 80008b8:	2320      	movs	r3, #32
 80008ba:	0035      	movs	r5, r6
 80008bc:	4094      	lsls	r4, r2
 80008be:	1a9b      	subs	r3, r3, r2
 80008c0:	40dd      	lsrs	r5, r3
 80008c2:	0023      	movs	r3, r4
 80008c4:	432b      	orrs	r3, r5
 80008c6:	e7a3      	b.n	8000810 <__divdi3+0x114>

080008c8 <__clzsi2>:
 80008c8:	211c      	movs	r1, #28
 80008ca:	2301      	movs	r3, #1
 80008cc:	041b      	lsls	r3, r3, #16
 80008ce:	4298      	cmp	r0, r3
 80008d0:	d301      	bcc.n	80008d6 <__clzsi2+0xe>
 80008d2:	0c00      	lsrs	r0, r0, #16
 80008d4:	3910      	subs	r1, #16
 80008d6:	0a1b      	lsrs	r3, r3, #8
 80008d8:	4298      	cmp	r0, r3
 80008da:	d301      	bcc.n	80008e0 <__clzsi2+0x18>
 80008dc:	0a00      	lsrs	r0, r0, #8
 80008de:	3908      	subs	r1, #8
 80008e0:	091b      	lsrs	r3, r3, #4
 80008e2:	4298      	cmp	r0, r3
 80008e4:	d301      	bcc.n	80008ea <__clzsi2+0x22>
 80008e6:	0900      	lsrs	r0, r0, #4
 80008e8:	3904      	subs	r1, #4
 80008ea:	a202      	add	r2, pc, #8	; (adr r2, 80008f4 <__clzsi2+0x2c>)
 80008ec:	5c10      	ldrb	r0, [r2, r0]
 80008ee:	1840      	adds	r0, r0, r1
 80008f0:	4770      	bx	lr
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	02020304 	.word	0x02020304
 80008f8:	01010101 	.word	0x01010101
	...

08000904 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000908:	f000 fde6 	bl	80014d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800090c:	f000 f866 	bl	80009dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000910:	f000 f96a 	bl	8000be8 <MX_GPIO_Init>
  MX_RTC_Init();
 8000914:	f000 f8d0 	bl	8000ab8 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000918:	f000 f934 	bl	8000b84 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  //Time_Init();
  Serial_Receive_Init();
 800091c:	f000 fd70 	bl	8001400 <Serial_Receive_Init>

  /* 08-03-2023 update */

  sys_time_start = HAL_GetTick();
 8000920:	f000 fe40 	bl	80015a4 <HAL_GetTick>
 8000924:	0002      	movs	r2, r0
 8000926:	4b26      	ldr	r3, [pc, #152]	; (80009c0 <main+0xbc>)
 8000928:	601a      	str	r2, [r3, #0]
  rtc_time_start = RTC_Get_Time();
 800092a:	f000 f999 	bl	8000c60 <RTC_Get_Time>
 800092e:	0002      	movs	r2, r0
 8000930:	4b24      	ldr	r3, [pc, #144]	; (80009c4 <main+0xc0>)
 8000932:	601a      	str	r2, [r3, #0]

  while(HAL_GetTick() - sys_time_start <= 60 * 1000)
 8000934:	46c0      	nop			; (mov r8, r8)
 8000936:	f000 fe35 	bl	80015a4 <HAL_GetTick>
 800093a:	0002      	movs	r2, r0
 800093c:	4b20      	ldr	r3, [pc, #128]	; (80009c0 <main+0xbc>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	1ad3      	subs	r3, r2, r3
 8000942:	4a21      	ldr	r2, [pc, #132]	; (80009c8 <main+0xc4>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d9f6      	bls.n	8000936 <main+0x32>
  {

  }
  rtc_time_diff = RTC_Get_Time() - rtc_time_start;
 8000948:	f000 f98a 	bl	8000c60 <RTC_Get_Time>
 800094c:	0002      	movs	r2, r0
 800094e:	4b1d      	ldr	r3, [pc, #116]	; (80009c4 <main+0xc0>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	1ad2      	subs	r2, r2, r3
 8000954:	4b1d      	ldr	r3, [pc, #116]	; (80009cc <main+0xc8>)
 8000956:	601a      	str	r2, [r3, #0]
  syn_pred = rtc_time_diff * 37000 / 60;
 8000958:	4b1c      	ldr	r3, [pc, #112]	; (80009cc <main+0xc8>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a1c      	ldr	r2, [pc, #112]	; (80009d0 <main+0xcc>)
 800095e:	4353      	muls	r3, r2
 8000960:	213c      	movs	r1, #60	; 0x3c
 8000962:	0018      	movs	r0, r3
 8000964:	f7ff fbec 	bl	8000140 <__udivsi3>
 8000968:	0003      	movs	r3, r0
 800096a:	b29a      	uxth	r2, r3
 800096c:	4b19      	ldr	r3, [pc, #100]	; (80009d4 <main+0xd0>)
 800096e:	801a      	strh	r2, [r3, #0]

  __HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8000970:	4b19      	ldr	r3, [pc, #100]	; (80009d8 <main+0xd4>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	22ca      	movs	r2, #202	; 0xca
 8000976:	625a      	str	r2, [r3, #36]	; 0x24
 8000978:	4b17      	ldr	r3, [pc, #92]	; (80009d8 <main+0xd4>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2253      	movs	r2, #83	; 0x53
 800097e:	625a      	str	r2, [r3, #36]	; 0x24
  RTC_EnterInitMode(&hrtc);
 8000980:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <main+0xd4>)
 8000982:	0018      	movs	r0, r3
 8000984:	f002 fae1 	bl	8002f4a <RTC_EnterInitMode>

  hrtc.Instance-> PRER = 0x00630000 + syn_pred / 100;
 8000988:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <main+0xd0>)
 800098a:	881b      	ldrh	r3, [r3, #0]
 800098c:	2164      	movs	r1, #100	; 0x64
 800098e:	0018      	movs	r0, r3
 8000990:	f7ff fbd6 	bl	8000140 <__udivsi3>
 8000994:	0003      	movs	r3, r0
 8000996:	b29b      	uxth	r3, r3
 8000998:	22c6      	movs	r2, #198	; 0xc6
 800099a:	03d2      	lsls	r2, r2, #15
 800099c:	189a      	adds	r2, r3, r2
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <main+0xd4>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	611a      	str	r2, [r3, #16]


  hrtc.Instance-> ISR &= ((uint32_t) RTC_ISR_INITS);
 80009a4:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <main+0xd4>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	68da      	ldr	r2, [r3, #12]
 80009aa:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <main+0xd4>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	2110      	movs	r1, #16
 80009b0:	400a      	ands	r2, r1
 80009b2:	60da      	str	r2, [r3, #12]
  __HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 80009b4:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <main+0xd4>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	22ff      	movs	r2, #255	; 0xff
 80009ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <main+0xb8>
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	200001a8 	.word	0x200001a8
 80009c4:	200001a4 	.word	0x200001a4
 80009c8:	0000ea60 	.word	0x0000ea60
 80009cc:	200001ac 	.word	0x200001ac
 80009d0:	00009088 	.word	0x00009088
 80009d4:	200001b0 	.word	0x200001b0
 80009d8:	200000fc 	.word	0x200000fc

080009dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009dc:	b590      	push	{r4, r7, lr}
 80009de:	b09b      	sub	sp, #108	; 0x6c
 80009e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009e2:	2434      	movs	r4, #52	; 0x34
 80009e4:	193b      	adds	r3, r7, r4
 80009e6:	0018      	movs	r0, r3
 80009e8:	2334      	movs	r3, #52	; 0x34
 80009ea:	001a      	movs	r2, r3
 80009ec:	2100      	movs	r1, #0
 80009ee:	f004 f806 	bl	80049fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f2:	2320      	movs	r3, #32
 80009f4:	18fb      	adds	r3, r7, r3
 80009f6:	0018      	movs	r0, r3
 80009f8:	2314      	movs	r3, #20
 80009fa:	001a      	movs	r2, r3
 80009fc:	2100      	movs	r1, #0
 80009fe:	f003 fffe 	bl	80049fe <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a02:	003b      	movs	r3, r7
 8000a04:	0018      	movs	r0, r3
 8000a06:	2320      	movs	r3, #32
 8000a08:	001a      	movs	r2, r3
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	f003 fff7 	bl	80049fe <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a10:	4b27      	ldr	r3, [pc, #156]	; (8000ab0 <SystemClock_Config+0xd4>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a27      	ldr	r2, [pc, #156]	; (8000ab4 <SystemClock_Config+0xd8>)
 8000a16:	401a      	ands	r2, r3
 8000a18:	4b25      	ldr	r3, [pc, #148]	; (8000ab0 <SystemClock_Config+0xd4>)
 8000a1a:	2180      	movs	r1, #128	; 0x80
 8000a1c:	0109      	lsls	r1, r1, #4
 8000a1e:	430a      	orrs	r2, r1
 8000a20:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000a22:	0021      	movs	r1, r4
 8000a24:	187b      	adds	r3, r7, r1
 8000a26:	220a      	movs	r2, #10
 8000a28:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a2a:	187b      	adds	r3, r7, r1
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a30:	187b      	adds	r3, r7, r1
 8000a32:	2210      	movs	r2, #16
 8000a34:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a36:	187b      	adds	r3, r7, r1
 8000a38:	2201      	movs	r2, #1
 8000a3a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a3c:	187b      	adds	r3, r7, r1
 8000a3e:	2200      	movs	r2, #0
 8000a40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a42:	187b      	adds	r3, r7, r1
 8000a44:	0018      	movs	r0, r3
 8000a46:	f001 f8b9 	bl	8001bbc <HAL_RCC_OscConfig>
 8000a4a:	1e03      	subs	r3, r0, #0
 8000a4c:	d001      	beq.n	8000a52 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000a4e:	f000 f901 	bl	8000c54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a52:	2120      	movs	r1, #32
 8000a54:	187b      	adds	r3, r7, r1
 8000a56:	220f      	movs	r2, #15
 8000a58:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a5a:	187b      	adds	r3, r7, r1
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a60:	187b      	adds	r3, r7, r1
 8000a62:	2200      	movs	r2, #0
 8000a64:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a66:	187b      	adds	r3, r7, r1
 8000a68:	2200      	movs	r2, #0
 8000a6a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a6c:	187b      	adds	r3, r7, r1
 8000a6e:	2200      	movs	r2, #0
 8000a70:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a72:	187b      	adds	r3, r7, r1
 8000a74:	2100      	movs	r1, #0
 8000a76:	0018      	movs	r0, r3
 8000a78:	f001 fc1c 	bl	80022b4 <HAL_RCC_ClockConfig>
 8000a7c:	1e03      	subs	r3, r0, #0
 8000a7e:	d001      	beq.n	8000a84 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000a80:	f000 f8e8 	bl	8000c54 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_RTC;
 8000a84:	003b      	movs	r3, r7
 8000a86:	2221      	movs	r2, #33	; 0x21
 8000a88:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8000a8a:	003b      	movs	r3, r7
 8000a8c:	2202      	movs	r2, #2
 8000a8e:	609a      	str	r2, [r3, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000a90:	003b      	movs	r3, r7
 8000a92:	2280      	movs	r2, #128	; 0x80
 8000a94:	0292      	lsls	r2, r2, #10
 8000a96:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a98:	003b      	movs	r3, r7
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f001 fe2e 	bl	80026fc <HAL_RCCEx_PeriphCLKConfig>
 8000aa0:	1e03      	subs	r3, r0, #0
 8000aa2:	d001      	beq.n	8000aa8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000aa4:	f000 f8d6 	bl	8000c54 <Error_Handler>
  }
}
 8000aa8:	46c0      	nop			; (mov r8, r8)
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	b01b      	add	sp, #108	; 0x6c
 8000aae:	bd90      	pop	{r4, r7, pc}
 8000ab0:	40007000 	.word	0x40007000
 8000ab4:	ffffe7ff 	.word	0xffffe7ff

08000ab8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b086      	sub	sp, #24
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000abe:	1d3b      	adds	r3, r7, #4
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	2314      	movs	r3, #20
 8000ac4:	001a      	movs	r2, r3
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	f003 ff99 	bl	80049fe <memset>
  RTC_DateTypeDef sDate = {0};
 8000acc:	003b      	movs	r3, r7
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ad2:	4b2a      	ldr	r3, [pc, #168]	; (8000b7c <MX_RTC_Init+0xc4>)
 8000ad4:	4a2a      	ldr	r2, [pc, #168]	; (8000b80 <MX_RTC_Init+0xc8>)
 8000ad6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000ad8:	4b28      	ldr	r3, [pc, #160]	; (8000b7c <MX_RTC_Init+0xc4>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 125;
 8000ade:	4b27      	ldr	r3, [pc, #156]	; (8000b7c <MX_RTC_Init+0xc4>)
 8000ae0:	227d      	movs	r2, #125	; 0x7d
 8000ae2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 323;
 8000ae4:	4b25      	ldr	r3, [pc, #148]	; (8000b7c <MX_RTC_Init+0xc4>)
 8000ae6:	2244      	movs	r2, #68	; 0x44
 8000ae8:	32ff      	adds	r2, #255	; 0xff
 8000aea:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000aec:	4b23      	ldr	r3, [pc, #140]	; (8000b7c <MX_RTC_Init+0xc4>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000af2:	4b22      	ldr	r3, [pc, #136]	; (8000b7c <MX_RTC_Init+0xc4>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000af8:	4b20      	ldr	r3, [pc, #128]	; (8000b7c <MX_RTC_Init+0xc4>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000afe:	4b1f      	ldr	r3, [pc, #124]	; (8000b7c <MX_RTC_Init+0xc4>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b04:	4b1d      	ldr	r3, [pc, #116]	; (8000b7c <MX_RTC_Init+0xc4>)
 8000b06:	0018      	movs	r0, r3
 8000b08:	f001 ff3e 	bl	8002988 <HAL_RTC_Init>
 8000b0c:	1e03      	subs	r3, r0, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 8000b10:	f000 f8a0 	bl	8000c54 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000b14:	1d3b      	adds	r3, r7, #4
 8000b16:	2200      	movs	r2, #0
 8000b18:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8000b1a:	1d3b      	adds	r3, r7, #4
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	2200      	movs	r2, #0
 8000b24:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b26:	1d3b      	adds	r3, r7, #4
 8000b28:	2200      	movs	r2, #0
 8000b2a:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000b2c:	1d3b      	adds	r3, r7, #4
 8000b2e:	2200      	movs	r2, #0
 8000b30:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000b32:	1d39      	adds	r1, r7, #4
 8000b34:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <MX_RTC_Init+0xc4>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f001 ffc3 	bl	8002ac4 <HAL_RTC_SetTime>
 8000b3e:	1e03      	subs	r3, r0, #0
 8000b40:	d001      	beq.n	8000b46 <MX_RTC_Init+0x8e>
  {
    Error_Handler();
 8000b42:	f000 f887 	bl	8000c54 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000b46:	003b      	movs	r3, r7
 8000b48:	2201      	movs	r2, #1
 8000b4a:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000b4c:	003b      	movs	r3, r7
 8000b4e:	2201      	movs	r2, #1
 8000b50:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 8000b52:	003b      	movs	r3, r7
 8000b54:	2201      	movs	r2, #1
 8000b56:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 8000b58:	003b      	movs	r3, r7
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000b5e:	0039      	movs	r1, r7
 8000b60:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <MX_RTC_Init+0xc4>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	0018      	movs	r0, r3
 8000b66:	f002 f8cd 	bl	8002d04 <HAL_RTC_SetDate>
 8000b6a:	1e03      	subs	r3, r0, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_RTC_Init+0xba>
  {
    Error_Handler();
 8000b6e:	f000 f871 	bl	8000c54 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	46bd      	mov	sp, r7
 8000b76:	b006      	add	sp, #24
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	46c0      	nop			; (mov r8, r8)
 8000b7c:	200000fc 	.word	0x200000fc
 8000b80:	40002800 	.word	0x40002800

08000b84 <MX_USART1_UART_Init>:
  * @param None
  * @retval None
  */

static void MX_USART1_UART_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b88:	4b15      	ldr	r3, [pc, #84]	; (8000be0 <MX_USART1_UART_Init+0x5c>)
 8000b8a:	4a16      	ldr	r2, [pc, #88]	; (8000be4 <MX_USART1_UART_Init+0x60>)
 8000b8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8000b8e:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <MX_USART1_UART_Init+0x5c>)
 8000b90:	22e1      	movs	r2, #225	; 0xe1
 8000b92:	02d2      	lsls	r2, r2, #11
 8000b94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b96:	4b12      	ldr	r3, [pc, #72]	; (8000be0 <MX_USART1_UART_Init+0x5c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 8000b9c:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <MX_USART1_UART_Init+0x5c>)
 8000b9e:	2280      	movs	r2, #128	; 0x80
 8000ba0:	0192      	lsls	r2, r2, #6
 8000ba2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ba4:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <MX_USART1_UART_Init+0x5c>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000baa:	4b0d      	ldr	r3, [pc, #52]	; (8000be0 <MX_USART1_UART_Init+0x5c>)
 8000bac:	220c      	movs	r2, #12
 8000bae:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000bb0:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <MX_USART1_UART_Init+0x5c>)
 8000bb2:	22c0      	movs	r2, #192	; 0xc0
 8000bb4:	0092      	lsls	r2, r2, #2
 8000bb6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb8:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <MX_USART1_UART_Init+0x5c>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bbe:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <MX_USART1_UART_Init+0x5c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bc4:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <MX_USART1_UART_Init+0x5c>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bca:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <MX_USART1_UART_Init+0x5c>)
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f002 fa2b 	bl	8003028 <HAL_UART_Init>
 8000bd2:	1e03      	subs	r3, r0, #0
 8000bd4:	d001      	beq.n	8000bda <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8000bd6:	f000 f83d 	bl	8000c54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bda:	46c0      	nop			; (mov r8, r8)
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20000120 	.word	0x20000120
 8000be4:	40013800 	.word	0x40013800

08000be8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	2314      	movs	r3, #20
 8000bf4:	001a      	movs	r2, r3
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	f003 ff01 	bl	80049fe <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfc:	4b14      	ldr	r3, [pc, #80]	; (8000c50 <MX_GPIO_Init+0x68>)
 8000bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c00:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <MX_GPIO_Init+0x68>)
 8000c02:	2101      	movs	r1, #1
 8000c04:	430a      	orrs	r2, r1
 8000c06:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c08:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <MX_GPIO_Init+0x68>)
 8000c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	4013      	ands	r3, r2
 8000c10:	603b      	str	r3, [r7, #0]
 8000c12:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_enable_GPIO_Port, USB_enable_Pin, GPIO_PIN_SET);
 8000c14:	23a0      	movs	r3, #160	; 0xa0
 8000c16:	05db      	lsls	r3, r3, #23
 8000c18:	2201      	movs	r2, #1
 8000c1a:	2101      	movs	r1, #1
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	f000 ffaf 	bl	8001b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USB_enable_Pin */
  GPIO_InitStruct.Pin = USB_enable_Pin;
 8000c22:	1d3b      	adds	r3, r7, #4
 8000c24:	2201      	movs	r2, #1
 8000c26:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c28:	1d3b      	adds	r3, r7, #4
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	1d3b      	adds	r3, r7, #4
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c34:	1d3b      	adds	r3, r7, #4
 8000c36:	2200      	movs	r2, #0
 8000c38:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(USB_enable_GPIO_Port, &GPIO_InitStruct);
 8000c3a:	1d3a      	adds	r2, r7, #4
 8000c3c:	23a0      	movs	r3, #160	; 0xa0
 8000c3e:	05db      	lsls	r3, r3, #23
 8000c40:	0011      	movs	r1, r2
 8000c42:	0018      	movs	r0, r3
 8000c44:	f000 fe1e 	bl	8001884 <HAL_GPIO_Init>

}
 8000c48:	46c0      	nop			; (mov r8, r8)
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	b006      	add	sp, #24
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40021000 	.word	0x40021000

08000c54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c58:	b672      	cpsid	i
}
 8000c5a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <Error_Handler+0x8>
	...

08000c60 <RTC_Get_Time>:




uint32_t RTC_Get_Time(void)
{
 8000c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c62:	b093      	sub	sp, #76	; 0x4c
 8000c64:	af02      	add	r7, sp, #8
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;
	struct tm test;
	uint32_t timestampGet;

	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8000c66:	2524      	movs	r5, #36	; 0x24
 8000c68:	1979      	adds	r1, r7, r5
 8000c6a:	4b2a      	ldr	r3, [pc, #168]	; (8000d14 <RTC_Get_Time+0xb4>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f001 ffec 	bl	8002c4c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8000c74:	2638      	movs	r6, #56	; 0x38
 8000c76:	19b9      	adds	r1, r7, r6
 8000c78:	4b26      	ldr	r3, [pc, #152]	; (8000d14 <RTC_Get_Time+0xb4>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	f002 f8ef 	bl	8002e60 <HAL_RTC_GetDate>

	//Display time Format: hh:mm:ss and Display date Format: yy-mm-dd
	sprintf((char*)timeGet,"%02d:%02d:%02d",gTime.Hours, gTime.Minutes, gTime.Seconds);
 8000c82:	197b      	adds	r3, r7, r5
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	001a      	movs	r2, r3
 8000c88:	197b      	adds	r3, r7, r5
 8000c8a:	785b      	ldrb	r3, [r3, #1]
 8000c8c:	001c      	movs	r4, r3
 8000c8e:	197b      	adds	r3, r7, r5
 8000c90:	789b      	ldrb	r3, [r3, #2]
 8000c92:	4921      	ldr	r1, [pc, #132]	; (8000d18 <RTC_Get_Time+0xb8>)
 8000c94:	4821      	ldr	r0, [pc, #132]	; (8000d1c <RTC_Get_Time+0xbc>)
 8000c96:	9300      	str	r3, [sp, #0]
 8000c98:	0023      	movs	r3, r4
 8000c9a:	f004 fa45 	bl	8005128 <siprintf>
	sprintf((char*)dateGet,"%2d-%02d-%02d",(gDate.Year + 1900), gDate.Month, gDate.Date);
 8000c9e:	19bb      	adds	r3, r7, r6
 8000ca0:	78db      	ldrb	r3, [r3, #3]
 8000ca2:	4a1f      	ldr	r2, [pc, #124]	; (8000d20 <RTC_Get_Time+0xc0>)
 8000ca4:	189a      	adds	r2, r3, r2
 8000ca6:	19bb      	adds	r3, r7, r6
 8000ca8:	785b      	ldrb	r3, [r3, #1]
 8000caa:	001c      	movs	r4, r3
 8000cac:	19bb      	adds	r3, r7, r6
 8000cae:	789b      	ldrb	r3, [r3, #2]
 8000cb0:	491c      	ldr	r1, [pc, #112]	; (8000d24 <RTC_Get_Time+0xc4>)
 8000cb2:	481d      	ldr	r0, [pc, #116]	; (8000d28 <RTC_Get_Time+0xc8>)
 8000cb4:	9300      	str	r3, [sp, #0]
 8000cb6:	0023      	movs	r3, r4
 8000cb8:	f004 fa36 	bl	8005128 <siprintf>
	//HAL_RTCEx_GetTimeStamp(&hrtc, &tTime, &tDate, RTC_FORMAT_BIN);

	test.tm_year = gDate.Year;  // + 100;  // In fact: 2000 + 18 - 1900
 8000cbc:	0031      	movs	r1, r6
 8000cbe:	187b      	adds	r3, r7, r1
 8000cc0:	78db      	ldrb	r3, [r3, #3]
 8000cc2:	001a      	movs	r2, r3
 8000cc4:	003b      	movs	r3, r7
 8000cc6:	615a      	str	r2, [r3, #20]
	test.tm_mday = gDate.Date;
 8000cc8:	187b      	adds	r3, r7, r1
 8000cca:	789b      	ldrb	r3, [r3, #2]
 8000ccc:	001a      	movs	r2, r3
 8000cce:	003b      	movs	r3, r7
 8000cd0:	60da      	str	r2, [r3, #12]
	test.tm_mon  = (gDate.Month - 1);   // - 1;
 8000cd2:	187b      	adds	r3, r7, r1
 8000cd4:	785b      	ldrb	r3, [r3, #1]
 8000cd6:	1e5a      	subs	r2, r3, #1
 8000cd8:	003b      	movs	r3, r7
 8000cda:	611a      	str	r2, [r3, #16]

	test.tm_hour = gTime.Hours;
 8000cdc:	197b      	adds	r3, r7, r5
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	001a      	movs	r2, r3
 8000ce2:	003b      	movs	r3, r7
 8000ce4:	609a      	str	r2, [r3, #8]
	test.tm_min  = gTime.Minutes;
 8000ce6:	197b      	adds	r3, r7, r5
 8000ce8:	785b      	ldrb	r3, [r3, #1]
 8000cea:	001a      	movs	r2, r3
 8000cec:	003b      	movs	r3, r7
 8000cee:	605a      	str	r2, [r3, #4]
	test.tm_sec  = gTime.Seconds;
 8000cf0:	197b      	adds	r3, r7, r5
 8000cf2:	789b      	ldrb	r3, [r3, #2]
 8000cf4:	001a      	movs	r2, r3
 8000cf6:	003b      	movs	r3, r7
 8000cf8:	601a      	str	r2, [r3, #0]

	timestampGet = mktime(&test);
 8000cfa:	003b      	movs	r3, r7
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	f003 ff51 	bl	8004ba4 <mktime>
 8000d02:	0002      	movs	r2, r0
 8000d04:	000b      	movs	r3, r1
 8000d06:	0013      	movs	r3, r2
 8000d08:	63fb      	str	r3, [r7, #60]	; 0x3c
	return timestampGet;
 8000d0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

}
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	b011      	add	sp, #68	; 0x44
 8000d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d14:	200000fc 	.word	0x200000fc
 8000d18:	080075e0 	.word	0x080075e0
 8000d1c:	200001c4 	.word	0x200001c4
 8000d20:	0000076c 	.word	0x0000076c
 8000d24:	080075f0 	.word	0x080075f0
 8000d28:	200001b4 	.word	0x200001b4

08000d2c <Set_Time_To_Timestamp>:

}


void Set_Time_To_Timestamp(struct tm ts)
{
 8000d2c:	b084      	sub	sp, #16
 8000d2e:	b5b0      	push	{r4, r5, r7, lr}
 8000d30:	b086      	sub	sp, #24
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	2528      	movs	r5, #40	; 0x28
 8000d36:	197c      	adds	r4, r7, r5
 8000d38:	6020      	str	r0, [r4, #0]
 8000d3a:	6061      	str	r1, [r4, #4]
 8000d3c:	60a2      	str	r2, [r4, #8]
 8000d3e:	60e3      	str	r3, [r4, #12]

	RTC_TimeTypeDef sTime = {0};
 8000d40:	1d3b      	adds	r3, r7, #4
 8000d42:	0018      	movs	r0, r3
 8000d44:	2314      	movs	r3, #20
 8000d46:	001a      	movs	r2, r3
 8000d48:	2100      	movs	r1, #0
 8000d4a:	f003 fe58 	bl	80049fe <memset>
	RTC_DateTypeDef sDate = {0};
 8000d4e:	003b      	movs	r3, r7
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]

	sTime.Hours = ts.tm_hour;
 8000d54:	0029      	movs	r1, r5
 8000d56:	187b      	adds	r3, r7, r1
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	b2da      	uxtb	r2, r3
 8000d5c:	1d3b      	adds	r3, r7, #4
 8000d5e:	701a      	strb	r2, [r3, #0]
	sTime.Minutes = ts.tm_min;
 8000d60:	187b      	adds	r3, r7, r1
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	b2da      	uxtb	r2, r3
 8000d66:	1d3b      	adds	r3, r7, #4
 8000d68:	705a      	strb	r2, [r3, #1]
	sTime.Seconds = ts.tm_sec;
 8000d6a:	187b      	adds	r3, r7, r1
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	b2da      	uxtb	r2, r3
 8000d70:	1d3b      	adds	r3, r7, #4
 8000d72:	709a      	strb	r2, [r3, #2]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d74:	1d3b      	adds	r3, r7, #4
 8000d76:	2200      	movs	r2, #0
 8000d78:	60da      	str	r2, [r3, #12]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d7a:	1d3b      	adds	r3, r7, #4
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	611a      	str	r2, [r3, #16]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000d80:	1d39      	adds	r1, r7, #4
 8000d82:	4b19      	ldr	r3, [pc, #100]	; (8000de8 <Set_Time_To_Timestamp+0xbc>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	0018      	movs	r0, r3
 8000d88:	f001 fe9c 	bl	8002ac4 <HAL_RTC_SetTime>
 8000d8c:	1e03      	subs	r3, r0, #0
 8000d8e:	d001      	beq.n	8000d94 <Set_Time_To_Timestamp+0x68>
	{
		Error_Handler();
 8000d90:	f7ff ff60 	bl	8000c54 <Error_Handler>
	}
	sDate.WeekDay = (ts.tm_wday + 1);
 8000d94:	2128      	movs	r1, #40	; 0x28
 8000d96:	187b      	adds	r3, r7, r1
 8000d98:	699b      	ldr	r3, [r3, #24]
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	b2da      	uxtb	r2, r3
 8000da0:	003b      	movs	r3, r7
 8000da2:	701a      	strb	r2, [r3, #0]
	sDate.Month = (ts.tm_mon + 1);
 8000da4:	187b      	adds	r3, r7, r1
 8000da6:	691b      	ldr	r3, [r3, #16]
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	3301      	adds	r3, #1
 8000dac:	b2da      	uxtb	r2, r3
 8000dae:	003b      	movs	r3, r7
 8000db0:	705a      	strb	r2, [r3, #1]
	sDate.Date = ts.tm_mday;
 8000db2:	187b      	adds	r3, r7, r1
 8000db4:	68db      	ldr	r3, [r3, #12]
 8000db6:	b2da      	uxtb	r2, r3
 8000db8:	003b      	movs	r3, r7
 8000dba:	709a      	strb	r2, [r3, #2]
	sDate.Year = ts.tm_year;  // TODO --> à revoir :: doit prendre de 0 à 99, hors tm_year return 122
 8000dbc:	187b      	adds	r3, r7, r1
 8000dbe:	695b      	ldr	r3, [r3, #20]
 8000dc0:	b2da      	uxtb	r2, r3
 8000dc2:	003b      	movs	r3, r7
 8000dc4:	70da      	strb	r2, [r3, #3]
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000dc6:	0039      	movs	r1, r7
 8000dc8:	4b07      	ldr	r3, [pc, #28]	; (8000de8 <Set_Time_To_Timestamp+0xbc>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	0018      	movs	r0, r3
 8000dce:	f001 ff99 	bl	8002d04 <HAL_RTC_SetDate>
 8000dd2:	1e03      	subs	r3, r0, #0
 8000dd4:	d001      	beq.n	8000dda <Set_Time_To_Timestamp+0xae>
	{
		Error_Handler();
 8000dd6:	f7ff ff3d 	bl	8000c54 <Error_Handler>
	}

}
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	b006      	add	sp, #24
 8000de0:	bcb0      	pop	{r4, r5, r7}
 8000de2:	bc08      	pop	{r3}
 8000de4:	b004      	add	sp, #16
 8000de6:	4718      	bx	r3
 8000de8:	200000fc 	.word	0x200000fc

08000dec <Convert_Timestamp_To_Time>:


void Convert_Timestamp_To_Time(time_t rawtime)
{
 8000dec:	b5b0      	push	{r4, r5, r7, lr}
 8000dee:	b092      	sub	sp, #72	; 0x48
 8000df0:	af06      	add	r7, sp, #24
 8000df2:	6038      	str	r0, [r7, #0]
 8000df4:	6079      	str	r1, [r7, #4]

  struct tm  ts;

  /* Format time, "ddd yyyy-mm-dd hh:mm:ss zzz" */
  ts = *localtime(&rawtime);
 8000df6:	003b      	movs	r3, r7
 8000df8:	0018      	movs	r0, r3
 8000dfa:	f003 fcc3 	bl	8004784 <localtime>
 8000dfe:	0002      	movs	r2, r0
 8000e00:	210c      	movs	r1, #12
 8000e02:	187b      	adds	r3, r7, r1
 8000e04:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000e06:	c331      	stmia	r3!, {r0, r4, r5}
 8000e08:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000e0a:	c331      	stmia	r3!, {r0, r4, r5}
 8000e0c:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000e0e:	c331      	stmia	r3!, {r0, r4, r5}
  Set_Time_To_Timestamp(ts);
 8000e10:	187b      	adds	r3, r7, r1
 8000e12:	466a      	mov	r2, sp
 8000e14:	0011      	movs	r1, r2
 8000e16:	001a      	movs	r2, r3
 8000e18:	3210      	adds	r2, #16
 8000e1a:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000e1c:	c131      	stmia	r1!, {r0, r4, r5}
 8000e1e:	ca11      	ldmia	r2!, {r0, r4}
 8000e20:	c111      	stmia	r1!, {r0, r4}
 8000e22:	6818      	ldr	r0, [r3, #0]
 8000e24:	6859      	ldr	r1, [r3, #4]
 8000e26:	689a      	ldr	r2, [r3, #8]
 8000e28:	68db      	ldr	r3, [r3, #12]
 8000e2a:	f7ff ff7f 	bl	8000d2c <Set_Time_To_Timestamp>

}
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	46bd      	mov	sp, r7
 8000e32:	b00c      	add	sp, #48	; 0x30
 8000e34:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000e38 <Usb_Serial_Command_Get_Info>:




void Usb_Serial_Command_Get_Info()
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0

	RTC_Get_Time();
 8000e3e:	f7ff ff0f 	bl	8000c60 <RTC_Get_Time>
	strcat(dateGet, " / ");
 8000e42:	4b17      	ldr	r3, [pc, #92]	; (8000ea0 <Usb_Serial_Command_Get_Info+0x68>)
 8000e44:	0018      	movs	r0, r3
 8000e46:	f7ff f969 	bl	800011c <strlen>
 8000e4a:	0003      	movs	r3, r0
 8000e4c:	001a      	movs	r2, r3
 8000e4e:	4b14      	ldr	r3, [pc, #80]	; (8000ea0 <Usb_Serial_Command_Get_Info+0x68>)
 8000e50:	18d2      	adds	r2, r2, r3
 8000e52:	4b14      	ldr	r3, [pc, #80]	; (8000ea4 <Usb_Serial_Command_Get_Info+0x6c>)
 8000e54:	0010      	movs	r0, r2
 8000e56:	0019      	movs	r1, r3
 8000e58:	2304      	movs	r3, #4
 8000e5a:	001a      	movs	r2, r3
 8000e5c:	f003 fdc6 	bl	80049ec <memcpy>
	char *response = strcat(dateGet, timeGet);
 8000e60:	4a11      	ldr	r2, [pc, #68]	; (8000ea8 <Usb_Serial_Command_Get_Info+0x70>)
 8000e62:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <Usb_Serial_Command_Get_Info+0x68>)
 8000e64:	0011      	movs	r1, r2
 8000e66:	0018      	movs	r0, r3
 8000e68:	f004 f97e 	bl	8005168 <strcat>
 8000e6c:	0003      	movs	r3, r0
 8000e6e:	607b      	str	r3, [r7, #4]
	strcat(response, "\n\n");
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	0018      	movs	r0, r3
 8000e74:	f7ff f952 	bl	800011c <strlen>
 8000e78:	0003      	movs	r3, r0
 8000e7a:	001a      	movs	r2, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	189a      	adds	r2, r3, r2
 8000e80:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <Usb_Serial_Command_Get_Info+0x74>)
 8000e82:	0010      	movs	r0, r2
 8000e84:	0019      	movs	r1, r3
 8000e86:	2303      	movs	r3, #3
 8000e88:	001a      	movs	r2, r3
 8000e8a:	f003 fdaf 	bl	80049ec <memcpy>
	Usb_Serial_Send_Data(response);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	0018      	movs	r0, r3
 8000e92:	f000 fad1 	bl	8001438 <Usb_Serial_Send_Data>

}
 8000e96:	46c0      	nop			; (mov r8, r8)
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	b002      	add	sp, #8
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	46c0      	nop			; (mov r8, r8)
 8000ea0:	200001b4 	.word	0x200001b4
 8000ea4:	08007600 	.word	0x08007600
 8000ea8:	200001c4 	.word	0x200001c4
 8000eac:	08007604 	.word	0x08007604

08000eb0 <Usb_Serial_Command_Set_Time>:


void Usb_Serial_Command_Set_Time(char *charTimestamp)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	char *response;
	time_t timestamp = atoi(charTimestamp);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	0018      	movs	r0, r3
 8000ebc:	f003 fc32 	bl	8004724 <atoi>
 8000ec0:	0003      	movs	r3, r0
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	17db      	asrs	r3, r3, #31
 8000ec6:	617b      	str	r3, [r7, #20]

	lastRTC = timestamp;
 8000ec8:	490a      	ldr	r1, [pc, #40]	; (8000ef4 <Usb_Serial_Command_Set_Time+0x44>)
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	600a      	str	r2, [r1, #0]
 8000ed0:	604b      	str	r3, [r1, #4]
	Convert_Timestamp_To_Time(timestamp);
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	0010      	movs	r0, r2
 8000ed8:	0019      	movs	r1, r3
 8000eda:	f7ff ff87 	bl	8000dec <Convert_Timestamp_To_Time>
	response = "Time Set !\n";
 8000ede:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <Usb_Serial_Command_Set_Time+0x48>)
 8000ee0:	60fb      	str	r3, [r7, #12]
	Usb_Serial_Send_Data(response);
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	f000 faa7 	bl	8001438 <Usb_Serial_Send_Data>

}
 8000eea:	46c0      	nop			; (mov r8, r8)
 8000eec:	46bd      	mov	sp, r7
 8000eee:	b006      	add	sp, #24
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	20000000 	.word	0x20000000
 8000ef8:	08007608 	.word	0x08007608

08000efc <Usb_Serial_Command_Test_Data>:


void Usb_Serial_Command_Test_Data(char *size)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
	int testDataSize = 0;
 8000f04:	2300      	movs	r3, #0
 8000f06:	613b      	str	r3, [r7, #16]
	char *response = "";
 8000f08:	4b1e      	ldr	r3, [pc, #120]	; (8000f84 <Usb_Serial_Command_Test_Data+0x88>)
 8000f0a:	60fb      	str	r3, [r7, #12]
	char chaine[] = "s";
 8000f0c:	2308      	movs	r3, #8
 8000f0e:	18fb      	adds	r3, r7, r3
 8000f10:	2273      	movs	r2, #115	; 0x73
 8000f12:	801a      	strh	r2, [r3, #0]

	testDataSize = (atoi(size) +2);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	0018      	movs	r0, r3
 8000f18:	f003 fc04 	bl	8004724 <atoi>
 8000f1c:	0003      	movs	r3, r0
 8000f1e:	3302      	adds	r3, #2
 8000f20:	613b      	str	r3, [r7, #16]

	if(testDataSize < USB_SERIAL_COMMAND_DATA_TEST_MAX_LEN)
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	2380      	movs	r3, #128	; 0x80
 8000f26:	00db      	lsls	r3, r3, #3
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	da20      	bge.n	8000f6e <Usb_Serial_Command_Test_Data+0x72>
	{

		for(int i = 0; i < (testDataSize - 2); i++)
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]
 8000f30:	e009      	b.n	8000f46 <Usb_Serial_Command_Test_Data+0x4a>
		{
			strcat(response, chaine);
 8000f32:	2308      	movs	r3, #8
 8000f34:	18fa      	adds	r2, r7, r3
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	0011      	movs	r1, r2
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	f004 f914 	bl	8005168 <strcat>
		for(int i = 0; i < (testDataSize - 2); i++)
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	3301      	adds	r3, #1
 8000f44:	617b      	str	r3, [r7, #20]
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	697a      	ldr	r2, [r7, #20]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	dbf0      	blt.n	8000f32 <Usb_Serial_Command_Test_Data+0x36>
		}

		strcat(response, "\n");
 8000f50:	2200      	movs	r2, #0
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	189a      	adds	r2, r3, r2
 8000f56:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <Usb_Serial_Command_Test_Data+0x8c>)
 8000f58:	0010      	movs	r0, r2
 8000f5a:	0019      	movs	r1, r3
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	001a      	movs	r2, r3
 8000f60:	f003 fd44 	bl	80049ec <memcpy>
		Usb_Serial_Send_Data(response);
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	0018      	movs	r0, r3
 8000f68:	f000 fa66 	bl	8001438 <Usb_Serial_Send_Data>
	else
	{
		response = "Error, size of data test is too big !\n";
		Usb_Serial_Send_Data(response);
	}
}
 8000f6c:	e005      	b.n	8000f7a <Usb_Serial_Command_Test_Data+0x7e>
		response = "Error, size of data test is too big !\n";
 8000f6e:	4b07      	ldr	r3, [pc, #28]	; (8000f8c <Usb_Serial_Command_Test_Data+0x90>)
 8000f70:	60fb      	str	r3, [r7, #12]
		Usb_Serial_Send_Data(response);
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	0018      	movs	r0, r3
 8000f76:	f000 fa5f 	bl	8001438 <Usb_Serial_Send_Data>
}
 8000f7a:	46c0      	nop			; (mov r8, r8)
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	b006      	add	sp, #24
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	46c0      	nop			; (mov r8, r8)
 8000f84:	08007614 	.word	0x08007614
 8000f88:	08007618 	.word	0x08007618
 8000f8c:	0800761c 	.word	0x0800761c

08000f90 <Usb_Serial_Command_Handler>:

void Usb_Serial_Command_Handler(char *serialCommand, char *serialCommandArg)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]

	if(strcmp(serialCommand, "info") == 0)
 8000f9a:	4a17      	ldr	r2, [pc, #92]	; (8000ff8 <Usb_Serial_Command_Handler+0x68>)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	0011      	movs	r1, r2
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	f7ff f8b1 	bl	8000108 <strcmp>
 8000fa6:	1e03      	subs	r3, r0, #0
 8000fa8:	d102      	bne.n	8000fb0 <Usb_Serial_Command_Handler+0x20>
	{
		Usb_Serial_Command_Get_Info();
 8000faa:	f7ff ff45 	bl	8000e38 <Usb_Serial_Command_Get_Info>
	else
	{
		char *response = "Error, invalid command or command len too big !\n";
		Usb_Serial_Send_Data(response);
	}
}
 8000fae:	e01f      	b.n	8000ff0 <Usb_Serial_Command_Handler+0x60>
	else if(strcmp(serialCommand, "time") == 0)
 8000fb0:	4a12      	ldr	r2, [pc, #72]	; (8000ffc <Usb_Serial_Command_Handler+0x6c>)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	0011      	movs	r1, r2
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	f7ff f8a6 	bl	8000108 <strcmp>
 8000fbc:	1e03      	subs	r3, r0, #0
 8000fbe:	d104      	bne.n	8000fca <Usb_Serial_Command_Handler+0x3a>
		Usb_Serial_Command_Set_Time(serialCommandArg);
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	0018      	movs	r0, r3
 8000fc4:	f7ff ff74 	bl	8000eb0 <Usb_Serial_Command_Set_Time>
}
 8000fc8:	e012      	b.n	8000ff0 <Usb_Serial_Command_Handler+0x60>
	else if(strcmp(serialCommand, "data") == 0)
 8000fca:	4a0d      	ldr	r2, [pc, #52]	; (8001000 <Usb_Serial_Command_Handler+0x70>)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	0011      	movs	r1, r2
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	f7ff f899 	bl	8000108 <strcmp>
 8000fd6:	1e03      	subs	r3, r0, #0
 8000fd8:	d104      	bne.n	8000fe4 <Usb_Serial_Command_Handler+0x54>
		Usb_Serial_Command_Test_Data(serialCommandArg);
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	0018      	movs	r0, r3
 8000fde:	f7ff ff8d 	bl	8000efc <Usb_Serial_Command_Test_Data>
}
 8000fe2:	e005      	b.n	8000ff0 <Usb_Serial_Command_Handler+0x60>
		char *response = "Error, invalid command or command len too big !\n";
 8000fe4:	4b07      	ldr	r3, [pc, #28]	; (8001004 <Usb_Serial_Command_Handler+0x74>)
 8000fe6:	60fb      	str	r3, [r7, #12]
		Usb_Serial_Send_Data(response);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	0018      	movs	r0, r3
 8000fec:	f000 fa24 	bl	8001438 <Usb_Serial_Send_Data>
}
 8000ff0:	46c0      	nop			; (mov r8, r8)
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	b004      	add	sp, #16
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	08007644 	.word	0x08007644
 8000ffc:	0800764c 	.word	0x0800764c
 8001000:	08007654 	.word	0x08007654
 8001004:	0800765c 	.word	0x0800765c

08001008 <Usb_Serial_Command_Splitter>:


void Usb_Serial_Command_Splitter(char serialInput[64])
{
 8001008:	b590      	push	{r4, r7, lr}
 800100a:	b087      	sub	sp, #28
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]

	const char split[2] = " ";
 8001010:	210c      	movs	r1, #12
 8001012:	187b      	adds	r3, r7, r1
 8001014:	2220      	movs	r2, #32
 8001016:	801a      	strh	r2, [r3, #0]
	char *cmd = NULL;
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]
	char *arg = NULL;
 800101c:	2300      	movs	r3, #0
 800101e:	613b      	str	r3, [r7, #16]

	cmd = strtok(serialInput, split);
 8001020:	000c      	movs	r4, r1
 8001022:	187a      	adds	r2, r7, r1
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	0011      	movs	r1, r2
 8001028:	0018      	movs	r0, r3
 800102a:	f004 f8ab 	bl	8005184 <strtok>
 800102e:	0003      	movs	r3, r0
 8001030:	617b      	str	r3, [r7, #20]
	arg = strtok(NULL, split);
 8001032:	193b      	adds	r3, r7, r4
 8001034:	0019      	movs	r1, r3
 8001036:	2000      	movs	r0, #0
 8001038:	f004 f8a4 	bl	8005184 <strtok>
 800103c:	0003      	movs	r3, r0
 800103e:	613b      	str	r3, [r7, #16]
	Usb_Serial_Command_Handler(cmd, arg);
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	0011      	movs	r1, r2
 8001046:	0018      	movs	r0, r3
 8001048:	f7ff ffa2 	bl	8000f90 <Usb_Serial_Command_Handler>

}
 800104c:	46c0      	nop			; (mov r8, r8)
 800104e:	46bd      	mov	sp, r7
 8001050:	b007      	add	sp, #28
 8001052:	bd90      	pop	{r4, r7, pc}

08001054 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001058:	4b07      	ldr	r3, [pc, #28]	; (8001078 <HAL_MspInit+0x24>)
 800105a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800105c:	4b06      	ldr	r3, [pc, #24]	; (8001078 <HAL_MspInit+0x24>)
 800105e:	2101      	movs	r1, #1
 8001060:	430a      	orrs	r2, r1
 8001062:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001064:	4b04      	ldr	r3, [pc, #16]	; (8001078 <HAL_MspInit+0x24>)
 8001066:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001068:	4b03      	ldr	r3, [pc, #12]	; (8001078 <HAL_MspInit+0x24>)
 800106a:	2180      	movs	r1, #128	; 0x80
 800106c:	0549      	lsls	r1, r1, #21
 800106e:	430a      	orrs	r2, r1
 8001070:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001072:	46c0      	nop			; (mov r8, r8)
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40021000 	.word	0x40021000

0800107c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a06      	ldr	r2, [pc, #24]	; (80010a4 <HAL_RTC_MspInit+0x28>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d106      	bne.n	800109c <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800108e:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <HAL_RTC_MspInit+0x2c>)
 8001090:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001092:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <HAL_RTC_MspInit+0x2c>)
 8001094:	2180      	movs	r1, #128	; 0x80
 8001096:	02c9      	lsls	r1, r1, #11
 8001098:	430a      	orrs	r2, r1
 800109a:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800109c:	46c0      	nop			; (mov r8, r8)
 800109e:	46bd      	mov	sp, r7
 80010a0:	b002      	add	sp, #8
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40002800 	.word	0x40002800
 80010a8:	40021000 	.word	0x40021000

080010ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010ac:	b590      	push	{r4, r7, lr}
 80010ae:	b089      	sub	sp, #36	; 0x24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b4:	240c      	movs	r4, #12
 80010b6:	193b      	adds	r3, r7, r4
 80010b8:	0018      	movs	r0, r3
 80010ba:	2314      	movs	r3, #20
 80010bc:	001a      	movs	r2, r3
 80010be:	2100      	movs	r1, #0
 80010c0:	f003 fc9d 	bl	80049fe <memset>
  if(huart->Instance==USART1)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a1c      	ldr	r2, [pc, #112]	; (800113c <HAL_UART_MspInit+0x90>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d132      	bne.n	8001134 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010ce:	4b1c      	ldr	r3, [pc, #112]	; (8001140 <HAL_UART_MspInit+0x94>)
 80010d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010d2:	4b1b      	ldr	r3, [pc, #108]	; (8001140 <HAL_UART_MspInit+0x94>)
 80010d4:	2180      	movs	r1, #128	; 0x80
 80010d6:	01c9      	lsls	r1, r1, #7
 80010d8:	430a      	orrs	r2, r1
 80010da:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010dc:	4b18      	ldr	r3, [pc, #96]	; (8001140 <HAL_UART_MspInit+0x94>)
 80010de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010e0:	4b17      	ldr	r3, [pc, #92]	; (8001140 <HAL_UART_MspInit+0x94>)
 80010e2:	2101      	movs	r1, #1
 80010e4:	430a      	orrs	r2, r1
 80010e6:	62da      	str	r2, [r3, #44]	; 0x2c
 80010e8:	4b15      	ldr	r3, [pc, #84]	; (8001140 <HAL_UART_MspInit+0x94>)
 80010ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ec:	2201      	movs	r2, #1
 80010ee:	4013      	ands	r3, r2
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	68bb      	ldr	r3, [r7, #8]
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80010f4:	193b      	adds	r3, r7, r4
 80010f6:	22f0      	movs	r2, #240	; 0xf0
 80010f8:	0152      	lsls	r2, r2, #5
 80010fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fc:	0021      	movs	r1, r4
 80010fe:	187b      	adds	r3, r7, r1
 8001100:	2202      	movs	r2, #2
 8001102:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	187b      	adds	r3, r7, r1
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110a:	187b      	adds	r3, r7, r1
 800110c:	2203      	movs	r2, #3
 800110e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001110:	187b      	adds	r3, r7, r1
 8001112:	2204      	movs	r2, #4
 8001114:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001116:	187a      	adds	r2, r7, r1
 8001118:	23a0      	movs	r3, #160	; 0xa0
 800111a:	05db      	lsls	r3, r3, #23
 800111c:	0011      	movs	r1, r2
 800111e:	0018      	movs	r0, r3
 8001120:	f000 fbb0 	bl	8001884 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001124:	2200      	movs	r2, #0
 8001126:	2100      	movs	r1, #0
 8001128:	201b      	movs	r0, #27
 800112a:	f000 faf1 	bl	8001710 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800112e:	201b      	movs	r0, #27
 8001130:	f000 fb03 	bl	800173a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001134:	46c0      	nop			; (mov r8, r8)
 8001136:	46bd      	mov	sp, r7
 8001138:	b009      	add	sp, #36	; 0x24
 800113a:	bd90      	pop	{r4, r7, pc}
 800113c:	40013800 	.word	0x40013800
 8001140:	40021000 	.word	0x40021000

08001144 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001148:	e7fe      	b.n	8001148 <NMI_Handler+0x4>

0800114a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800114e:	e7fe      	b.n	800114e <HardFault_Handler+0x4>

08001150 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001154:	46c0      	nop			; (mov r8, r8)
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800115e:	46c0      	nop			; (mov r8, r8)
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001168:	f000 fa0a 	bl	8001580 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800116c:	46c0      	nop			; (mov r8, r8)
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
	...

08001174 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001178:	4b03      	ldr	r3, [pc, #12]	; (8001188 <USART1_IRQHandler+0x14>)
 800117a:	0018      	movs	r0, r3
 800117c:	f002 f8b8 	bl	80032f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001180:	46c0      	nop			; (mov r8, r8)
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	46c0      	nop			; (mov r8, r8)
 8001188:	20000120 	.word	0x20000120

0800118c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
	return 1;
 8001190:	2301      	movs	r3, #1
}
 8001192:	0018      	movs	r0, r3
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <_kill>:

int _kill(int pid, int sig)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80011a2:	f003 fac5 	bl	8004730 <__errno>
 80011a6:	0003      	movs	r3, r0
 80011a8:	2216      	movs	r2, #22
 80011aa:	601a      	str	r2, [r3, #0]
	return -1;
 80011ac:	2301      	movs	r3, #1
 80011ae:	425b      	negs	r3, r3
}
 80011b0:	0018      	movs	r0, r3
 80011b2:	46bd      	mov	sp, r7
 80011b4:	b002      	add	sp, #8
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <_exit>:

void _exit (int status)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80011c0:	2301      	movs	r3, #1
 80011c2:	425a      	negs	r2, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	0011      	movs	r1, r2
 80011c8:	0018      	movs	r0, r3
 80011ca:	f7ff ffe5 	bl	8001198 <_kill>
	while (1) {}		/* Make sure we hang here */
 80011ce:	e7fe      	b.n	80011ce <_exit+0x16>

080011d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]
 80011e0:	e00a      	b.n	80011f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80011e2:	e000      	b.n	80011e6 <_read+0x16>
 80011e4:	bf00      	nop
 80011e6:	0001      	movs	r1, r0
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	1c5a      	adds	r2, r3, #1
 80011ec:	60ba      	str	r2, [r7, #8]
 80011ee:	b2ca      	uxtb	r2, r1
 80011f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	3301      	adds	r3, #1
 80011f6:	617b      	str	r3, [r7, #20]
 80011f8:	697a      	ldr	r2, [r7, #20]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	dbf0      	blt.n	80011e2 <_read+0x12>
	}

return len;
 8001200:	687b      	ldr	r3, [r7, #4]
}
 8001202:	0018      	movs	r0, r3
 8001204:	46bd      	mov	sp, r7
 8001206:	b006      	add	sp, #24
 8001208:	bd80      	pop	{r7, pc}

0800120a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b086      	sub	sp, #24
 800120e:	af00      	add	r7, sp, #0
 8001210:	60f8      	str	r0, [r7, #12]
 8001212:	60b9      	str	r1, [r7, #8]
 8001214:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001216:	2300      	movs	r3, #0
 8001218:	617b      	str	r3, [r7, #20]
 800121a:	e009      	b.n	8001230 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	1c5a      	adds	r2, r3, #1
 8001220:	60ba      	str	r2, [r7, #8]
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	0018      	movs	r0, r3
 8001226:	e000      	b.n	800122a <_write+0x20>
 8001228:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	3301      	adds	r3, #1
 800122e:	617b      	str	r3, [r7, #20]
 8001230:	697a      	ldr	r2, [r7, #20]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	429a      	cmp	r2, r3
 8001236:	dbf1      	blt.n	800121c <_write+0x12>
	}
	return len;
 8001238:	687b      	ldr	r3, [r7, #4]
}
 800123a:	0018      	movs	r0, r3
 800123c:	46bd      	mov	sp, r7
 800123e:	b006      	add	sp, #24
 8001240:	bd80      	pop	{r7, pc}

08001242 <_close>:

int _close(int file)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b082      	sub	sp, #8
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
	return -1;
 800124a:	2301      	movs	r3, #1
 800124c:	425b      	negs	r3, r3
}
 800124e:	0018      	movs	r0, r3
 8001250:	46bd      	mov	sp, r7
 8001252:	b002      	add	sp, #8
 8001254:	bd80      	pop	{r7, pc}

08001256 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
 800125e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	2280      	movs	r2, #128	; 0x80
 8001264:	0192      	lsls	r2, r2, #6
 8001266:	605a      	str	r2, [r3, #4]
	return 0;
 8001268:	2300      	movs	r3, #0
}
 800126a:	0018      	movs	r0, r3
 800126c:	46bd      	mov	sp, r7
 800126e:	b002      	add	sp, #8
 8001270:	bd80      	pop	{r7, pc}

08001272 <_isatty>:

int _isatty(int file)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b082      	sub	sp, #8
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
	return 1;
 800127a:	2301      	movs	r3, #1
}
 800127c:	0018      	movs	r0, r3
 800127e:	46bd      	mov	sp, r7
 8001280:	b002      	add	sp, #8
 8001282:	bd80      	pop	{r7, pc}

08001284 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
	return 0;
 8001290:	2300      	movs	r3, #0
}
 8001292:	0018      	movs	r0, r3
 8001294:	46bd      	mov	sp, r7
 8001296:	b004      	add	sp, #16
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012a4:	4a14      	ldr	r2, [pc, #80]	; (80012f8 <_sbrk+0x5c>)
 80012a6:	4b15      	ldr	r3, [pc, #84]	; (80012fc <_sbrk+0x60>)
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012b0:	4b13      	ldr	r3, [pc, #76]	; (8001300 <_sbrk+0x64>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d102      	bne.n	80012be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012b8:	4b11      	ldr	r3, [pc, #68]	; (8001300 <_sbrk+0x64>)
 80012ba:	4a12      	ldr	r2, [pc, #72]	; (8001304 <_sbrk+0x68>)
 80012bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012be:	4b10      	ldr	r3, [pc, #64]	; (8001300 <_sbrk+0x64>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	18d3      	adds	r3, r2, r3
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d207      	bcs.n	80012dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012cc:	f003 fa30 	bl	8004730 <__errno>
 80012d0:	0003      	movs	r3, r0
 80012d2:	220c      	movs	r2, #12
 80012d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012d6:	2301      	movs	r3, #1
 80012d8:	425b      	negs	r3, r3
 80012da:	e009      	b.n	80012f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012dc:	4b08      	ldr	r3, [pc, #32]	; (8001300 <_sbrk+0x64>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012e2:	4b07      	ldr	r3, [pc, #28]	; (8001300 <_sbrk+0x64>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	18d2      	adds	r2, r2, r3
 80012ea:	4b05      	ldr	r3, [pc, #20]	; (8001300 <_sbrk+0x64>)
 80012ec:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80012ee:	68fb      	ldr	r3, [r7, #12]
}
 80012f0:	0018      	movs	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	b006      	add	sp, #24
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20005000 	.word	0x20005000
 80012fc:	00000400 	.word	0x00000400
 8001300:	200001d8 	.word	0x200001d8
 8001304:	20000260 	.word	0x20000260

08001308 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800130c:	46c0      	nop			; (mov r8, r8)
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
	...

08001314 <Usb_Serial_Command_Buffer_Reset>:




void Usb_Serial_Command_Buffer_Reset(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
	for(int i = 0; i<USB_SERIAL_COMMAND_MAX_LEN; i++)
 800131a:	2300      	movs	r3, #0
 800131c:	607b      	str	r3, [r7, #4]
 800131e:	e007      	b.n	8001330 <Usb_Serial_Command_Buffer_Reset+0x1c>
	{
		usbSerialCommandBuffer[i] = '\0';
 8001320:	4a07      	ldr	r2, [pc, #28]	; (8001340 <Usb_Serial_Command_Buffer_Reset+0x2c>)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	18d3      	adds	r3, r2, r3
 8001326:	2200      	movs	r2, #0
 8001328:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<USB_SERIAL_COMMAND_MAX_LEN; i++)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	3301      	adds	r3, #1
 800132e:	607b      	str	r3, [r7, #4]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2b3f      	cmp	r3, #63	; 0x3f
 8001334:	ddf4      	ble.n	8001320 <Usb_Serial_Command_Buffer_Reset+0xc>
	}
}
 8001336:	46c0      	nop			; (mov r8, r8)
 8001338:	46c0      	nop			; (mov r8, r8)
 800133a:	46bd      	mov	sp, r7
 800133c:	b002      	add	sp, #8
 800133e:	bd80      	pop	{r7, pc}
 8001340:	200001e4 	.word	0x200001e4

08001344 <Usb_Serial_Read>:


void Usb_Serial_Read(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
	/* TODO  */
	/* usbSerialRead, return a specific error when command send is too big ! */

	if(usbSerialUartRx_byte[0] != '\0')
 8001348:	4b16      	ldr	r3, [pc, #88]	; (80013a4 <Usb_Serial_Read+0x60>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d026      	beq.n	800139e <Usb_Serial_Read+0x5a>
	{
		if(usbSerialUartRx_byte[0] != '\n')
 8001350:	4b14      	ldr	r3, [pc, #80]	; (80013a4 <Usb_Serial_Read+0x60>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	2b0a      	cmp	r3, #10
 8001356:	d012      	beq.n	800137e <Usb_Serial_Read+0x3a>
		{
			if(usbSerialCommandLen < USB_SERIAL_COMMAND_MAX_LEN)
 8001358:	4b13      	ldr	r3, [pc, #76]	; (80013a8 <Usb_Serial_Read+0x64>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2b3f      	cmp	r3, #63	; 0x3f
 800135e:	dc0b      	bgt.n	8001378 <Usb_Serial_Read+0x34>
			{
				usbSerialCommandBuffer[usbSerialCommandLen] = usbSerialUartRx_byte[0];
 8001360:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <Usb_Serial_Read+0x64>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a0f      	ldr	r2, [pc, #60]	; (80013a4 <Usb_Serial_Read+0x60>)
 8001366:	7811      	ldrb	r1, [r2, #0]
 8001368:	4a10      	ldr	r2, [pc, #64]	; (80013ac <Usb_Serial_Read+0x68>)
 800136a:	54d1      	strb	r1, [r2, r3]
				usbSerialCommandLen++;
 800136c:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <Usb_Serial_Read+0x64>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	1c5a      	adds	r2, r3, #1
 8001372:	4b0d      	ldr	r3, [pc, #52]	; (80013a8 <Usb_Serial_Read+0x64>)
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	e00f      	b.n	8001398 <Usb_Serial_Read+0x54>
			}else
			{
				Usb_Serial_Command_Buffer_Reset();
 8001378:	f7ff ffcc 	bl	8001314 <Usb_Serial_Command_Buffer_Reset>
 800137c:	e00c      	b.n	8001398 <Usb_Serial_Read+0x54>
			}
		}else if (usbSerialUartRx_byte[0] == '\n')
 800137e:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <Usb_Serial_Read+0x60>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	2b0a      	cmp	r3, #10
 8001384:	d108      	bne.n	8001398 <Usb_Serial_Read+0x54>
		{
			Usb_Serial_Command_Splitter(usbSerialCommandBuffer);
 8001386:	4b09      	ldr	r3, [pc, #36]	; (80013ac <Usb_Serial_Read+0x68>)
 8001388:	0018      	movs	r0, r3
 800138a:	f7ff fe3d 	bl	8001008 <Usb_Serial_Command_Splitter>
			usbSerialCommandLen = 0;
 800138e:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <Usb_Serial_Read+0x64>)
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
			Usb_Serial_Command_Buffer_Reset();
 8001394:	f7ff ffbe 	bl	8001314 <Usb_Serial_Command_Buffer_Reset>
		}
		usbSerialUartRx_byte[0] = '\0';
 8001398:	4b02      	ldr	r3, [pc, #8]	; (80013a4 <Usb_Serial_Read+0x60>)
 800139a:	2200      	movs	r2, #0
 800139c:	701a      	strb	r2, [r3, #0]
	}
}
 800139e:	46c0      	nop			; (mov r8, r8)
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	200001e0 	.word	0x200001e0
 80013a8:	200001dc 	.word	0x200001dc
 80013ac:	200001e4 	.word	0x200001e4

080013b0 <Usb_Serial_Uart_Receive>:


void Usb_Serial_Uart_Receive(void)
{
 80013b0:	b590      	push	{r4, r7, lr}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
	HAL_LockTypeDef *lock = &huart1.Lock;
 80013b6:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <Usb_Serial_Uart_Receive+0x44>)
 80013b8:	607b      	str	r3, [r7, #4]
	huart1.Lock = HAL_UNLOCKED;
 80013ba:	4b0f      	ldr	r3, [pc, #60]	; (80013f8 <Usb_Serial_Uart_Receive+0x48>)
 80013bc:	2274      	movs	r2, #116	; 0x74
 80013be:	2100      	movs	r1, #0
 80013c0:	5499      	strb	r1, [r3, r2]

	HAL_StatusTypeDef statusReceive = HAL_UART_Receive_IT(&huart1, usbSerialUartRx_byte, 1);
 80013c2:	1cfc      	adds	r4, r7, #3
 80013c4:	490d      	ldr	r1, [pc, #52]	; (80013fc <Usb_Serial_Uart_Receive+0x4c>)
 80013c6:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <Usb_Serial_Uart_Receive+0x48>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	0018      	movs	r0, r3
 80013cc:	f001 ff28 	bl	8003220 <HAL_UART_Receive_IT>
 80013d0:	0003      	movs	r3, r0
 80013d2:	7023      	strb	r3, [r4, #0]
	if(statusReceive != HAL_OK)
 80013d4:	1cfb      	adds	r3, r7, #3
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <Usb_Serial_Uart_Receive+0x30>
	{
		Error_Handler();
 80013dc:	f7ff fc3a 	bl	8000c54 <Error_Handler>
	}
	huart1.Lock = *lock;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	7819      	ldrb	r1, [r3, #0]
 80013e4:	4b04      	ldr	r3, [pc, #16]	; (80013f8 <Usb_Serial_Uart_Receive+0x48>)
 80013e6:	2274      	movs	r2, #116	; 0x74
 80013e8:	5499      	strb	r1, [r3, r2]
}
 80013ea:	46c0      	nop			; (mov r8, r8)
 80013ec:	46bd      	mov	sp, r7
 80013ee:	b003      	add	sp, #12
 80013f0:	bd90      	pop	{r4, r7, pc}
 80013f2:	46c0      	nop			; (mov r8, r8)
 80013f4:	20000194 	.word	0x20000194
 80013f8:	20000120 	.word	0x20000120
 80013fc:	200001e0 	.word	0x200001e0

08001400 <Serial_Receive_Init>:


void Serial_Receive_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
	Usb_Serial_Uart_Receive();
 8001404:	f7ff ffd4 	bl	80013b0 <Usb_Serial_Uart_Receive>
}
 8001408:	46c0      	nop			; (mov r8, r8)
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
	...

08001410 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART1)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a05      	ldr	r2, [pc, #20]	; (8001434 <HAL_UART_RxCpltCallback+0x24>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d103      	bne.n	800142a <HAL_UART_RxCpltCallback+0x1a>
	{
		Usb_Serial_Read();
 8001422:	f7ff ff8f 	bl	8001344 <Usb_Serial_Read>
		Usb_Serial_Uart_Receive();
 8001426:	f7ff ffc3 	bl	80013b0 <Usb_Serial_Uart_Receive>
	}

}
 800142a:	46c0      	nop			; (mov r8, r8)
 800142c:	46bd      	mov	sp, r7
 800142e:	b002      	add	sp, #8
 8001430:	bd80      	pop	{r7, pc}
 8001432:	46c0      	nop			; (mov r8, r8)
 8001434:	40013800 	.word	0x40013800

08001438 <Usb_Serial_Send_Data>:


void Usb_Serial_Send_Data(char* usbSerialTx_buffer)
{
 8001438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
	uint16_t usbSerialTx_size;
	usbSerialTx_size = strlen(usbSerialTx_buffer);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	0018      	movs	r0, r3
 8001444:	f7fe fe6a 	bl	800011c <strlen>
 8001448:	0002      	movs	r2, r0
 800144a:	210e      	movs	r1, #14
 800144c:	187b      	adds	r3, r7, r1
 800144e:	801a      	strh	r2, [r3, #0]
	HAL_StatusTypeDef statusTransmit;
	statusTransmit = HAL_UART_Transmit(&huart1, (uint8_t *)usbSerialTx_buffer, usbSerialTx_size, HAL_MAX_DELAY);
 8001450:	260d      	movs	r6, #13
 8001452:	19bc      	adds	r4, r7, r6
 8001454:	2301      	movs	r3, #1
 8001456:	425d      	negs	r5, r3
 8001458:	187b      	adds	r3, r7, r1
 800145a:	881a      	ldrh	r2, [r3, #0]
 800145c:	6879      	ldr	r1, [r7, #4]
 800145e:	4808      	ldr	r0, [pc, #32]	; (8001480 <Usb_Serial_Send_Data+0x48>)
 8001460:	002b      	movs	r3, r5
 8001462:	f001 fe35 	bl	80030d0 <HAL_UART_Transmit>
 8001466:	0003      	movs	r3, r0
 8001468:	7023      	strb	r3, [r4, #0]
	if(statusTransmit != HAL_OK)
 800146a:	19bb      	adds	r3, r7, r6
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <Usb_Serial_Send_Data+0x3e>
	{
		Error_Handler();
 8001472:	f7ff fbef 	bl	8000c54 <Error_Handler>
	}
}
 8001476:	46c0      	nop			; (mov r8, r8)
 8001478:	46bd      	mov	sp, r7
 800147a:	b005      	add	sp, #20
 800147c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800147e:	46c0      	nop			; (mov r8, r8)
 8001480:	20000120 	.word	0x20000120

08001484 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001484:	480d      	ldr	r0, [pc, #52]	; (80014bc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001486:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001488:	480d      	ldr	r0, [pc, #52]	; (80014c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800148a:	490e      	ldr	r1, [pc, #56]	; (80014c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800148c:	4a0e      	ldr	r2, [pc, #56]	; (80014c8 <LoopForever+0xe>)
  movs r3, #0
 800148e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001490:	e002      	b.n	8001498 <LoopCopyDataInit>

08001492 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001492:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001494:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001496:	3304      	adds	r3, #4

08001498 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001498:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800149a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800149c:	d3f9      	bcc.n	8001492 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800149e:	4a0b      	ldr	r2, [pc, #44]	; (80014cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80014a0:	4c0b      	ldr	r4, [pc, #44]	; (80014d0 <LoopForever+0x16>)
  movs r3, #0
 80014a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014a4:	e001      	b.n	80014aa <LoopFillZerobss>

080014a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014a8:	3204      	adds	r2, #4

080014aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014ac:	d3fb      	bcc.n	80014a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80014ae:	f7ff ff2b 	bl	8001308 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014b2:	f003 f943 	bl	800473c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014b6:	f7ff fa25 	bl	8000904 <main>

080014ba <LoopForever>:

LoopForever:
    b LoopForever
 80014ba:	e7fe      	b.n	80014ba <LoopForever>
   ldr   r0, =_estack
 80014bc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80014c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014c4:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 80014c8:	08007ad8 	.word	0x08007ad8
  ldr r2, =_sbss
 80014cc:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 80014d0:	20000260 	.word	0x20000260

080014d4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014d4:	e7fe      	b.n	80014d4 <ADC1_COMP_IRQHandler>
	...

080014d8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014de:	1dfb      	adds	r3, r7, #7
 80014e0:	2200      	movs	r2, #0
 80014e2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80014e4:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <HAL_Init+0x3c>)
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <HAL_Init+0x3c>)
 80014ea:	2140      	movs	r1, #64	; 0x40
 80014ec:	430a      	orrs	r2, r1
 80014ee:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014f0:	2003      	movs	r0, #3
 80014f2:	f000 f811 	bl	8001518 <HAL_InitTick>
 80014f6:	1e03      	subs	r3, r0, #0
 80014f8:	d003      	beq.n	8001502 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80014fa:	1dfb      	adds	r3, r7, #7
 80014fc:	2201      	movs	r2, #1
 80014fe:	701a      	strb	r2, [r3, #0]
 8001500:	e001      	b.n	8001506 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001502:	f7ff fda7 	bl	8001054 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001506:	1dfb      	adds	r3, r7, #7
 8001508:	781b      	ldrb	r3, [r3, #0]
}
 800150a:	0018      	movs	r0, r3
 800150c:	46bd      	mov	sp, r7
 800150e:	b002      	add	sp, #8
 8001510:	bd80      	pop	{r7, pc}
 8001512:	46c0      	nop			; (mov r8, r8)
 8001514:	40022000 	.word	0x40022000

08001518 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001518:	b590      	push	{r4, r7, lr}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001520:	4b14      	ldr	r3, [pc, #80]	; (8001574 <HAL_InitTick+0x5c>)
 8001522:	681c      	ldr	r4, [r3, #0]
 8001524:	4b14      	ldr	r3, [pc, #80]	; (8001578 <HAL_InitTick+0x60>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	0019      	movs	r1, r3
 800152a:	23fa      	movs	r3, #250	; 0xfa
 800152c:	0098      	lsls	r0, r3, #2
 800152e:	f7fe fe07 	bl	8000140 <__udivsi3>
 8001532:	0003      	movs	r3, r0
 8001534:	0019      	movs	r1, r3
 8001536:	0020      	movs	r0, r4
 8001538:	f7fe fe02 	bl	8000140 <__udivsi3>
 800153c:	0003      	movs	r3, r0
 800153e:	0018      	movs	r0, r3
 8001540:	f000 f90b 	bl	800175a <HAL_SYSTICK_Config>
 8001544:	1e03      	subs	r3, r0, #0
 8001546:	d001      	beq.n	800154c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e00f      	b.n	800156c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2b03      	cmp	r3, #3
 8001550:	d80b      	bhi.n	800156a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001552:	6879      	ldr	r1, [r7, #4]
 8001554:	2301      	movs	r3, #1
 8001556:	425b      	negs	r3, r3
 8001558:	2200      	movs	r2, #0
 800155a:	0018      	movs	r0, r3
 800155c:	f000 f8d8 	bl	8001710 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001560:	4b06      	ldr	r3, [pc, #24]	; (800157c <HAL_InitTick+0x64>)
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001566:	2300      	movs	r3, #0
 8001568:	e000      	b.n	800156c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
}
 800156c:	0018      	movs	r0, r3
 800156e:	46bd      	mov	sp, r7
 8001570:	b003      	add	sp, #12
 8001572:	bd90      	pop	{r4, r7, pc}
 8001574:	2000000c 	.word	0x2000000c
 8001578:	20000014 	.word	0x20000014
 800157c:	20000010 	.word	0x20000010

08001580 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001584:	4b05      	ldr	r3, [pc, #20]	; (800159c <HAL_IncTick+0x1c>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	001a      	movs	r2, r3
 800158a:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <HAL_IncTick+0x20>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	18d2      	adds	r2, r2, r3
 8001590:	4b03      	ldr	r3, [pc, #12]	; (80015a0 <HAL_IncTick+0x20>)
 8001592:	601a      	str	r2, [r3, #0]
}
 8001594:	46c0      	nop			; (mov r8, r8)
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	46c0      	nop			; (mov r8, r8)
 800159c:	20000014 	.word	0x20000014
 80015a0:	20000224 	.word	0x20000224

080015a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  return uwTick;
 80015a8:	4b02      	ldr	r3, [pc, #8]	; (80015b4 <HAL_GetTick+0x10>)
 80015aa:	681b      	ldr	r3, [r3, #0]
}
 80015ac:	0018      	movs	r0, r3
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	46c0      	nop			; (mov r8, r8)
 80015b4:	20000224 	.word	0x20000224

080015b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	0002      	movs	r2, r0
 80015c0:	1dfb      	adds	r3, r7, #7
 80015c2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80015c4:	1dfb      	adds	r3, r7, #7
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b7f      	cmp	r3, #127	; 0x7f
 80015ca:	d809      	bhi.n	80015e0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015cc:	1dfb      	adds	r3, r7, #7
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	001a      	movs	r2, r3
 80015d2:	231f      	movs	r3, #31
 80015d4:	401a      	ands	r2, r3
 80015d6:	4b04      	ldr	r3, [pc, #16]	; (80015e8 <__NVIC_EnableIRQ+0x30>)
 80015d8:	2101      	movs	r1, #1
 80015da:	4091      	lsls	r1, r2
 80015dc:	000a      	movs	r2, r1
 80015de:	601a      	str	r2, [r3, #0]
  }
}
 80015e0:	46c0      	nop			; (mov r8, r8)
 80015e2:	46bd      	mov	sp, r7
 80015e4:	b002      	add	sp, #8
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	e000e100 	.word	0xe000e100

080015ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015ec:	b590      	push	{r4, r7, lr}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	0002      	movs	r2, r0
 80015f4:	6039      	str	r1, [r7, #0]
 80015f6:	1dfb      	adds	r3, r7, #7
 80015f8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80015fa:	1dfb      	adds	r3, r7, #7
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2b7f      	cmp	r3, #127	; 0x7f
 8001600:	d828      	bhi.n	8001654 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001602:	4a2f      	ldr	r2, [pc, #188]	; (80016c0 <__NVIC_SetPriority+0xd4>)
 8001604:	1dfb      	adds	r3, r7, #7
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	b25b      	sxtb	r3, r3
 800160a:	089b      	lsrs	r3, r3, #2
 800160c:	33c0      	adds	r3, #192	; 0xc0
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	589b      	ldr	r3, [r3, r2]
 8001612:	1dfa      	adds	r2, r7, #7
 8001614:	7812      	ldrb	r2, [r2, #0]
 8001616:	0011      	movs	r1, r2
 8001618:	2203      	movs	r2, #3
 800161a:	400a      	ands	r2, r1
 800161c:	00d2      	lsls	r2, r2, #3
 800161e:	21ff      	movs	r1, #255	; 0xff
 8001620:	4091      	lsls	r1, r2
 8001622:	000a      	movs	r2, r1
 8001624:	43d2      	mvns	r2, r2
 8001626:	401a      	ands	r2, r3
 8001628:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	019b      	lsls	r3, r3, #6
 800162e:	22ff      	movs	r2, #255	; 0xff
 8001630:	401a      	ands	r2, r3
 8001632:	1dfb      	adds	r3, r7, #7
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	0018      	movs	r0, r3
 8001638:	2303      	movs	r3, #3
 800163a:	4003      	ands	r3, r0
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001640:	481f      	ldr	r0, [pc, #124]	; (80016c0 <__NVIC_SetPriority+0xd4>)
 8001642:	1dfb      	adds	r3, r7, #7
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	b25b      	sxtb	r3, r3
 8001648:	089b      	lsrs	r3, r3, #2
 800164a:	430a      	orrs	r2, r1
 800164c:	33c0      	adds	r3, #192	; 0xc0
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001652:	e031      	b.n	80016b8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001654:	4a1b      	ldr	r2, [pc, #108]	; (80016c4 <__NVIC_SetPriority+0xd8>)
 8001656:	1dfb      	adds	r3, r7, #7
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	0019      	movs	r1, r3
 800165c:	230f      	movs	r3, #15
 800165e:	400b      	ands	r3, r1
 8001660:	3b08      	subs	r3, #8
 8001662:	089b      	lsrs	r3, r3, #2
 8001664:	3306      	adds	r3, #6
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	18d3      	adds	r3, r2, r3
 800166a:	3304      	adds	r3, #4
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	1dfa      	adds	r2, r7, #7
 8001670:	7812      	ldrb	r2, [r2, #0]
 8001672:	0011      	movs	r1, r2
 8001674:	2203      	movs	r2, #3
 8001676:	400a      	ands	r2, r1
 8001678:	00d2      	lsls	r2, r2, #3
 800167a:	21ff      	movs	r1, #255	; 0xff
 800167c:	4091      	lsls	r1, r2
 800167e:	000a      	movs	r2, r1
 8001680:	43d2      	mvns	r2, r2
 8001682:	401a      	ands	r2, r3
 8001684:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	019b      	lsls	r3, r3, #6
 800168a:	22ff      	movs	r2, #255	; 0xff
 800168c:	401a      	ands	r2, r3
 800168e:	1dfb      	adds	r3, r7, #7
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	0018      	movs	r0, r3
 8001694:	2303      	movs	r3, #3
 8001696:	4003      	ands	r3, r0
 8001698:	00db      	lsls	r3, r3, #3
 800169a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800169c:	4809      	ldr	r0, [pc, #36]	; (80016c4 <__NVIC_SetPriority+0xd8>)
 800169e:	1dfb      	adds	r3, r7, #7
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	001c      	movs	r4, r3
 80016a4:	230f      	movs	r3, #15
 80016a6:	4023      	ands	r3, r4
 80016a8:	3b08      	subs	r3, #8
 80016aa:	089b      	lsrs	r3, r3, #2
 80016ac:	430a      	orrs	r2, r1
 80016ae:	3306      	adds	r3, #6
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	18c3      	adds	r3, r0, r3
 80016b4:	3304      	adds	r3, #4
 80016b6:	601a      	str	r2, [r3, #0]
}
 80016b8:	46c0      	nop			; (mov r8, r8)
 80016ba:	46bd      	mov	sp, r7
 80016bc:	b003      	add	sp, #12
 80016be:	bd90      	pop	{r4, r7, pc}
 80016c0:	e000e100 	.word	0xe000e100
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	1e5a      	subs	r2, r3, #1
 80016d4:	2380      	movs	r3, #128	; 0x80
 80016d6:	045b      	lsls	r3, r3, #17
 80016d8:	429a      	cmp	r2, r3
 80016da:	d301      	bcc.n	80016e0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016dc:	2301      	movs	r3, #1
 80016de:	e010      	b.n	8001702 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016e0:	4b0a      	ldr	r3, [pc, #40]	; (800170c <SysTick_Config+0x44>)
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	3a01      	subs	r2, #1
 80016e6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016e8:	2301      	movs	r3, #1
 80016ea:	425b      	negs	r3, r3
 80016ec:	2103      	movs	r1, #3
 80016ee:	0018      	movs	r0, r3
 80016f0:	f7ff ff7c 	bl	80015ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016f4:	4b05      	ldr	r3, [pc, #20]	; (800170c <SysTick_Config+0x44>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016fa:	4b04      	ldr	r3, [pc, #16]	; (800170c <SysTick_Config+0x44>)
 80016fc:	2207      	movs	r2, #7
 80016fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001700:	2300      	movs	r3, #0
}
 8001702:	0018      	movs	r0, r3
 8001704:	46bd      	mov	sp, r7
 8001706:	b002      	add	sp, #8
 8001708:	bd80      	pop	{r7, pc}
 800170a:	46c0      	nop			; (mov r8, r8)
 800170c:	e000e010 	.word	0xe000e010

08001710 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	60b9      	str	r1, [r7, #8]
 8001718:	607a      	str	r2, [r7, #4]
 800171a:	210f      	movs	r1, #15
 800171c:	187b      	adds	r3, r7, r1
 800171e:	1c02      	adds	r2, r0, #0
 8001720:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001722:	68ba      	ldr	r2, [r7, #8]
 8001724:	187b      	adds	r3, r7, r1
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	b25b      	sxtb	r3, r3
 800172a:	0011      	movs	r1, r2
 800172c:	0018      	movs	r0, r3
 800172e:	f7ff ff5d 	bl	80015ec <__NVIC_SetPriority>
}
 8001732:	46c0      	nop			; (mov r8, r8)
 8001734:	46bd      	mov	sp, r7
 8001736:	b004      	add	sp, #16
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b082      	sub	sp, #8
 800173e:	af00      	add	r7, sp, #0
 8001740:	0002      	movs	r2, r0
 8001742:	1dfb      	adds	r3, r7, #7
 8001744:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001746:	1dfb      	adds	r3, r7, #7
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	b25b      	sxtb	r3, r3
 800174c:	0018      	movs	r0, r3
 800174e:	f7ff ff33 	bl	80015b8 <__NVIC_EnableIRQ>
}
 8001752:	46c0      	nop			; (mov r8, r8)
 8001754:	46bd      	mov	sp, r7
 8001756:	b002      	add	sp, #8
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b082      	sub	sp, #8
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	0018      	movs	r0, r3
 8001766:	f7ff ffaf 	bl	80016c8 <SysTick_Config>
 800176a:	0003      	movs	r3, r0
}
 800176c:	0018      	movs	r0, r3
 800176e:	46bd      	mov	sp, r7
 8001770:	b002      	add	sp, #8
 8001772:	bd80      	pop	{r7, pc}

08001774 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800177c:	230f      	movs	r3, #15
 800177e:	18fb      	adds	r3, r7, r3
 8001780:	2200      	movs	r2, #0
 8001782:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2225      	movs	r2, #37	; 0x25
 8001788:	5c9b      	ldrb	r3, [r3, r2]
 800178a:	b2db      	uxtb	r3, r3
 800178c:	2b02      	cmp	r3, #2
 800178e:	d008      	beq.n	80017a2 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2204      	movs	r2, #4
 8001794:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2224      	movs	r2, #36	; 0x24
 800179a:	2100      	movs	r1, #0
 800179c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e024      	b.n	80017ec <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	210e      	movs	r1, #14
 80017ae:	438a      	bics	r2, r1
 80017b0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2101      	movs	r1, #1
 80017be:	438a      	bics	r2, r1
 80017c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c6:	221c      	movs	r2, #28
 80017c8:	401a      	ands	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ce:	2101      	movs	r1, #1
 80017d0:	4091      	lsls	r1, r2
 80017d2:	000a      	movs	r2, r1
 80017d4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2225      	movs	r2, #37	; 0x25
 80017da:	2101      	movs	r1, #1
 80017dc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2224      	movs	r2, #36	; 0x24
 80017e2:	2100      	movs	r1, #0
 80017e4:	5499      	strb	r1, [r3, r2]

    return status;
 80017e6:	230f      	movs	r3, #15
 80017e8:	18fb      	adds	r3, r7, r3
 80017ea:	781b      	ldrb	r3, [r3, #0]
  }
}
 80017ec:	0018      	movs	r0, r3
 80017ee:	46bd      	mov	sp, r7
 80017f0:	b004      	add	sp, #16
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017fc:	210f      	movs	r1, #15
 80017fe:	187b      	adds	r3, r7, r1
 8001800:	2200      	movs	r2, #0
 8001802:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2225      	movs	r2, #37	; 0x25
 8001808:	5c9b      	ldrb	r3, [r3, r2]
 800180a:	b2db      	uxtb	r3, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d006      	beq.n	800181e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2204      	movs	r2, #4
 8001814:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001816:	187b      	adds	r3, r7, r1
 8001818:	2201      	movs	r2, #1
 800181a:	701a      	strb	r2, [r3, #0]
 800181c:	e02a      	b.n	8001874 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	210e      	movs	r1, #14
 800182a:	438a      	bics	r2, r1
 800182c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2101      	movs	r1, #1
 800183a:	438a      	bics	r2, r1
 800183c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001842:	221c      	movs	r2, #28
 8001844:	401a      	ands	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	2101      	movs	r1, #1
 800184c:	4091      	lsls	r1, r2
 800184e:	000a      	movs	r2, r1
 8001850:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2225      	movs	r2, #37	; 0x25
 8001856:	2101      	movs	r1, #1
 8001858:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2224      	movs	r2, #36	; 0x24
 800185e:	2100      	movs	r1, #0
 8001860:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001866:	2b00      	cmp	r3, #0
 8001868:	d004      	beq.n	8001874 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	0010      	movs	r0, r2
 8001872:	4798      	blx	r3
    }
  }
  return status;
 8001874:	230f      	movs	r3, #15
 8001876:	18fb      	adds	r3, r7, r3
 8001878:	781b      	ldrb	r3, [r3, #0]
}
 800187a:	0018      	movs	r0, r3
 800187c:	46bd      	mov	sp, r7
 800187e:	b004      	add	sp, #16
 8001880:	bd80      	pop	{r7, pc}
	...

08001884 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800188e:	2300      	movs	r3, #0
 8001890:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001892:	2300      	movs	r3, #0
 8001894:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001896:	2300      	movs	r3, #0
 8001898:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800189a:	e155      	b.n	8001b48 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2101      	movs	r1, #1
 80018a2:	697a      	ldr	r2, [r7, #20]
 80018a4:	4091      	lsls	r1, r2
 80018a6:	000a      	movs	r2, r1
 80018a8:	4013      	ands	r3, r2
 80018aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d100      	bne.n	80018b4 <HAL_GPIO_Init+0x30>
 80018b2:	e146      	b.n	8001b42 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	2203      	movs	r2, #3
 80018ba:	4013      	ands	r3, r2
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d005      	beq.n	80018cc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	2203      	movs	r2, #3
 80018c6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d130      	bne.n	800192e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	2203      	movs	r2, #3
 80018d8:	409a      	lsls	r2, r3
 80018da:	0013      	movs	r3, r2
 80018dc:	43da      	mvns	r2, r3
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	4013      	ands	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	68da      	ldr	r2, [r3, #12]
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	409a      	lsls	r2, r3
 80018ee:	0013      	movs	r3, r2
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001902:	2201      	movs	r2, #1
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	409a      	lsls	r2, r3
 8001908:	0013      	movs	r3, r2
 800190a:	43da      	mvns	r2, r3
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	4013      	ands	r3, r2
 8001910:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	091b      	lsrs	r3, r3, #4
 8001918:	2201      	movs	r2, #1
 800191a:	401a      	ands	r2, r3
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	409a      	lsls	r2, r3
 8001920:	0013      	movs	r3, r2
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	4313      	orrs	r3, r2
 8001926:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	2203      	movs	r2, #3
 8001934:	4013      	ands	r3, r2
 8001936:	2b03      	cmp	r3, #3
 8001938:	d017      	beq.n	800196a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	2203      	movs	r2, #3
 8001946:	409a      	lsls	r2, r3
 8001948:	0013      	movs	r3, r2
 800194a:	43da      	mvns	r2, r3
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	4013      	ands	r3, r2
 8001950:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	689a      	ldr	r2, [r3, #8]
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	409a      	lsls	r2, r3
 800195c:	0013      	movs	r3, r2
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	4313      	orrs	r3, r2
 8001962:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2203      	movs	r2, #3
 8001970:	4013      	ands	r3, r2
 8001972:	2b02      	cmp	r3, #2
 8001974:	d123      	bne.n	80019be <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	08da      	lsrs	r2, r3, #3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	3208      	adds	r2, #8
 800197e:	0092      	lsls	r2, r2, #2
 8001980:	58d3      	ldr	r3, [r2, r3]
 8001982:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	2207      	movs	r2, #7
 8001988:	4013      	ands	r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	220f      	movs	r2, #15
 800198e:	409a      	lsls	r2, r3
 8001990:	0013      	movs	r3, r2
 8001992:	43da      	mvns	r2, r3
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	4013      	ands	r3, r2
 8001998:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	691a      	ldr	r2, [r3, #16]
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	2107      	movs	r1, #7
 80019a2:	400b      	ands	r3, r1
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	409a      	lsls	r2, r3
 80019a8:	0013      	movs	r3, r2
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	08da      	lsrs	r2, r3, #3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	3208      	adds	r2, #8
 80019b8:	0092      	lsls	r2, r2, #2
 80019ba:	6939      	ldr	r1, [r7, #16]
 80019bc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	2203      	movs	r2, #3
 80019ca:	409a      	lsls	r2, r3
 80019cc:	0013      	movs	r3, r2
 80019ce:	43da      	mvns	r2, r3
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	4013      	ands	r3, r2
 80019d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2203      	movs	r2, #3
 80019dc:	401a      	ands	r2, r3
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	409a      	lsls	r2, r3
 80019e4:	0013      	movs	r3, r2
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685a      	ldr	r2, [r3, #4]
 80019f6:	23c0      	movs	r3, #192	; 0xc0
 80019f8:	029b      	lsls	r3, r3, #10
 80019fa:	4013      	ands	r3, r2
 80019fc:	d100      	bne.n	8001a00 <HAL_GPIO_Init+0x17c>
 80019fe:	e0a0      	b.n	8001b42 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a00:	4b57      	ldr	r3, [pc, #348]	; (8001b60 <HAL_GPIO_Init+0x2dc>)
 8001a02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a04:	4b56      	ldr	r3, [pc, #344]	; (8001b60 <HAL_GPIO_Init+0x2dc>)
 8001a06:	2101      	movs	r1, #1
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a0c:	4a55      	ldr	r2, [pc, #340]	; (8001b64 <HAL_GPIO_Init+0x2e0>)
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	089b      	lsrs	r3, r3, #2
 8001a12:	3302      	adds	r3, #2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	589b      	ldr	r3, [r3, r2]
 8001a18:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	2203      	movs	r2, #3
 8001a1e:	4013      	ands	r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	220f      	movs	r2, #15
 8001a24:	409a      	lsls	r2, r3
 8001a26:	0013      	movs	r3, r2
 8001a28:	43da      	mvns	r2, r3
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	23a0      	movs	r3, #160	; 0xa0
 8001a34:	05db      	lsls	r3, r3, #23
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d01f      	beq.n	8001a7a <HAL_GPIO_Init+0x1f6>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a4a      	ldr	r2, [pc, #296]	; (8001b68 <HAL_GPIO_Init+0x2e4>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d019      	beq.n	8001a76 <HAL_GPIO_Init+0x1f2>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a49      	ldr	r2, [pc, #292]	; (8001b6c <HAL_GPIO_Init+0x2e8>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d013      	beq.n	8001a72 <HAL_GPIO_Init+0x1ee>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a48      	ldr	r2, [pc, #288]	; (8001b70 <HAL_GPIO_Init+0x2ec>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d00d      	beq.n	8001a6e <HAL_GPIO_Init+0x1ea>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a47      	ldr	r2, [pc, #284]	; (8001b74 <HAL_GPIO_Init+0x2f0>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d007      	beq.n	8001a6a <HAL_GPIO_Init+0x1e6>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a46      	ldr	r2, [pc, #280]	; (8001b78 <HAL_GPIO_Init+0x2f4>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d101      	bne.n	8001a66 <HAL_GPIO_Init+0x1e2>
 8001a62:	2305      	movs	r3, #5
 8001a64:	e00a      	b.n	8001a7c <HAL_GPIO_Init+0x1f8>
 8001a66:	2306      	movs	r3, #6
 8001a68:	e008      	b.n	8001a7c <HAL_GPIO_Init+0x1f8>
 8001a6a:	2304      	movs	r3, #4
 8001a6c:	e006      	b.n	8001a7c <HAL_GPIO_Init+0x1f8>
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e004      	b.n	8001a7c <HAL_GPIO_Init+0x1f8>
 8001a72:	2302      	movs	r3, #2
 8001a74:	e002      	b.n	8001a7c <HAL_GPIO_Init+0x1f8>
 8001a76:	2301      	movs	r3, #1
 8001a78:	e000      	b.n	8001a7c <HAL_GPIO_Init+0x1f8>
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	697a      	ldr	r2, [r7, #20]
 8001a7e:	2103      	movs	r1, #3
 8001a80:	400a      	ands	r2, r1
 8001a82:	0092      	lsls	r2, r2, #2
 8001a84:	4093      	lsls	r3, r2
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a8c:	4935      	ldr	r1, [pc, #212]	; (8001b64 <HAL_GPIO_Init+0x2e0>)
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	089b      	lsrs	r3, r3, #2
 8001a92:	3302      	adds	r3, #2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a9a:	4b38      	ldr	r3, [pc, #224]	; (8001b7c <HAL_GPIO_Init+0x2f8>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	43da      	mvns	r2, r3
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685a      	ldr	r2, [r3, #4]
 8001aae:	2380      	movs	r3, #128	; 0x80
 8001ab0:	025b      	lsls	r3, r3, #9
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	d003      	beq.n	8001abe <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001abe:	4b2f      	ldr	r3, [pc, #188]	; (8001b7c <HAL_GPIO_Init+0x2f8>)
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001ac4:	4b2d      	ldr	r3, [pc, #180]	; (8001b7c <HAL_GPIO_Init+0x2f8>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	43da      	mvns	r2, r3
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685a      	ldr	r2, [r3, #4]
 8001ad8:	2380      	movs	r3, #128	; 0x80
 8001ada:	029b      	lsls	r3, r3, #10
 8001adc:	4013      	ands	r3, r2
 8001ade:	d003      	beq.n	8001ae8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ae8:	4b24      	ldr	r3, [pc, #144]	; (8001b7c <HAL_GPIO_Init+0x2f8>)
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aee:	4b23      	ldr	r3, [pc, #140]	; (8001b7c <HAL_GPIO_Init+0x2f8>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	43da      	mvns	r2, r3
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	4013      	ands	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685a      	ldr	r2, [r3, #4]
 8001b02:	2380      	movs	r3, #128	; 0x80
 8001b04:	035b      	lsls	r3, r3, #13
 8001b06:	4013      	ands	r3, r2
 8001b08:	d003      	beq.n	8001b12 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b12:	4b1a      	ldr	r3, [pc, #104]	; (8001b7c <HAL_GPIO_Init+0x2f8>)
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001b18:	4b18      	ldr	r3, [pc, #96]	; (8001b7c <HAL_GPIO_Init+0x2f8>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	43da      	mvns	r2, r3
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	4013      	ands	r3, r2
 8001b26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685a      	ldr	r2, [r3, #4]
 8001b2c:	2380      	movs	r3, #128	; 0x80
 8001b2e:	039b      	lsls	r3, r3, #14
 8001b30:	4013      	ands	r3, r2
 8001b32:	d003      	beq.n	8001b3c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b3c:	4b0f      	ldr	r3, [pc, #60]	; (8001b7c <HAL_GPIO_Init+0x2f8>)
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	3301      	adds	r3, #1
 8001b46:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	40da      	lsrs	r2, r3
 8001b50:	1e13      	subs	r3, r2, #0
 8001b52:	d000      	beq.n	8001b56 <HAL_GPIO_Init+0x2d2>
 8001b54:	e6a2      	b.n	800189c <HAL_GPIO_Init+0x18>
  }
}
 8001b56:	46c0      	nop			; (mov r8, r8)
 8001b58:	46c0      	nop			; (mov r8, r8)
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	b006      	add	sp, #24
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40021000 	.word	0x40021000
 8001b64:	40010000 	.word	0x40010000
 8001b68:	50000400 	.word	0x50000400
 8001b6c:	50000800 	.word	0x50000800
 8001b70:	50000c00 	.word	0x50000c00
 8001b74:	50001000 	.word	0x50001000
 8001b78:	50001c00 	.word	0x50001c00
 8001b7c:	40010400 	.word	0x40010400

08001b80 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	0008      	movs	r0, r1
 8001b8a:	0011      	movs	r1, r2
 8001b8c:	1cbb      	adds	r3, r7, #2
 8001b8e:	1c02      	adds	r2, r0, #0
 8001b90:	801a      	strh	r2, [r3, #0]
 8001b92:	1c7b      	adds	r3, r7, #1
 8001b94:	1c0a      	adds	r2, r1, #0
 8001b96:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b98:	1c7b      	adds	r3, r7, #1
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d004      	beq.n	8001baa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ba0:	1cbb      	adds	r3, r7, #2
 8001ba2:	881a      	ldrh	r2, [r3, #0]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001ba8:	e003      	b.n	8001bb2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001baa:	1cbb      	adds	r3, r7, #2
 8001bac:	881a      	ldrh	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bb2:	46c0      	nop			; (mov r8, r8)
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	b002      	add	sp, #8
 8001bb8:	bd80      	pop	{r7, pc}
	...

08001bbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bbc:	b5b0      	push	{r4, r5, r7, lr}
 8001bbe:	b08a      	sub	sp, #40	; 0x28
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d102      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	f000 fb6c 	bl	80022a8 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bd0:	4bc8      	ldr	r3, [pc, #800]	; (8001ef4 <HAL_RCC_OscConfig+0x338>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	220c      	movs	r2, #12
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bda:	4bc6      	ldr	r3, [pc, #792]	; (8001ef4 <HAL_RCC_OscConfig+0x338>)
 8001bdc:	68da      	ldr	r2, [r3, #12]
 8001bde:	2380      	movs	r3, #128	; 0x80
 8001be0:	025b      	lsls	r3, r3, #9
 8001be2:	4013      	ands	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2201      	movs	r2, #1
 8001bec:	4013      	ands	r3, r2
 8001bee:	d100      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x36>
 8001bf0:	e07d      	b.n	8001cee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	2b08      	cmp	r3, #8
 8001bf6:	d007      	beq.n	8001c08 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	2b0c      	cmp	r3, #12
 8001bfc:	d112      	bne.n	8001c24 <HAL_RCC_OscConfig+0x68>
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	2380      	movs	r3, #128	; 0x80
 8001c02:	025b      	lsls	r3, r3, #9
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d10d      	bne.n	8001c24 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c08:	4bba      	ldr	r3, [pc, #744]	; (8001ef4 <HAL_RCC_OscConfig+0x338>)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	2380      	movs	r3, #128	; 0x80
 8001c0e:	029b      	lsls	r3, r3, #10
 8001c10:	4013      	ands	r3, r2
 8001c12:	d100      	bne.n	8001c16 <HAL_RCC_OscConfig+0x5a>
 8001c14:	e06a      	b.n	8001cec <HAL_RCC_OscConfig+0x130>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d166      	bne.n	8001cec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	f000 fb42 	bl	80022a8 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	2380      	movs	r3, #128	; 0x80
 8001c2a:	025b      	lsls	r3, r3, #9
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d107      	bne.n	8001c40 <HAL_RCC_OscConfig+0x84>
 8001c30:	4bb0      	ldr	r3, [pc, #704]	; (8001ef4 <HAL_RCC_OscConfig+0x338>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	4baf      	ldr	r3, [pc, #700]	; (8001ef4 <HAL_RCC_OscConfig+0x338>)
 8001c36:	2180      	movs	r1, #128	; 0x80
 8001c38:	0249      	lsls	r1, r1, #9
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	e027      	b.n	8001c90 <HAL_RCC_OscConfig+0xd4>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685a      	ldr	r2, [r3, #4]
 8001c44:	23a0      	movs	r3, #160	; 0xa0
 8001c46:	02db      	lsls	r3, r3, #11
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d10e      	bne.n	8001c6a <HAL_RCC_OscConfig+0xae>
 8001c4c:	4ba9      	ldr	r3, [pc, #676]	; (8001ef4 <HAL_RCC_OscConfig+0x338>)
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	4ba8      	ldr	r3, [pc, #672]	; (8001ef4 <HAL_RCC_OscConfig+0x338>)
 8001c52:	2180      	movs	r1, #128	; 0x80
 8001c54:	02c9      	lsls	r1, r1, #11
 8001c56:	430a      	orrs	r2, r1
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	4ba6      	ldr	r3, [pc, #664]	; (8001ef4 <HAL_RCC_OscConfig+0x338>)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	4ba5      	ldr	r3, [pc, #660]	; (8001ef4 <HAL_RCC_OscConfig+0x338>)
 8001c60:	2180      	movs	r1, #128	; 0x80
 8001c62:	0249      	lsls	r1, r1, #9
 8001c64:	430a      	orrs	r2, r1
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	e012      	b.n	8001c90 <HAL_RCC_OscConfig+0xd4>
 8001c6a:	4ba2      	ldr	r3, [pc, #648]	; (8001ef4 <HAL_RCC_OscConfig+0x338>)
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	4ba1      	ldr	r3, [pc, #644]	; (8001ef4 <HAL_RCC_OscConfig+0x338>)
 8001c70:	49a1      	ldr	r1, [pc, #644]	; (8001ef8 <HAL_RCC_OscConfig+0x33c>)
 8001c72:	400a      	ands	r2, r1
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	4b9f      	ldr	r3, [pc, #636]	; (8001ef4 <HAL_RCC_OscConfig+0x338>)
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	2380      	movs	r3, #128	; 0x80
 8001c7c:	025b      	lsls	r3, r3, #9
 8001c7e:	4013      	ands	r3, r2
 8001c80:	60fb      	str	r3, [r7, #12]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	4b9b      	ldr	r3, [pc, #620]	; (8001ef4 <HAL_RCC_OscConfig+0x338>)
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	4b9a      	ldr	r3, [pc, #616]	; (8001ef4 <HAL_RCC_OscConfig+0x338>)
 8001c8a:	499c      	ldr	r1, [pc, #624]	; (8001efc <HAL_RCC_OscConfig+0x340>)
 8001c8c:	400a      	ands	r2, r1
 8001c8e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d014      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c98:	f7ff fc84 	bl	80015a4 <HAL_GetTick>
 8001c9c:	0003      	movs	r3, r0
 8001c9e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ca0:	e008      	b.n	8001cb4 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ca2:	f7ff fc7f 	bl	80015a4 <HAL_GetTick>
 8001ca6:	0002      	movs	r2, r0
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b64      	cmp	r3, #100	; 0x64
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e2f9      	b.n	80022a8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001cb4:	4b8f      	ldr	r3, [pc, #572]	; (8001ef4 <HAL_RCC_OscConfig+0x338>)
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	2380      	movs	r3, #128	; 0x80
 8001cba:	029b      	lsls	r3, r3, #10
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	d0f0      	beq.n	8001ca2 <HAL_RCC_OscConfig+0xe6>
 8001cc0:	e015      	b.n	8001cee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc2:	f7ff fc6f 	bl	80015a4 <HAL_GetTick>
 8001cc6:	0003      	movs	r3, r0
 8001cc8:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ccc:	f7ff fc6a 	bl	80015a4 <HAL_GetTick>
 8001cd0:	0002      	movs	r2, r0
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b64      	cmp	r3, #100	; 0x64
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e2e4      	b.n	80022a8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001cde:	4b85      	ldr	r3, [pc, #532]	; (8001ef4 <HAL_RCC_OscConfig+0x338>)
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	2380      	movs	r3, #128	; 0x80
 8001ce4:	029b      	lsls	r3, r3, #10
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	d1f0      	bne.n	8001ccc <HAL_RCC_OscConfig+0x110>
 8001cea:	e000      	b.n	8001cee <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cec:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	d100      	bne.n	8001cfa <HAL_RCC_OscConfig+0x13e>
 8001cf8:	e099      	b.n	8001e2e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d02:	2220      	movs	r2, #32
 8001d04:	4013      	ands	r3, r2
 8001d06:	d009      	beq.n	8001d1c <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001d08:	4b7a      	ldr	r3, [pc, #488]	; (8001ef4 <HAL_RCC_OscConfig+0x338>)
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	4b79      	ldr	r3, [pc, #484]	; (8001ef4 <HAL_RCC_OscConfig+0x338>)
 8001d0e:	2120      	movs	r1, #32
 8001d10:	430a      	orrs	r2, r1
 8001d12:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d16:	2220      	movs	r2, #32
 8001d18:	4393      	bics	r3, r2
 8001d1a:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	2b04      	cmp	r3, #4
 8001d20:	d005      	beq.n	8001d2e <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	2b0c      	cmp	r3, #12
 8001d26:	d13e      	bne.n	8001da6 <HAL_RCC_OscConfig+0x1ea>
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d13b      	bne.n	8001da6 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001d2e:	4b71      	ldr	r3, [pc, #452]	; (8001ef4 <HAL_RCC_OscConfig+0x338>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2204      	movs	r2, #4
 8001d34:	4013      	ands	r3, r2
 8001d36:	d004      	beq.n	8001d42 <HAL_RCC_OscConfig+0x186>
 8001d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e2b2      	b.n	80022a8 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d42:	4b6c      	ldr	r3, [pc, #432]	; (8001ef4 <HAL_RCC_OscConfig+0x338>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	4a6e      	ldr	r2, [pc, #440]	; (8001f00 <HAL_RCC_OscConfig+0x344>)
 8001d48:	4013      	ands	r3, r2
 8001d4a:	0019      	movs	r1, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	021a      	lsls	r2, r3, #8
 8001d52:	4b68      	ldr	r3, [pc, #416]	; (8001ef4 <HAL_RCC_OscConfig+0x338>)
 8001d54:	430a      	orrs	r2, r1
 8001d56:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001d58:	4b66      	ldr	r3, [pc, #408]	; (8001ef4 <HAL_RCC_OscConfig+0x338>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2209      	movs	r2, #9
 8001d5e:	4393      	bics	r3, r2
 8001d60:	0019      	movs	r1, r3
 8001d62:	4b64      	ldr	r3, [pc, #400]	; (8001ef4 <HAL_RCC_OscConfig+0x338>)
 8001d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d66:	430a      	orrs	r2, r1
 8001d68:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d6a:	f000 fbeb 	bl	8002544 <HAL_RCC_GetSysClockFreq>
 8001d6e:	0001      	movs	r1, r0
 8001d70:	4b60      	ldr	r3, [pc, #384]	; (8001ef4 <HAL_RCC_OscConfig+0x338>)
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	091b      	lsrs	r3, r3, #4
 8001d76:	220f      	movs	r2, #15
 8001d78:	4013      	ands	r3, r2
 8001d7a:	4a62      	ldr	r2, [pc, #392]	; (8001f04 <HAL_RCC_OscConfig+0x348>)
 8001d7c:	5cd3      	ldrb	r3, [r2, r3]
 8001d7e:	000a      	movs	r2, r1
 8001d80:	40da      	lsrs	r2, r3
 8001d82:	4b61      	ldr	r3, [pc, #388]	; (8001f08 <HAL_RCC_OscConfig+0x34c>)
 8001d84:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001d86:	4b61      	ldr	r3, [pc, #388]	; (8001f0c <HAL_RCC_OscConfig+0x350>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2513      	movs	r5, #19
 8001d8c:	197c      	adds	r4, r7, r5
 8001d8e:	0018      	movs	r0, r3
 8001d90:	f7ff fbc2 	bl	8001518 <HAL_InitTick>
 8001d94:	0003      	movs	r3, r0
 8001d96:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001d98:	197b      	adds	r3, r7, r5
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d046      	beq.n	8001e2e <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001da0:	197b      	adds	r3, r7, r5
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	e280      	b.n	80022a8 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d027      	beq.n	8001dfc <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001dac:	4b51      	ldr	r3, [pc, #324]	; (8001ef4 <HAL_RCC_OscConfig+0x338>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2209      	movs	r2, #9
 8001db2:	4393      	bics	r3, r2
 8001db4:	0019      	movs	r1, r3
 8001db6:	4b4f      	ldr	r3, [pc, #316]	; (8001ef4 <HAL_RCC_OscConfig+0x338>)
 8001db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dbe:	f7ff fbf1 	bl	80015a4 <HAL_GetTick>
 8001dc2:	0003      	movs	r3, r0
 8001dc4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dc8:	f7ff fbec 	bl	80015a4 <HAL_GetTick>
 8001dcc:	0002      	movs	r2, r0
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e266      	b.n	80022a8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001dda:	4b46      	ldr	r3, [pc, #280]	; (8001ef4 <HAL_RCC_OscConfig+0x338>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2204      	movs	r2, #4
 8001de0:	4013      	ands	r3, r2
 8001de2:	d0f1      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de4:	4b43      	ldr	r3, [pc, #268]	; (8001ef4 <HAL_RCC_OscConfig+0x338>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	4a45      	ldr	r2, [pc, #276]	; (8001f00 <HAL_RCC_OscConfig+0x344>)
 8001dea:	4013      	ands	r3, r2
 8001dec:	0019      	movs	r1, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	021a      	lsls	r2, r3, #8
 8001df4:	4b3f      	ldr	r3, [pc, #252]	; (8001ef4 <HAL_RCC_OscConfig+0x338>)
 8001df6:	430a      	orrs	r2, r1
 8001df8:	605a      	str	r2, [r3, #4]
 8001dfa:	e018      	b.n	8001e2e <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dfc:	4b3d      	ldr	r3, [pc, #244]	; (8001ef4 <HAL_RCC_OscConfig+0x338>)
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	4b3c      	ldr	r3, [pc, #240]	; (8001ef4 <HAL_RCC_OscConfig+0x338>)
 8001e02:	2101      	movs	r1, #1
 8001e04:	438a      	bics	r2, r1
 8001e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e08:	f7ff fbcc 	bl	80015a4 <HAL_GetTick>
 8001e0c:	0003      	movs	r3, r0
 8001e0e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e10:	e008      	b.n	8001e24 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e12:	f7ff fbc7 	bl	80015a4 <HAL_GetTick>
 8001e16:	0002      	movs	r2, r0
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e241      	b.n	80022a8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e24:	4b33      	ldr	r3, [pc, #204]	; (8001ef4 <HAL_RCC_OscConfig+0x338>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2204      	movs	r2, #4
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	d1f1      	bne.n	8001e12 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2210      	movs	r2, #16
 8001e34:	4013      	ands	r3, r2
 8001e36:	d100      	bne.n	8001e3a <HAL_RCC_OscConfig+0x27e>
 8001e38:	e0a1      	b.n	8001f7e <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d140      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e40:	4b2c      	ldr	r3, [pc, #176]	; (8001ef4 <HAL_RCC_OscConfig+0x338>)
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	2380      	movs	r3, #128	; 0x80
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4013      	ands	r3, r2
 8001e4a:	d005      	beq.n	8001e58 <HAL_RCC_OscConfig+0x29c>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d101      	bne.n	8001e58 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e227      	b.n	80022a8 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e58:	4b26      	ldr	r3, [pc, #152]	; (8001ef4 <HAL_RCC_OscConfig+0x338>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	4a2c      	ldr	r2, [pc, #176]	; (8001f10 <HAL_RCC_OscConfig+0x354>)
 8001e5e:	4013      	ands	r3, r2
 8001e60:	0019      	movs	r1, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a1a      	ldr	r2, [r3, #32]
 8001e66:	4b23      	ldr	r3, [pc, #140]	; (8001ef4 <HAL_RCC_OscConfig+0x338>)
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e6c:	4b21      	ldr	r3, [pc, #132]	; (8001ef4 <HAL_RCC_OscConfig+0x338>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	021b      	lsls	r3, r3, #8
 8001e72:	0a19      	lsrs	r1, r3, #8
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	69db      	ldr	r3, [r3, #28]
 8001e78:	061a      	lsls	r2, r3, #24
 8001e7a:	4b1e      	ldr	r3, [pc, #120]	; (8001ef4 <HAL_RCC_OscConfig+0x338>)
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a1b      	ldr	r3, [r3, #32]
 8001e84:	0b5b      	lsrs	r3, r3, #13
 8001e86:	3301      	adds	r3, #1
 8001e88:	2280      	movs	r2, #128	; 0x80
 8001e8a:	0212      	lsls	r2, r2, #8
 8001e8c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001e8e:	4b19      	ldr	r3, [pc, #100]	; (8001ef4 <HAL_RCC_OscConfig+0x338>)
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	091b      	lsrs	r3, r3, #4
 8001e94:	210f      	movs	r1, #15
 8001e96:	400b      	ands	r3, r1
 8001e98:	491a      	ldr	r1, [pc, #104]	; (8001f04 <HAL_RCC_OscConfig+0x348>)
 8001e9a:	5ccb      	ldrb	r3, [r1, r3]
 8001e9c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001e9e:	4b1a      	ldr	r3, [pc, #104]	; (8001f08 <HAL_RCC_OscConfig+0x34c>)
 8001ea0:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001ea2:	4b1a      	ldr	r3, [pc, #104]	; (8001f0c <HAL_RCC_OscConfig+0x350>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2513      	movs	r5, #19
 8001ea8:	197c      	adds	r4, r7, r5
 8001eaa:	0018      	movs	r0, r3
 8001eac:	f7ff fb34 	bl	8001518 <HAL_InitTick>
 8001eb0:	0003      	movs	r3, r0
 8001eb2:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001eb4:	197b      	adds	r3, r7, r5
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d060      	beq.n	8001f7e <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8001ebc:	197b      	adds	r3, r7, r5
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	e1f2      	b.n	80022a8 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	699b      	ldr	r3, [r3, #24]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d03f      	beq.n	8001f4a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001eca:	4b0a      	ldr	r3, [pc, #40]	; (8001ef4 <HAL_RCC_OscConfig+0x338>)
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	4b09      	ldr	r3, [pc, #36]	; (8001ef4 <HAL_RCC_OscConfig+0x338>)
 8001ed0:	2180      	movs	r1, #128	; 0x80
 8001ed2:	0049      	lsls	r1, r1, #1
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed8:	f7ff fb64 	bl	80015a4 <HAL_GetTick>
 8001edc:	0003      	movs	r3, r0
 8001ede:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001ee0:	e018      	b.n	8001f14 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ee2:	f7ff fb5f 	bl	80015a4 <HAL_GetTick>
 8001ee6:	0002      	movs	r2, r0
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d911      	bls.n	8001f14 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e1d9      	b.n	80022a8 <HAL_RCC_OscConfig+0x6ec>
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	fffeffff 	.word	0xfffeffff
 8001efc:	fffbffff 	.word	0xfffbffff
 8001f00:	ffffe0ff 	.word	0xffffe0ff
 8001f04:	0800769c 	.word	0x0800769c
 8001f08:	2000000c 	.word	0x2000000c
 8001f0c:	20000010 	.word	0x20000010
 8001f10:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001f14:	4bc9      	ldr	r3, [pc, #804]	; (800223c <HAL_RCC_OscConfig+0x680>)
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	2380      	movs	r3, #128	; 0x80
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	d0e0      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f20:	4bc6      	ldr	r3, [pc, #792]	; (800223c <HAL_RCC_OscConfig+0x680>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	4ac6      	ldr	r2, [pc, #792]	; (8002240 <HAL_RCC_OscConfig+0x684>)
 8001f26:	4013      	ands	r3, r2
 8001f28:	0019      	movs	r1, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a1a      	ldr	r2, [r3, #32]
 8001f2e:	4bc3      	ldr	r3, [pc, #780]	; (800223c <HAL_RCC_OscConfig+0x680>)
 8001f30:	430a      	orrs	r2, r1
 8001f32:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f34:	4bc1      	ldr	r3, [pc, #772]	; (800223c <HAL_RCC_OscConfig+0x680>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	021b      	lsls	r3, r3, #8
 8001f3a:	0a19      	lsrs	r1, r3, #8
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	69db      	ldr	r3, [r3, #28]
 8001f40:	061a      	lsls	r2, r3, #24
 8001f42:	4bbe      	ldr	r3, [pc, #760]	; (800223c <HAL_RCC_OscConfig+0x680>)
 8001f44:	430a      	orrs	r2, r1
 8001f46:	605a      	str	r2, [r3, #4]
 8001f48:	e019      	b.n	8001f7e <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f4a:	4bbc      	ldr	r3, [pc, #752]	; (800223c <HAL_RCC_OscConfig+0x680>)
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	4bbb      	ldr	r3, [pc, #748]	; (800223c <HAL_RCC_OscConfig+0x680>)
 8001f50:	49bc      	ldr	r1, [pc, #752]	; (8002244 <HAL_RCC_OscConfig+0x688>)
 8001f52:	400a      	ands	r2, r1
 8001f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f56:	f7ff fb25 	bl	80015a4 <HAL_GetTick>
 8001f5a:	0003      	movs	r3, r0
 8001f5c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f60:	f7ff fb20 	bl	80015a4 <HAL_GetTick>
 8001f64:	0002      	movs	r2, r0
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e19a      	b.n	80022a8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001f72:	4bb2      	ldr	r3, [pc, #712]	; (800223c <HAL_RCC_OscConfig+0x680>)
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	2380      	movs	r3, #128	; 0x80
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	d1f0      	bne.n	8001f60 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2208      	movs	r2, #8
 8001f84:	4013      	ands	r3, r2
 8001f86:	d036      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	695b      	ldr	r3, [r3, #20]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d019      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f90:	4baa      	ldr	r3, [pc, #680]	; (800223c <HAL_RCC_OscConfig+0x680>)
 8001f92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f94:	4ba9      	ldr	r3, [pc, #676]	; (800223c <HAL_RCC_OscConfig+0x680>)
 8001f96:	2101      	movs	r1, #1
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f9c:	f7ff fb02 	bl	80015a4 <HAL_GetTick>
 8001fa0:	0003      	movs	r3, r0
 8001fa2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fa6:	f7ff fafd 	bl	80015a4 <HAL_GetTick>
 8001faa:	0002      	movs	r2, r0
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e177      	b.n	80022a8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001fb8:	4ba0      	ldr	r3, [pc, #640]	; (800223c <HAL_RCC_OscConfig+0x680>)
 8001fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fbc:	2202      	movs	r2, #2
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	d0f1      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x3ea>
 8001fc2:	e018      	b.n	8001ff6 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fc4:	4b9d      	ldr	r3, [pc, #628]	; (800223c <HAL_RCC_OscConfig+0x680>)
 8001fc6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fc8:	4b9c      	ldr	r3, [pc, #624]	; (800223c <HAL_RCC_OscConfig+0x680>)
 8001fca:	2101      	movs	r1, #1
 8001fcc:	438a      	bics	r2, r1
 8001fce:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fd0:	f7ff fae8 	bl	80015a4 <HAL_GetTick>
 8001fd4:	0003      	movs	r3, r0
 8001fd6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001fd8:	e008      	b.n	8001fec <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fda:	f7ff fae3 	bl	80015a4 <HAL_GetTick>
 8001fde:	0002      	movs	r2, r0
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e15d      	b.n	80022a8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001fec:	4b93      	ldr	r3, [pc, #588]	; (800223c <HAL_RCC_OscConfig+0x680>)
 8001fee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ff0:	2202      	movs	r2, #2
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	d1f1      	bne.n	8001fda <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2204      	movs	r2, #4
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	d100      	bne.n	8002002 <HAL_RCC_OscConfig+0x446>
 8002000:	e0ae      	b.n	8002160 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002002:	2023      	movs	r0, #35	; 0x23
 8002004:	183b      	adds	r3, r7, r0
 8002006:	2200      	movs	r2, #0
 8002008:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800200a:	4b8c      	ldr	r3, [pc, #560]	; (800223c <HAL_RCC_OscConfig+0x680>)
 800200c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800200e:	2380      	movs	r3, #128	; 0x80
 8002010:	055b      	lsls	r3, r3, #21
 8002012:	4013      	ands	r3, r2
 8002014:	d109      	bne.n	800202a <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002016:	4b89      	ldr	r3, [pc, #548]	; (800223c <HAL_RCC_OscConfig+0x680>)
 8002018:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800201a:	4b88      	ldr	r3, [pc, #544]	; (800223c <HAL_RCC_OscConfig+0x680>)
 800201c:	2180      	movs	r1, #128	; 0x80
 800201e:	0549      	lsls	r1, r1, #21
 8002020:	430a      	orrs	r2, r1
 8002022:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002024:	183b      	adds	r3, r7, r0
 8002026:	2201      	movs	r2, #1
 8002028:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800202a:	4b87      	ldr	r3, [pc, #540]	; (8002248 <HAL_RCC_OscConfig+0x68c>)
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	2380      	movs	r3, #128	; 0x80
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	4013      	ands	r3, r2
 8002034:	d11a      	bne.n	800206c <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002036:	4b84      	ldr	r3, [pc, #528]	; (8002248 <HAL_RCC_OscConfig+0x68c>)
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	4b83      	ldr	r3, [pc, #524]	; (8002248 <HAL_RCC_OscConfig+0x68c>)
 800203c:	2180      	movs	r1, #128	; 0x80
 800203e:	0049      	lsls	r1, r1, #1
 8002040:	430a      	orrs	r2, r1
 8002042:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002044:	f7ff faae 	bl	80015a4 <HAL_GetTick>
 8002048:	0003      	movs	r3, r0
 800204a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800204c:	e008      	b.n	8002060 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800204e:	f7ff faa9 	bl	80015a4 <HAL_GetTick>
 8002052:	0002      	movs	r2, r0
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b64      	cmp	r3, #100	; 0x64
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e123      	b.n	80022a8 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002060:	4b79      	ldr	r3, [pc, #484]	; (8002248 <HAL_RCC_OscConfig+0x68c>)
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	2380      	movs	r3, #128	; 0x80
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	4013      	ands	r3, r2
 800206a:	d0f0      	beq.n	800204e <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689a      	ldr	r2, [r3, #8]
 8002070:	2380      	movs	r3, #128	; 0x80
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	429a      	cmp	r2, r3
 8002076:	d107      	bne.n	8002088 <HAL_RCC_OscConfig+0x4cc>
 8002078:	4b70      	ldr	r3, [pc, #448]	; (800223c <HAL_RCC_OscConfig+0x680>)
 800207a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800207c:	4b6f      	ldr	r3, [pc, #444]	; (800223c <HAL_RCC_OscConfig+0x680>)
 800207e:	2180      	movs	r1, #128	; 0x80
 8002080:	0049      	lsls	r1, r1, #1
 8002082:	430a      	orrs	r2, r1
 8002084:	651a      	str	r2, [r3, #80]	; 0x50
 8002086:	e031      	b.n	80020ec <HAL_RCC_OscConfig+0x530>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d10c      	bne.n	80020aa <HAL_RCC_OscConfig+0x4ee>
 8002090:	4b6a      	ldr	r3, [pc, #424]	; (800223c <HAL_RCC_OscConfig+0x680>)
 8002092:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002094:	4b69      	ldr	r3, [pc, #420]	; (800223c <HAL_RCC_OscConfig+0x680>)
 8002096:	496b      	ldr	r1, [pc, #428]	; (8002244 <HAL_RCC_OscConfig+0x688>)
 8002098:	400a      	ands	r2, r1
 800209a:	651a      	str	r2, [r3, #80]	; 0x50
 800209c:	4b67      	ldr	r3, [pc, #412]	; (800223c <HAL_RCC_OscConfig+0x680>)
 800209e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020a0:	4b66      	ldr	r3, [pc, #408]	; (800223c <HAL_RCC_OscConfig+0x680>)
 80020a2:	496a      	ldr	r1, [pc, #424]	; (800224c <HAL_RCC_OscConfig+0x690>)
 80020a4:	400a      	ands	r2, r1
 80020a6:	651a      	str	r2, [r3, #80]	; 0x50
 80020a8:	e020      	b.n	80020ec <HAL_RCC_OscConfig+0x530>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	689a      	ldr	r2, [r3, #8]
 80020ae:	23a0      	movs	r3, #160	; 0xa0
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d10e      	bne.n	80020d4 <HAL_RCC_OscConfig+0x518>
 80020b6:	4b61      	ldr	r3, [pc, #388]	; (800223c <HAL_RCC_OscConfig+0x680>)
 80020b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020ba:	4b60      	ldr	r3, [pc, #384]	; (800223c <HAL_RCC_OscConfig+0x680>)
 80020bc:	2180      	movs	r1, #128	; 0x80
 80020be:	00c9      	lsls	r1, r1, #3
 80020c0:	430a      	orrs	r2, r1
 80020c2:	651a      	str	r2, [r3, #80]	; 0x50
 80020c4:	4b5d      	ldr	r3, [pc, #372]	; (800223c <HAL_RCC_OscConfig+0x680>)
 80020c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020c8:	4b5c      	ldr	r3, [pc, #368]	; (800223c <HAL_RCC_OscConfig+0x680>)
 80020ca:	2180      	movs	r1, #128	; 0x80
 80020cc:	0049      	lsls	r1, r1, #1
 80020ce:	430a      	orrs	r2, r1
 80020d0:	651a      	str	r2, [r3, #80]	; 0x50
 80020d2:	e00b      	b.n	80020ec <HAL_RCC_OscConfig+0x530>
 80020d4:	4b59      	ldr	r3, [pc, #356]	; (800223c <HAL_RCC_OscConfig+0x680>)
 80020d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020d8:	4b58      	ldr	r3, [pc, #352]	; (800223c <HAL_RCC_OscConfig+0x680>)
 80020da:	495a      	ldr	r1, [pc, #360]	; (8002244 <HAL_RCC_OscConfig+0x688>)
 80020dc:	400a      	ands	r2, r1
 80020de:	651a      	str	r2, [r3, #80]	; 0x50
 80020e0:	4b56      	ldr	r3, [pc, #344]	; (800223c <HAL_RCC_OscConfig+0x680>)
 80020e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020e4:	4b55      	ldr	r3, [pc, #340]	; (800223c <HAL_RCC_OscConfig+0x680>)
 80020e6:	4959      	ldr	r1, [pc, #356]	; (800224c <HAL_RCC_OscConfig+0x690>)
 80020e8:	400a      	ands	r2, r1
 80020ea:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d015      	beq.n	8002120 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f4:	f7ff fa56 	bl	80015a4 <HAL_GetTick>
 80020f8:	0003      	movs	r3, r0
 80020fa:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80020fc:	e009      	b.n	8002112 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020fe:	f7ff fa51 	bl	80015a4 <HAL_GetTick>
 8002102:	0002      	movs	r2, r0
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	4a51      	ldr	r2, [pc, #324]	; (8002250 <HAL_RCC_OscConfig+0x694>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e0ca      	b.n	80022a8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002112:	4b4a      	ldr	r3, [pc, #296]	; (800223c <HAL_RCC_OscConfig+0x680>)
 8002114:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002116:	2380      	movs	r3, #128	; 0x80
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4013      	ands	r3, r2
 800211c:	d0ef      	beq.n	80020fe <HAL_RCC_OscConfig+0x542>
 800211e:	e014      	b.n	800214a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002120:	f7ff fa40 	bl	80015a4 <HAL_GetTick>
 8002124:	0003      	movs	r3, r0
 8002126:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002128:	e009      	b.n	800213e <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800212a:	f7ff fa3b 	bl	80015a4 <HAL_GetTick>
 800212e:	0002      	movs	r2, r0
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	4a46      	ldr	r2, [pc, #280]	; (8002250 <HAL_RCC_OscConfig+0x694>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e0b4      	b.n	80022a8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800213e:	4b3f      	ldr	r3, [pc, #252]	; (800223c <HAL_RCC_OscConfig+0x680>)
 8002140:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002142:	2380      	movs	r3, #128	; 0x80
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4013      	ands	r3, r2
 8002148:	d1ef      	bne.n	800212a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800214a:	2323      	movs	r3, #35	; 0x23
 800214c:	18fb      	adds	r3, r7, r3
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d105      	bne.n	8002160 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002154:	4b39      	ldr	r3, [pc, #228]	; (800223c <HAL_RCC_OscConfig+0x680>)
 8002156:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002158:	4b38      	ldr	r3, [pc, #224]	; (800223c <HAL_RCC_OscConfig+0x680>)
 800215a:	493e      	ldr	r1, [pc, #248]	; (8002254 <HAL_RCC_OscConfig+0x698>)
 800215c:	400a      	ands	r2, r1
 800215e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002164:	2b00      	cmp	r3, #0
 8002166:	d100      	bne.n	800216a <HAL_RCC_OscConfig+0x5ae>
 8002168:	e09d      	b.n	80022a6 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	2b0c      	cmp	r3, #12
 800216e:	d100      	bne.n	8002172 <HAL_RCC_OscConfig+0x5b6>
 8002170:	e076      	b.n	8002260 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002176:	2b02      	cmp	r3, #2
 8002178:	d145      	bne.n	8002206 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800217a:	4b30      	ldr	r3, [pc, #192]	; (800223c <HAL_RCC_OscConfig+0x680>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	4b2f      	ldr	r3, [pc, #188]	; (800223c <HAL_RCC_OscConfig+0x680>)
 8002180:	4935      	ldr	r1, [pc, #212]	; (8002258 <HAL_RCC_OscConfig+0x69c>)
 8002182:	400a      	ands	r2, r1
 8002184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002186:	f7ff fa0d 	bl	80015a4 <HAL_GetTick>
 800218a:	0003      	movs	r3, r0
 800218c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002190:	f7ff fa08 	bl	80015a4 <HAL_GetTick>
 8002194:	0002      	movs	r2, r0
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e082      	b.n	80022a8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80021a2:	4b26      	ldr	r3, [pc, #152]	; (800223c <HAL_RCC_OscConfig+0x680>)
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	2380      	movs	r3, #128	; 0x80
 80021a8:	049b      	lsls	r3, r3, #18
 80021aa:	4013      	ands	r3, r2
 80021ac:	d1f0      	bne.n	8002190 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021ae:	4b23      	ldr	r3, [pc, #140]	; (800223c <HAL_RCC_OscConfig+0x680>)
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	4a2a      	ldr	r2, [pc, #168]	; (800225c <HAL_RCC_OscConfig+0x6a0>)
 80021b4:	4013      	ands	r3, r2
 80021b6:	0019      	movs	r1, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c0:	431a      	orrs	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	431a      	orrs	r2, r3
 80021c8:	4b1c      	ldr	r3, [pc, #112]	; (800223c <HAL_RCC_OscConfig+0x680>)
 80021ca:	430a      	orrs	r2, r1
 80021cc:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021ce:	4b1b      	ldr	r3, [pc, #108]	; (800223c <HAL_RCC_OscConfig+0x680>)
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	4b1a      	ldr	r3, [pc, #104]	; (800223c <HAL_RCC_OscConfig+0x680>)
 80021d4:	2180      	movs	r1, #128	; 0x80
 80021d6:	0449      	lsls	r1, r1, #17
 80021d8:	430a      	orrs	r2, r1
 80021da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021dc:	f7ff f9e2 	bl	80015a4 <HAL_GetTick>
 80021e0:	0003      	movs	r3, r0
 80021e2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80021e4:	e008      	b.n	80021f8 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021e6:	f7ff f9dd 	bl	80015a4 <HAL_GetTick>
 80021ea:	0002      	movs	r2, r0
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e057      	b.n	80022a8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80021f8:	4b10      	ldr	r3, [pc, #64]	; (800223c <HAL_RCC_OscConfig+0x680>)
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	2380      	movs	r3, #128	; 0x80
 80021fe:	049b      	lsls	r3, r3, #18
 8002200:	4013      	ands	r3, r2
 8002202:	d0f0      	beq.n	80021e6 <HAL_RCC_OscConfig+0x62a>
 8002204:	e04f      	b.n	80022a6 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002206:	4b0d      	ldr	r3, [pc, #52]	; (800223c <HAL_RCC_OscConfig+0x680>)
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	4b0c      	ldr	r3, [pc, #48]	; (800223c <HAL_RCC_OscConfig+0x680>)
 800220c:	4912      	ldr	r1, [pc, #72]	; (8002258 <HAL_RCC_OscConfig+0x69c>)
 800220e:	400a      	ands	r2, r1
 8002210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002212:	f7ff f9c7 	bl	80015a4 <HAL_GetTick>
 8002216:	0003      	movs	r3, r0
 8002218:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800221a:	e008      	b.n	800222e <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800221c:	f7ff f9c2 	bl	80015a4 <HAL_GetTick>
 8002220:	0002      	movs	r2, r0
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e03c      	b.n	80022a8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800222e:	4b03      	ldr	r3, [pc, #12]	; (800223c <HAL_RCC_OscConfig+0x680>)
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	2380      	movs	r3, #128	; 0x80
 8002234:	049b      	lsls	r3, r3, #18
 8002236:	4013      	ands	r3, r2
 8002238:	d1f0      	bne.n	800221c <HAL_RCC_OscConfig+0x660>
 800223a:	e034      	b.n	80022a6 <HAL_RCC_OscConfig+0x6ea>
 800223c:	40021000 	.word	0x40021000
 8002240:	ffff1fff 	.word	0xffff1fff
 8002244:	fffffeff 	.word	0xfffffeff
 8002248:	40007000 	.word	0x40007000
 800224c:	fffffbff 	.word	0xfffffbff
 8002250:	00001388 	.word	0x00001388
 8002254:	efffffff 	.word	0xefffffff
 8002258:	feffffff 	.word	0xfeffffff
 800225c:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002264:	2b01      	cmp	r3, #1
 8002266:	d101      	bne.n	800226c <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e01d      	b.n	80022a8 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800226c:	4b10      	ldr	r3, [pc, #64]	; (80022b0 <HAL_RCC_OscConfig+0x6f4>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	2380      	movs	r3, #128	; 0x80
 8002276:	025b      	lsls	r3, r3, #9
 8002278:	401a      	ands	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227e:	429a      	cmp	r2, r3
 8002280:	d10f      	bne.n	80022a2 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	23f0      	movs	r3, #240	; 0xf0
 8002286:	039b      	lsls	r3, r3, #14
 8002288:	401a      	ands	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800228e:	429a      	cmp	r2, r3
 8002290:	d107      	bne.n	80022a2 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	23c0      	movs	r3, #192	; 0xc0
 8002296:	041b      	lsls	r3, r3, #16
 8002298:	401a      	ands	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800229e:	429a      	cmp	r2, r3
 80022a0:	d001      	beq.n	80022a6 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e000      	b.n	80022a8 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	0018      	movs	r0, r3
 80022aa:	46bd      	mov	sp, r7
 80022ac:	b00a      	add	sp, #40	; 0x28
 80022ae:	bdb0      	pop	{r4, r5, r7, pc}
 80022b0:	40021000 	.word	0x40021000

080022b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022b4:	b5b0      	push	{r4, r5, r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d101      	bne.n	80022c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e128      	b.n	800251a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022c8:	4b96      	ldr	r3, [pc, #600]	; (8002524 <HAL_RCC_ClockConfig+0x270>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2201      	movs	r2, #1
 80022ce:	4013      	ands	r3, r2
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d91e      	bls.n	8002314 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022d6:	4b93      	ldr	r3, [pc, #588]	; (8002524 <HAL_RCC_ClockConfig+0x270>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2201      	movs	r2, #1
 80022dc:	4393      	bics	r3, r2
 80022de:	0019      	movs	r1, r3
 80022e0:	4b90      	ldr	r3, [pc, #576]	; (8002524 <HAL_RCC_ClockConfig+0x270>)
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	430a      	orrs	r2, r1
 80022e6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80022e8:	f7ff f95c 	bl	80015a4 <HAL_GetTick>
 80022ec:	0003      	movs	r3, r0
 80022ee:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022f0:	e009      	b.n	8002306 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022f2:	f7ff f957 	bl	80015a4 <HAL_GetTick>
 80022f6:	0002      	movs	r2, r0
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	4a8a      	ldr	r2, [pc, #552]	; (8002528 <HAL_RCC_ClockConfig+0x274>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e109      	b.n	800251a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002306:	4b87      	ldr	r3, [pc, #540]	; (8002524 <HAL_RCC_ClockConfig+0x270>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2201      	movs	r2, #1
 800230c:	4013      	ands	r3, r2
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	429a      	cmp	r2, r3
 8002312:	d1ee      	bne.n	80022f2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2202      	movs	r2, #2
 800231a:	4013      	ands	r3, r2
 800231c:	d009      	beq.n	8002332 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800231e:	4b83      	ldr	r3, [pc, #524]	; (800252c <HAL_RCC_ClockConfig+0x278>)
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	22f0      	movs	r2, #240	; 0xf0
 8002324:	4393      	bics	r3, r2
 8002326:	0019      	movs	r1, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	4b7f      	ldr	r3, [pc, #508]	; (800252c <HAL_RCC_ClockConfig+0x278>)
 800232e:	430a      	orrs	r2, r1
 8002330:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2201      	movs	r2, #1
 8002338:	4013      	ands	r3, r2
 800233a:	d100      	bne.n	800233e <HAL_RCC_ClockConfig+0x8a>
 800233c:	e089      	b.n	8002452 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	2b02      	cmp	r3, #2
 8002344:	d107      	bne.n	8002356 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002346:	4b79      	ldr	r3, [pc, #484]	; (800252c <HAL_RCC_ClockConfig+0x278>)
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	2380      	movs	r3, #128	; 0x80
 800234c:	029b      	lsls	r3, r3, #10
 800234e:	4013      	ands	r3, r2
 8002350:	d120      	bne.n	8002394 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e0e1      	b.n	800251a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	2b03      	cmp	r3, #3
 800235c:	d107      	bne.n	800236e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800235e:	4b73      	ldr	r3, [pc, #460]	; (800252c <HAL_RCC_ClockConfig+0x278>)
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	2380      	movs	r3, #128	; 0x80
 8002364:	049b      	lsls	r3, r3, #18
 8002366:	4013      	ands	r3, r2
 8002368:	d114      	bne.n	8002394 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e0d5      	b.n	800251a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d106      	bne.n	8002384 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002376:	4b6d      	ldr	r3, [pc, #436]	; (800252c <HAL_RCC_ClockConfig+0x278>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2204      	movs	r2, #4
 800237c:	4013      	ands	r3, r2
 800237e:	d109      	bne.n	8002394 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e0ca      	b.n	800251a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002384:	4b69      	ldr	r3, [pc, #420]	; (800252c <HAL_RCC_ClockConfig+0x278>)
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	2380      	movs	r3, #128	; 0x80
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	4013      	ands	r3, r2
 800238e:	d101      	bne.n	8002394 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e0c2      	b.n	800251a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002394:	4b65      	ldr	r3, [pc, #404]	; (800252c <HAL_RCC_ClockConfig+0x278>)
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	2203      	movs	r2, #3
 800239a:	4393      	bics	r3, r2
 800239c:	0019      	movs	r1, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	4b62      	ldr	r3, [pc, #392]	; (800252c <HAL_RCC_ClockConfig+0x278>)
 80023a4:	430a      	orrs	r2, r1
 80023a6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023a8:	f7ff f8fc 	bl	80015a4 <HAL_GetTick>
 80023ac:	0003      	movs	r3, r0
 80023ae:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d111      	bne.n	80023dc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80023b8:	e009      	b.n	80023ce <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023ba:	f7ff f8f3 	bl	80015a4 <HAL_GetTick>
 80023be:	0002      	movs	r2, r0
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	4a58      	ldr	r2, [pc, #352]	; (8002528 <HAL_RCC_ClockConfig+0x274>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e0a5      	b.n	800251a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80023ce:	4b57      	ldr	r3, [pc, #348]	; (800252c <HAL_RCC_ClockConfig+0x278>)
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	220c      	movs	r2, #12
 80023d4:	4013      	ands	r3, r2
 80023d6:	2b08      	cmp	r3, #8
 80023d8:	d1ef      	bne.n	80023ba <HAL_RCC_ClockConfig+0x106>
 80023da:	e03a      	b.n	8002452 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b03      	cmp	r3, #3
 80023e2:	d111      	bne.n	8002408 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023e4:	e009      	b.n	80023fa <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023e6:	f7ff f8dd 	bl	80015a4 <HAL_GetTick>
 80023ea:	0002      	movs	r2, r0
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	4a4d      	ldr	r2, [pc, #308]	; (8002528 <HAL_RCC_ClockConfig+0x274>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e08f      	b.n	800251a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023fa:	4b4c      	ldr	r3, [pc, #304]	; (800252c <HAL_RCC_ClockConfig+0x278>)
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	220c      	movs	r2, #12
 8002400:	4013      	ands	r3, r2
 8002402:	2b0c      	cmp	r3, #12
 8002404:	d1ef      	bne.n	80023e6 <HAL_RCC_ClockConfig+0x132>
 8002406:	e024      	b.n	8002452 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d11b      	bne.n	8002448 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002410:	e009      	b.n	8002426 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002412:	f7ff f8c7 	bl	80015a4 <HAL_GetTick>
 8002416:	0002      	movs	r2, r0
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	4a42      	ldr	r2, [pc, #264]	; (8002528 <HAL_RCC_ClockConfig+0x274>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e079      	b.n	800251a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002426:	4b41      	ldr	r3, [pc, #260]	; (800252c <HAL_RCC_ClockConfig+0x278>)
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	220c      	movs	r2, #12
 800242c:	4013      	ands	r3, r2
 800242e:	2b04      	cmp	r3, #4
 8002430:	d1ef      	bne.n	8002412 <HAL_RCC_ClockConfig+0x15e>
 8002432:	e00e      	b.n	8002452 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002434:	f7ff f8b6 	bl	80015a4 <HAL_GetTick>
 8002438:	0002      	movs	r2, r0
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	4a3a      	ldr	r2, [pc, #232]	; (8002528 <HAL_RCC_ClockConfig+0x274>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e068      	b.n	800251a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002448:	4b38      	ldr	r3, [pc, #224]	; (800252c <HAL_RCC_ClockConfig+0x278>)
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	220c      	movs	r2, #12
 800244e:	4013      	ands	r3, r2
 8002450:	d1f0      	bne.n	8002434 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002452:	4b34      	ldr	r3, [pc, #208]	; (8002524 <HAL_RCC_ClockConfig+0x270>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2201      	movs	r2, #1
 8002458:	4013      	ands	r3, r2
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	429a      	cmp	r2, r3
 800245e:	d21e      	bcs.n	800249e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002460:	4b30      	ldr	r3, [pc, #192]	; (8002524 <HAL_RCC_ClockConfig+0x270>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2201      	movs	r2, #1
 8002466:	4393      	bics	r3, r2
 8002468:	0019      	movs	r1, r3
 800246a:	4b2e      	ldr	r3, [pc, #184]	; (8002524 <HAL_RCC_ClockConfig+0x270>)
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	430a      	orrs	r2, r1
 8002470:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002472:	f7ff f897 	bl	80015a4 <HAL_GetTick>
 8002476:	0003      	movs	r3, r0
 8002478:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800247a:	e009      	b.n	8002490 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800247c:	f7ff f892 	bl	80015a4 <HAL_GetTick>
 8002480:	0002      	movs	r2, r0
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	4a28      	ldr	r2, [pc, #160]	; (8002528 <HAL_RCC_ClockConfig+0x274>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d901      	bls.n	8002490 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e044      	b.n	800251a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002490:	4b24      	ldr	r3, [pc, #144]	; (8002524 <HAL_RCC_ClockConfig+0x270>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2201      	movs	r2, #1
 8002496:	4013      	ands	r3, r2
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	429a      	cmp	r2, r3
 800249c:	d1ee      	bne.n	800247c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2204      	movs	r2, #4
 80024a4:	4013      	ands	r3, r2
 80024a6:	d009      	beq.n	80024bc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024a8:	4b20      	ldr	r3, [pc, #128]	; (800252c <HAL_RCC_ClockConfig+0x278>)
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	4a20      	ldr	r2, [pc, #128]	; (8002530 <HAL_RCC_ClockConfig+0x27c>)
 80024ae:	4013      	ands	r3, r2
 80024b0:	0019      	movs	r1, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68da      	ldr	r2, [r3, #12]
 80024b6:	4b1d      	ldr	r3, [pc, #116]	; (800252c <HAL_RCC_ClockConfig+0x278>)
 80024b8:	430a      	orrs	r2, r1
 80024ba:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2208      	movs	r2, #8
 80024c2:	4013      	ands	r3, r2
 80024c4:	d00a      	beq.n	80024dc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024c6:	4b19      	ldr	r3, [pc, #100]	; (800252c <HAL_RCC_ClockConfig+0x278>)
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	4a1a      	ldr	r2, [pc, #104]	; (8002534 <HAL_RCC_ClockConfig+0x280>)
 80024cc:	4013      	ands	r3, r2
 80024ce:	0019      	movs	r1, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	691b      	ldr	r3, [r3, #16]
 80024d4:	00da      	lsls	r2, r3, #3
 80024d6:	4b15      	ldr	r3, [pc, #84]	; (800252c <HAL_RCC_ClockConfig+0x278>)
 80024d8:	430a      	orrs	r2, r1
 80024da:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024dc:	f000 f832 	bl	8002544 <HAL_RCC_GetSysClockFreq>
 80024e0:	0001      	movs	r1, r0
 80024e2:	4b12      	ldr	r3, [pc, #72]	; (800252c <HAL_RCC_ClockConfig+0x278>)
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	091b      	lsrs	r3, r3, #4
 80024e8:	220f      	movs	r2, #15
 80024ea:	4013      	ands	r3, r2
 80024ec:	4a12      	ldr	r2, [pc, #72]	; (8002538 <HAL_RCC_ClockConfig+0x284>)
 80024ee:	5cd3      	ldrb	r3, [r2, r3]
 80024f0:	000a      	movs	r2, r1
 80024f2:	40da      	lsrs	r2, r3
 80024f4:	4b11      	ldr	r3, [pc, #68]	; (800253c <HAL_RCC_ClockConfig+0x288>)
 80024f6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80024f8:	4b11      	ldr	r3, [pc, #68]	; (8002540 <HAL_RCC_ClockConfig+0x28c>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	250b      	movs	r5, #11
 80024fe:	197c      	adds	r4, r7, r5
 8002500:	0018      	movs	r0, r3
 8002502:	f7ff f809 	bl	8001518 <HAL_InitTick>
 8002506:	0003      	movs	r3, r0
 8002508:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800250a:	197b      	adds	r3, r7, r5
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d002      	beq.n	8002518 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002512:	197b      	adds	r3, r7, r5
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	e000      	b.n	800251a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	0018      	movs	r0, r3
 800251c:	46bd      	mov	sp, r7
 800251e:	b004      	add	sp, #16
 8002520:	bdb0      	pop	{r4, r5, r7, pc}
 8002522:	46c0      	nop			; (mov r8, r8)
 8002524:	40022000 	.word	0x40022000
 8002528:	00001388 	.word	0x00001388
 800252c:	40021000 	.word	0x40021000
 8002530:	fffff8ff 	.word	0xfffff8ff
 8002534:	ffffc7ff 	.word	0xffffc7ff
 8002538:	0800769c 	.word	0x0800769c
 800253c:	2000000c 	.word	0x2000000c
 8002540:	20000010 	.word	0x20000010

08002544 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002544:	b5b0      	push	{r4, r5, r7, lr}
 8002546:	b08e      	sub	sp, #56	; 0x38
 8002548:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800254a:	4b4c      	ldr	r3, [pc, #304]	; (800267c <HAL_RCC_GetSysClockFreq+0x138>)
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002550:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002552:	230c      	movs	r3, #12
 8002554:	4013      	ands	r3, r2
 8002556:	2b0c      	cmp	r3, #12
 8002558:	d014      	beq.n	8002584 <HAL_RCC_GetSysClockFreq+0x40>
 800255a:	d900      	bls.n	800255e <HAL_RCC_GetSysClockFreq+0x1a>
 800255c:	e07b      	b.n	8002656 <HAL_RCC_GetSysClockFreq+0x112>
 800255e:	2b04      	cmp	r3, #4
 8002560:	d002      	beq.n	8002568 <HAL_RCC_GetSysClockFreq+0x24>
 8002562:	2b08      	cmp	r3, #8
 8002564:	d00b      	beq.n	800257e <HAL_RCC_GetSysClockFreq+0x3a>
 8002566:	e076      	b.n	8002656 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002568:	4b44      	ldr	r3, [pc, #272]	; (800267c <HAL_RCC_GetSysClockFreq+0x138>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2210      	movs	r2, #16
 800256e:	4013      	ands	r3, r2
 8002570:	d002      	beq.n	8002578 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002572:	4b43      	ldr	r3, [pc, #268]	; (8002680 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002574:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002576:	e07c      	b.n	8002672 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002578:	4b42      	ldr	r3, [pc, #264]	; (8002684 <HAL_RCC_GetSysClockFreq+0x140>)
 800257a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800257c:	e079      	b.n	8002672 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800257e:	4b42      	ldr	r3, [pc, #264]	; (8002688 <HAL_RCC_GetSysClockFreq+0x144>)
 8002580:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002582:	e076      	b.n	8002672 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002586:	0c9a      	lsrs	r2, r3, #18
 8002588:	230f      	movs	r3, #15
 800258a:	401a      	ands	r2, r3
 800258c:	4b3f      	ldr	r3, [pc, #252]	; (800268c <HAL_RCC_GetSysClockFreq+0x148>)
 800258e:	5c9b      	ldrb	r3, [r3, r2]
 8002590:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002594:	0d9a      	lsrs	r2, r3, #22
 8002596:	2303      	movs	r3, #3
 8002598:	4013      	ands	r3, r2
 800259a:	3301      	adds	r3, #1
 800259c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800259e:	4b37      	ldr	r3, [pc, #220]	; (800267c <HAL_RCC_GetSysClockFreq+0x138>)
 80025a0:	68da      	ldr	r2, [r3, #12]
 80025a2:	2380      	movs	r3, #128	; 0x80
 80025a4:	025b      	lsls	r3, r3, #9
 80025a6:	4013      	ands	r3, r2
 80025a8:	d01a      	beq.n	80025e0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80025aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ac:	61bb      	str	r3, [r7, #24]
 80025ae:	2300      	movs	r3, #0
 80025b0:	61fb      	str	r3, [r7, #28]
 80025b2:	4a35      	ldr	r2, [pc, #212]	; (8002688 <HAL_RCC_GetSysClockFreq+0x144>)
 80025b4:	2300      	movs	r3, #0
 80025b6:	69b8      	ldr	r0, [r7, #24]
 80025b8:	69f9      	ldr	r1, [r7, #28]
 80025ba:	f7fd ff7b 	bl	80004b4 <__aeabi_lmul>
 80025be:	0002      	movs	r2, r0
 80025c0:	000b      	movs	r3, r1
 80025c2:	0010      	movs	r0, r2
 80025c4:	0019      	movs	r1, r3
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	613b      	str	r3, [r7, #16]
 80025ca:	2300      	movs	r3, #0
 80025cc:	617b      	str	r3, [r7, #20]
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	f7fd ff4f 	bl	8000474 <__aeabi_uldivmod>
 80025d6:	0002      	movs	r2, r0
 80025d8:	000b      	movs	r3, r1
 80025da:	0013      	movs	r3, r2
 80025dc:	637b      	str	r3, [r7, #52]	; 0x34
 80025de:	e037      	b.n	8002650 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80025e0:	4b26      	ldr	r3, [pc, #152]	; (800267c <HAL_RCC_GetSysClockFreq+0x138>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2210      	movs	r2, #16
 80025e6:	4013      	ands	r3, r2
 80025e8:	d01a      	beq.n	8002620 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80025ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ec:	60bb      	str	r3, [r7, #8]
 80025ee:	2300      	movs	r3, #0
 80025f0:	60fb      	str	r3, [r7, #12]
 80025f2:	4a23      	ldr	r2, [pc, #140]	; (8002680 <HAL_RCC_GetSysClockFreq+0x13c>)
 80025f4:	2300      	movs	r3, #0
 80025f6:	68b8      	ldr	r0, [r7, #8]
 80025f8:	68f9      	ldr	r1, [r7, #12]
 80025fa:	f7fd ff5b 	bl	80004b4 <__aeabi_lmul>
 80025fe:	0002      	movs	r2, r0
 8002600:	000b      	movs	r3, r1
 8002602:	0010      	movs	r0, r2
 8002604:	0019      	movs	r1, r3
 8002606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002608:	603b      	str	r3, [r7, #0]
 800260a:	2300      	movs	r3, #0
 800260c:	607b      	str	r3, [r7, #4]
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f7fd ff2f 	bl	8000474 <__aeabi_uldivmod>
 8002616:	0002      	movs	r2, r0
 8002618:	000b      	movs	r3, r1
 800261a:	0013      	movs	r3, r2
 800261c:	637b      	str	r3, [r7, #52]	; 0x34
 800261e:	e017      	b.n	8002650 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002622:	0018      	movs	r0, r3
 8002624:	2300      	movs	r3, #0
 8002626:	0019      	movs	r1, r3
 8002628:	4a16      	ldr	r2, [pc, #88]	; (8002684 <HAL_RCC_GetSysClockFreq+0x140>)
 800262a:	2300      	movs	r3, #0
 800262c:	f7fd ff42 	bl	80004b4 <__aeabi_lmul>
 8002630:	0002      	movs	r2, r0
 8002632:	000b      	movs	r3, r1
 8002634:	0010      	movs	r0, r2
 8002636:	0019      	movs	r1, r3
 8002638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263a:	001c      	movs	r4, r3
 800263c:	2300      	movs	r3, #0
 800263e:	001d      	movs	r5, r3
 8002640:	0022      	movs	r2, r4
 8002642:	002b      	movs	r3, r5
 8002644:	f7fd ff16 	bl	8000474 <__aeabi_uldivmod>
 8002648:	0002      	movs	r2, r0
 800264a:	000b      	movs	r3, r1
 800264c:	0013      	movs	r3, r2
 800264e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002652:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002654:	e00d      	b.n	8002672 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002656:	4b09      	ldr	r3, [pc, #36]	; (800267c <HAL_RCC_GetSysClockFreq+0x138>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	0b5b      	lsrs	r3, r3, #13
 800265c:	2207      	movs	r2, #7
 800265e:	4013      	ands	r3, r2
 8002660:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002662:	6a3b      	ldr	r3, [r7, #32]
 8002664:	3301      	adds	r3, #1
 8002666:	2280      	movs	r2, #128	; 0x80
 8002668:	0212      	lsls	r2, r2, #8
 800266a:	409a      	lsls	r2, r3
 800266c:	0013      	movs	r3, r2
 800266e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002670:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002674:	0018      	movs	r0, r3
 8002676:	46bd      	mov	sp, r7
 8002678:	b00e      	add	sp, #56	; 0x38
 800267a:	bdb0      	pop	{r4, r5, r7, pc}
 800267c:	40021000 	.word	0x40021000
 8002680:	003d0900 	.word	0x003d0900
 8002684:	00f42400 	.word	0x00f42400
 8002688:	007a1200 	.word	0x007a1200
 800268c:	080076b4 	.word	0x080076b4

08002690 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002694:	4b02      	ldr	r3, [pc, #8]	; (80026a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002696:	681b      	ldr	r3, [r3, #0]
}
 8002698:	0018      	movs	r0, r3
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	46c0      	nop			; (mov r8, r8)
 80026a0:	2000000c 	.word	0x2000000c

080026a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026a8:	f7ff fff2 	bl	8002690 <HAL_RCC_GetHCLKFreq>
 80026ac:	0001      	movs	r1, r0
 80026ae:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	0a1b      	lsrs	r3, r3, #8
 80026b4:	2207      	movs	r2, #7
 80026b6:	4013      	ands	r3, r2
 80026b8:	4a04      	ldr	r2, [pc, #16]	; (80026cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80026ba:	5cd3      	ldrb	r3, [r2, r3]
 80026bc:	40d9      	lsrs	r1, r3
 80026be:	000b      	movs	r3, r1
}
 80026c0:	0018      	movs	r0, r3
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	46c0      	nop			; (mov r8, r8)
 80026c8:	40021000 	.word	0x40021000
 80026cc:	080076ac 	.word	0x080076ac

080026d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026d4:	f7ff ffdc 	bl	8002690 <HAL_RCC_GetHCLKFreq>
 80026d8:	0001      	movs	r1, r0
 80026da:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	0adb      	lsrs	r3, r3, #11
 80026e0:	2207      	movs	r2, #7
 80026e2:	4013      	ands	r3, r2
 80026e4:	4a04      	ldr	r2, [pc, #16]	; (80026f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80026e6:	5cd3      	ldrb	r3, [r2, r3]
 80026e8:	40d9      	lsrs	r1, r3
 80026ea:	000b      	movs	r3, r1
}
 80026ec:	0018      	movs	r0, r3
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	46c0      	nop			; (mov r8, r8)
 80026f4:	40021000 	.word	0x40021000
 80026f8:	080076ac 	.word	0x080076ac

080026fc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002704:	2017      	movs	r0, #23
 8002706:	183b      	adds	r3, r7, r0
 8002708:	2200      	movs	r2, #0
 800270a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2220      	movs	r2, #32
 8002712:	4013      	ands	r3, r2
 8002714:	d100      	bne.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002716:	e0c2      	b.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002718:	4b91      	ldr	r3, [pc, #580]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800271a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800271c:	2380      	movs	r3, #128	; 0x80
 800271e:	055b      	lsls	r3, r3, #21
 8002720:	4013      	ands	r3, r2
 8002722:	d109      	bne.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002724:	4b8e      	ldr	r3, [pc, #568]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002726:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002728:	4b8d      	ldr	r3, [pc, #564]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800272a:	2180      	movs	r1, #128	; 0x80
 800272c:	0549      	lsls	r1, r1, #21
 800272e:	430a      	orrs	r2, r1
 8002730:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002732:	183b      	adds	r3, r7, r0
 8002734:	2201      	movs	r2, #1
 8002736:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002738:	4b8a      	ldr	r3, [pc, #552]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	2380      	movs	r3, #128	; 0x80
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	4013      	ands	r3, r2
 8002742:	d11a      	bne.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002744:	4b87      	ldr	r3, [pc, #540]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	4b86      	ldr	r3, [pc, #536]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800274a:	2180      	movs	r1, #128	; 0x80
 800274c:	0049      	lsls	r1, r1, #1
 800274e:	430a      	orrs	r2, r1
 8002750:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002752:	f7fe ff27 	bl	80015a4 <HAL_GetTick>
 8002756:	0003      	movs	r3, r0
 8002758:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800275a:	e008      	b.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800275c:	f7fe ff22 	bl	80015a4 <HAL_GetTick>
 8002760:	0002      	movs	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b64      	cmp	r3, #100	; 0x64
 8002768:	d901      	bls.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e0f3      	b.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800276e:	4b7d      	ldr	r3, [pc, #500]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	2380      	movs	r3, #128	; 0x80
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	4013      	ands	r3, r2
 8002778:	d0f0      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800277a:	4b79      	ldr	r3, [pc, #484]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	23c0      	movs	r3, #192	; 0xc0
 8002780:	039b      	lsls	r3, r3, #14
 8002782:	4013      	ands	r3, r2
 8002784:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685a      	ldr	r2, [r3, #4]
 800278a:	23c0      	movs	r3, #192	; 0xc0
 800278c:	039b      	lsls	r3, r3, #14
 800278e:	4013      	ands	r3, r2
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	429a      	cmp	r2, r3
 8002794:	d013      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685a      	ldr	r2, [r3, #4]
 800279a:	23c0      	movs	r3, #192	; 0xc0
 800279c:	029b      	lsls	r3, r3, #10
 800279e:	401a      	ands	r2, r3
 80027a0:	23c0      	movs	r3, #192	; 0xc0
 80027a2:	029b      	lsls	r3, r3, #10
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d10a      	bne.n	80027be <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80027a8:	4b6d      	ldr	r3, [pc, #436]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	2380      	movs	r3, #128	; 0x80
 80027ae:	029b      	lsls	r3, r3, #10
 80027b0:	401a      	ands	r2, r3
 80027b2:	2380      	movs	r3, #128	; 0x80
 80027b4:	029b      	lsls	r3, r3, #10
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d101      	bne.n	80027be <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e0cb      	b.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x25a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80027be:	4b68      	ldr	r3, [pc, #416]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80027c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027c2:	23c0      	movs	r3, #192	; 0xc0
 80027c4:	029b      	lsls	r3, r3, #10
 80027c6:	4013      	ands	r3, r2
 80027c8:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d03b      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	23c0      	movs	r3, #192	; 0xc0
 80027d6:	029b      	lsls	r3, r3, #10
 80027d8:	4013      	ands	r3, r2
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d033      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2220      	movs	r2, #32
 80027e6:	4013      	ands	r3, r2
 80027e8:	d02e      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80027ea:	4b5d      	ldr	r3, [pc, #372]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80027ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027ee:	4a5e      	ldr	r2, [pc, #376]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80027f0:	4013      	ands	r3, r2
 80027f2:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027f4:	4b5a      	ldr	r3, [pc, #360]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80027f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027f8:	4b59      	ldr	r3, [pc, #356]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80027fa:	2180      	movs	r1, #128	; 0x80
 80027fc:	0309      	lsls	r1, r1, #12
 80027fe:	430a      	orrs	r2, r1
 8002800:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002802:	4b57      	ldr	r3, [pc, #348]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002804:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002806:	4b56      	ldr	r3, [pc, #344]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002808:	4958      	ldr	r1, [pc, #352]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x270>)
 800280a:	400a      	ands	r2, r1
 800280c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800280e:	4b54      	ldr	r3, [pc, #336]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	2380      	movs	r3, #128	; 0x80
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	4013      	ands	r3, r2
 800281c:	d014      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800281e:	f7fe fec1 	bl	80015a4 <HAL_GetTick>
 8002822:	0003      	movs	r3, r0
 8002824:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002826:	e009      	b.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002828:	f7fe febc 	bl	80015a4 <HAL_GetTick>
 800282c:	0002      	movs	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	4a4f      	ldr	r2, [pc, #316]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d901      	bls.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e08c      	b.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x25a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800283c:	4b48      	ldr	r3, [pc, #288]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800283e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002840:	2380      	movs	r3, #128	; 0x80
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	4013      	ands	r3, r2
 8002846:	d0ef      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685a      	ldr	r2, [r3, #4]
 800284c:	23c0      	movs	r3, #192	; 0xc0
 800284e:	029b      	lsls	r3, r3, #10
 8002850:	401a      	ands	r2, r3
 8002852:	23c0      	movs	r3, #192	; 0xc0
 8002854:	029b      	lsls	r3, r3, #10
 8002856:	429a      	cmp	r2, r3
 8002858:	d10c      	bne.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x178>
 800285a:	4b41      	ldr	r3, [pc, #260]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a45      	ldr	r2, [pc, #276]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8002860:	4013      	ands	r3, r2
 8002862:	0019      	movs	r1, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685a      	ldr	r2, [r3, #4]
 8002868:	23c0      	movs	r3, #192	; 0xc0
 800286a:	039b      	lsls	r3, r3, #14
 800286c:	401a      	ands	r2, r3
 800286e:	4b3c      	ldr	r3, [pc, #240]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002870:	430a      	orrs	r2, r1
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	4b3a      	ldr	r3, [pc, #232]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002876:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685a      	ldr	r2, [r3, #4]
 800287c:	23c0      	movs	r3, #192	; 0xc0
 800287e:	029b      	lsls	r3, r3, #10
 8002880:	401a      	ands	r2, r3
 8002882:	4b37      	ldr	r3, [pc, #220]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002884:	430a      	orrs	r2, r1
 8002886:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002888:	2317      	movs	r3, #23
 800288a:	18fb      	adds	r3, r7, r3
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d105      	bne.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002892:	4b33      	ldr	r3, [pc, #204]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002894:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002896:	4b32      	ldr	r3, [pc, #200]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002898:	4937      	ldr	r1, [pc, #220]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800289a:	400a      	ands	r2, r1
 800289c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2201      	movs	r2, #1
 80028a4:	4013      	ands	r3, r2
 80028a6:	d009      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028a8:	4b2d      	ldr	r3, [pc, #180]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ac:	2203      	movs	r2, #3
 80028ae:	4393      	bics	r3, r2
 80028b0:	0019      	movs	r1, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	689a      	ldr	r2, [r3, #8]
 80028b6:	4b2a      	ldr	r3, [pc, #168]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028b8:	430a      	orrs	r2, r1
 80028ba:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2202      	movs	r2, #2
 80028c2:	4013      	ands	r3, r2
 80028c4:	d009      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028c6:	4b26      	ldr	r3, [pc, #152]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ca:	220c      	movs	r2, #12
 80028cc:	4393      	bics	r3, r2
 80028ce:	0019      	movs	r1, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68da      	ldr	r2, [r3, #12]
 80028d4:	4b22      	ldr	r3, [pc, #136]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028d6:	430a      	orrs	r2, r1
 80028d8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2204      	movs	r2, #4
 80028e0:	4013      	ands	r3, r2
 80028e2:	d009      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028e4:	4b1e      	ldr	r3, [pc, #120]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e8:	4a24      	ldr	r2, [pc, #144]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80028ea:	4013      	ands	r3, r2
 80028ec:	0019      	movs	r1, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	691a      	ldr	r2, [r3, #16]
 80028f2:	4b1b      	ldr	r3, [pc, #108]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028f4:	430a      	orrs	r2, r1
 80028f6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2208      	movs	r2, #8
 80028fe:	4013      	ands	r3, r2
 8002900:	d009      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002902:	4b17      	ldr	r3, [pc, #92]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002906:	4a1e      	ldr	r2, [pc, #120]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002908:	4013      	ands	r3, r2
 800290a:	0019      	movs	r1, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	695a      	ldr	r2, [r3, #20]
 8002910:	4b13      	ldr	r3, [pc, #76]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002912:	430a      	orrs	r2, r1
 8002914:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	2380      	movs	r3, #128	; 0x80
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	4013      	ands	r3, r2
 8002920:	d009      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002922:	4b0f      	ldr	r3, [pc, #60]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002926:	4a10      	ldr	r2, [pc, #64]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002928:	4013      	ands	r3, r2
 800292a:	0019      	movs	r1, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	699a      	ldr	r2, [r3, #24]
 8002930:	4b0b      	ldr	r3, [pc, #44]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002932:	430a      	orrs	r2, r1
 8002934:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2280      	movs	r2, #128	; 0x80
 800293c:	4013      	ands	r3, r2
 800293e:	d009      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002940:	4b07      	ldr	r3, [pc, #28]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002944:	4a0f      	ldr	r2, [pc, #60]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002946:	4013      	ands	r3, r2
 8002948:	0019      	movs	r1, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	69da      	ldr	r2, [r3, #28]
 800294e:	4b04      	ldr	r3, [pc, #16]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002950:	430a      	orrs	r2, r1
 8002952:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	0018      	movs	r0, r3
 8002958:	46bd      	mov	sp, r7
 800295a:	b006      	add	sp, #24
 800295c:	bd80      	pop	{r7, pc}
 800295e:	46c0      	nop			; (mov r8, r8)
 8002960:	40021000 	.word	0x40021000
 8002964:	40007000 	.word	0x40007000
 8002968:	fffcffff 	.word	0xfffcffff
 800296c:	fff7ffff 	.word	0xfff7ffff
 8002970:	00001388 	.word	0x00001388
 8002974:	ffcfffff 	.word	0xffcfffff
 8002978:	efffffff 	.word	0xefffffff
 800297c:	fffff3ff 	.word	0xfffff3ff
 8002980:	ffffcfff 	.word	0xffffcfff
 8002984:	fff3ffff 	.word	0xfff3ffff

08002988 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e08e      	b.n	8002ab8 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2221      	movs	r2, #33	; 0x21
 800299e:	5c9b      	ldrb	r3, [r3, r2]
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d107      	bne.n	80029b6 <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2220      	movs	r2, #32
 80029aa:	2100      	movs	r1, #0
 80029ac:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	0018      	movs	r0, r3
 80029b2:	f7fe fb63 	bl	800107c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2221      	movs	r2, #33	; 0x21
 80029ba:	2102      	movs	r1, #2
 80029bc:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	22ca      	movs	r2, #202	; 0xca
 80029c4:	625a      	str	r2, [r3, #36]	; 0x24
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2253      	movs	r2, #83	; 0x53
 80029cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	0018      	movs	r0, r3
 80029d2:	f000 faba 	bl	8002f4a <RTC_EnterInitMode>
 80029d6:	1e03      	subs	r3, r0, #0
 80029d8:	d009      	beq.n	80029ee <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	22ff      	movs	r2, #255	; 0xff
 80029e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2221      	movs	r2, #33	; 0x21
 80029e6:	2104      	movs	r1, #4
 80029e8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e064      	b.n	8002ab8 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	689a      	ldr	r2, [r3, #8]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4931      	ldr	r1, [pc, #196]	; (8002ac0 <HAL_RTC_Init+0x138>)
 80029fa:	400a      	ands	r2, r1
 80029fc:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	6899      	ldr	r1, [r3, #8]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685a      	ldr	r2, [r3, #4]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	431a      	orrs	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	431a      	orrs	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	68d2      	ldr	r2, [r2, #12]
 8002a24:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	6919      	ldr	r1, [r3, #16]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	041a      	lsls	r2, r3, #16
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	430a      	orrs	r2, r1
 8002a38:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68da      	ldr	r2, [r3, #12]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2180      	movs	r1, #128	; 0x80
 8002a46:	438a      	bics	r2, r1
 8002a48:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2103      	movs	r1, #3
 8002a56:	438a      	bics	r2, r1
 8002a58:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	69da      	ldr	r2, [r3, #28]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	695b      	ldr	r3, [r3, #20]
 8002a68:	431a      	orrs	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	2220      	movs	r2, #32
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	d113      	bne.n	8002aa6 <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	0018      	movs	r0, r3
 8002a82:	f000 fa3b 	bl	8002efc <HAL_RTC_WaitForSynchro>
 8002a86:	1e03      	subs	r3, r0, #0
 8002a88:	d00d      	beq.n	8002aa6 <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	22ff      	movs	r2, #255	; 0xff
 8002a90:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2221      	movs	r2, #33	; 0x21
 8002a96:	2104      	movs	r1, #4
 8002a98:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2220      	movs	r2, #32
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e008      	b.n	8002ab8 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	22ff      	movs	r2, #255	; 0xff
 8002aac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2221      	movs	r2, #33	; 0x21
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
  }
}
 8002ab8:	0018      	movs	r0, r3
 8002aba:	46bd      	mov	sp, r7
 8002abc:	b002      	add	sp, #8
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	ff8fffbf 	.word	0xff8fffbf

08002ac4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002ac4:	b590      	push	{r4, r7, lr}
 8002ac6:	b087      	sub	sp, #28
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2220      	movs	r2, #32
 8002ad4:	5c9b      	ldrb	r3, [r3, r2]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d101      	bne.n	8002ade <HAL_RTC_SetTime+0x1a>
 8002ada:	2302      	movs	r3, #2
 8002adc:	e0ad      	b.n	8002c3a <HAL_RTC_SetTime+0x176>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2220      	movs	r2, #32
 8002ae2:	2101      	movs	r1, #1
 8002ae4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2221      	movs	r2, #33	; 0x21
 8002aea:	2102      	movs	r1, #2
 8002aec:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d125      	bne.n	8002b40 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	2240      	movs	r2, #64	; 0x40
 8002afc:	4013      	ands	r3, r2
 8002afe:	d102      	bne.n	8002b06 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	2200      	movs	r2, #0
 8002b04:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	0018      	movs	r0, r3
 8002b0c:	f000 fa47 	bl	8002f9e <RTC_ByteToBcd2>
 8002b10:	0003      	movs	r3, r0
 8002b12:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	785b      	ldrb	r3, [r3, #1]
 8002b18:	0018      	movs	r0, r3
 8002b1a:	f000 fa40 	bl	8002f9e <RTC_ByteToBcd2>
 8002b1e:	0003      	movs	r3, r0
 8002b20:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002b22:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	789b      	ldrb	r3, [r3, #2]
 8002b28:	0018      	movs	r0, r3
 8002b2a:	f000 fa38 	bl	8002f9e <RTC_ByteToBcd2>
 8002b2e:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002b30:	0022      	movs	r2, r4
 8002b32:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	78db      	ldrb	r3, [r3, #3]
 8002b38:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	617b      	str	r3, [r7, #20]
 8002b3e:	e017      	b.n	8002b70 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	2240      	movs	r2, #64	; 0x40
 8002b48:	4013      	ands	r3, r2
 8002b4a:	d102      	bne.n	8002b52 <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	785b      	ldrb	r3, [r3, #1]
 8002b5c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002b5e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8002b60:	68ba      	ldr	r2, [r7, #8]
 8002b62:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002b64:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	78db      	ldrb	r3, [r3, #3]
 8002b6a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	22ca      	movs	r2, #202	; 0xca
 8002b76:	625a      	str	r2, [r3, #36]	; 0x24
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2253      	movs	r2, #83	; 0x53
 8002b7e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	0018      	movs	r0, r3
 8002b84:	f000 f9e1 	bl	8002f4a <RTC_EnterInitMode>
 8002b88:	1e03      	subs	r3, r0, #0
 8002b8a:	d00d      	beq.n	8002ba8 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	22ff      	movs	r2, #255	; 0xff
 8002b92:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2221      	movs	r2, #33	; 0x21
 8002b98:	2104      	movs	r1, #4
 8002b9a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2220      	movs	r2, #32
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e048      	b.n	8002c3a <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	697a      	ldr	r2, [r7, #20]
 8002bae:	4925      	ldr	r1, [pc, #148]	; (8002c44 <HAL_RTC_SetTime+0x180>)
 8002bb0:	400a      	ands	r2, r1
 8002bb2:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4922      	ldr	r1, [pc, #136]	; (8002c48 <HAL_RTC_SetTime+0x184>)
 8002bc0:	400a      	ands	r2, r1
 8002bc2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6899      	ldr	r1, [r3, #8]
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	68da      	ldr	r2, [r3, #12]
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	431a      	orrs	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68da      	ldr	r2, [r3, #12]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2180      	movs	r1, #128	; 0x80
 8002be8:	438a      	bics	r2, r1
 8002bea:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	2220      	movs	r2, #32
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	d113      	bne.n	8002c20 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	0018      	movs	r0, r3
 8002bfc:	f000 f97e 	bl	8002efc <HAL_RTC_WaitForSynchro>
 8002c00:	1e03      	subs	r3, r0, #0
 8002c02:	d00d      	beq.n	8002c20 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	22ff      	movs	r2, #255	; 0xff
 8002c0a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2221      	movs	r2, #33	; 0x21
 8002c10:	2104      	movs	r1, #4
 8002c12:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2220      	movs	r2, #32
 8002c18:	2100      	movs	r1, #0
 8002c1a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e00c      	b.n	8002c3a <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	22ff      	movs	r2, #255	; 0xff
 8002c26:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2221      	movs	r2, #33	; 0x21
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2220      	movs	r2, #32
 8002c34:	2100      	movs	r1, #0
 8002c36:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002c38:	2300      	movs	r3, #0
  }
}
 8002c3a:	0018      	movs	r0, r3
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	b007      	add	sp, #28
 8002c40:	bd90      	pop	{r4, r7, pc}
 8002c42:	46c0      	nop			; (mov r8, r8)
 8002c44:	007f7f7f 	.word	0x007f7f7f
 8002c48:	fffbffff 	.word	0xfffbffff

08002c4c <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b086      	sub	sp, #24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	045b      	lsls	r3, r3, #17
 8002c6a:	0c5a      	lsrs	r2, r3, #17
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a22      	ldr	r2, [pc, #136]	; (8002d00 <HAL_RTC_GetTime+0xb4>)
 8002c78:	4013      	ands	r3, r2
 8002c7a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	0c1b      	lsrs	r3, r3, #16
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	223f      	movs	r2, #63	; 0x3f
 8002c84:	4013      	ands	r3, r2
 8002c86:	b2da      	uxtb	r2, r3
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	0a1b      	lsrs	r3, r3, #8
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	227f      	movs	r2, #127	; 0x7f
 8002c94:	4013      	ands	r3, r2
 8002c96:	b2da      	uxtb	r2, r3
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	227f      	movs	r2, #127	; 0x7f
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	b2da      	uxtb	r2, r3
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	0c1b      	lsrs	r3, r3, #16
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	2240      	movs	r2, #64	; 0x40
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	b2da      	uxtb	r2, r3
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d11a      	bne.n	8002cf6 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	f000 f992 	bl	8002fee <RTC_Bcd2ToByte>
 8002cca:	0003      	movs	r3, r0
 8002ccc:	001a      	movs	r2, r3
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	785b      	ldrb	r3, [r3, #1]
 8002cd6:	0018      	movs	r0, r3
 8002cd8:	f000 f989 	bl	8002fee <RTC_Bcd2ToByte>
 8002cdc:	0003      	movs	r3, r0
 8002cde:	001a      	movs	r2, r3
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	789b      	ldrb	r3, [r3, #2]
 8002ce8:	0018      	movs	r0, r3
 8002cea:	f000 f980 	bl	8002fee <RTC_Bcd2ToByte>
 8002cee:	0003      	movs	r3, r0
 8002cf0:	001a      	movs	r2, r3
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	0018      	movs	r0, r3
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	b006      	add	sp, #24
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	007f7f7f 	.word	0x007f7f7f

08002d04 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002d04:	b590      	push	{r4, r7, lr}
 8002d06:	b087      	sub	sp, #28
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2220      	movs	r2, #32
 8002d14:	5c9b      	ldrb	r3, [r3, r2]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d101      	bne.n	8002d1e <HAL_RTC_SetDate+0x1a>
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	e099      	b.n	8002e52 <HAL_RTC_SetDate+0x14e>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2220      	movs	r2, #32
 8002d22:	2101      	movs	r1, #1
 8002d24:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2221      	movs	r2, #33	; 0x21
 8002d2a:	2102      	movs	r1, #2
 8002d2c:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d10e      	bne.n	8002d52 <HAL_RTC_SetDate+0x4e>
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	785b      	ldrb	r3, [r3, #1]
 8002d38:	001a      	movs	r2, r3
 8002d3a:	2310      	movs	r3, #16
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	d008      	beq.n	8002d52 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	785b      	ldrb	r3, [r3, #1]
 8002d44:	2210      	movs	r2, #16
 8002d46:	4393      	bics	r3, r2
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	330a      	adds	r3, #10
 8002d4c:	b2da      	uxtb	r2, r3
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d11c      	bne.n	8002d92 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	78db      	ldrb	r3, [r3, #3]
 8002d5c:	0018      	movs	r0, r3
 8002d5e:	f000 f91e 	bl	8002f9e <RTC_ByteToBcd2>
 8002d62:	0003      	movs	r3, r0
 8002d64:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	785b      	ldrb	r3, [r3, #1]
 8002d6a:	0018      	movs	r0, r3
 8002d6c:	f000 f917 	bl	8002f9e <RTC_ByteToBcd2>
 8002d70:	0003      	movs	r3, r0
 8002d72:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002d74:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	789b      	ldrb	r3, [r3, #2]
 8002d7a:	0018      	movs	r0, r3
 8002d7c:	f000 f90f 	bl	8002f9e <RTC_ByteToBcd2>
 8002d80:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002d82:	0022      	movs	r2, r4
 8002d84:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	617b      	str	r3, [r7, #20]
 8002d90:	e00e      	b.n	8002db0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	78db      	ldrb	r3, [r3, #3]
 8002d96:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	785b      	ldrb	r3, [r3, #1]
 8002d9c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002d9e:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8002da0:	68ba      	ldr	r2, [r7, #8]
 8002da2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8002da4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002dac:	4313      	orrs	r3, r2
 8002dae:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	22ca      	movs	r2, #202	; 0xca
 8002db6:	625a      	str	r2, [r3, #36]	; 0x24
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2253      	movs	r2, #83	; 0x53
 8002dbe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	f000 f8c1 	bl	8002f4a <RTC_EnterInitMode>
 8002dc8:	1e03      	subs	r3, r0, #0
 8002dca:	d00d      	beq.n	8002de8 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	22ff      	movs	r2, #255	; 0xff
 8002dd2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2221      	movs	r2, #33	; 0x21
 8002dd8:	2104      	movs	r1, #4
 8002dda:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2220      	movs	r2, #32
 8002de0:	2100      	movs	r1, #0
 8002de2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e034      	b.n	8002e52 <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	697a      	ldr	r2, [r7, #20]
 8002dee:	491b      	ldr	r1, [pc, #108]	; (8002e5c <HAL_RTC_SetDate+0x158>)
 8002df0:	400a      	ands	r2, r1
 8002df2:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68da      	ldr	r2, [r3, #12]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2180      	movs	r1, #128	; 0x80
 8002e00:	438a      	bics	r2, r1
 8002e02:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	d113      	bne.n	8002e38 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	0018      	movs	r0, r3
 8002e14:	f000 f872 	bl	8002efc <HAL_RTC_WaitForSynchro>
 8002e18:	1e03      	subs	r3, r0, #0
 8002e1a:	d00d      	beq.n	8002e38 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	22ff      	movs	r2, #255	; 0xff
 8002e22:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2221      	movs	r2, #33	; 0x21
 8002e28:	2104      	movs	r1, #4
 8002e2a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2220      	movs	r2, #32
 8002e30:	2100      	movs	r1, #0
 8002e32:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e00c      	b.n	8002e52 <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	22ff      	movs	r2, #255	; 0xff
 8002e3e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2221      	movs	r2, #33	; 0x21
 8002e44:	2101      	movs	r1, #1
 8002e46:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2220      	movs	r2, #32
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002e50:	2300      	movs	r3, #0
  }
}
 8002e52:	0018      	movs	r0, r3
 8002e54:	46bd      	mov	sp, r7
 8002e56:	b007      	add	sp, #28
 8002e58:	bd90      	pop	{r4, r7, pc}
 8002e5a:	46c0      	nop			; (mov r8, r8)
 8002e5c:	00ffff3f 	.word	0x00ffff3f

08002e60 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	4a21      	ldr	r2, [pc, #132]	; (8002ef8 <HAL_RTC_GetDate+0x98>)
 8002e74:	4013      	ands	r3, r2
 8002e76:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	0c1b      	lsrs	r3, r3, #16
 8002e7c:	b2da      	uxtb	r2, r3
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	0a1b      	lsrs	r3, r3, #8
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	221f      	movs	r2, #31
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	b2da      	uxtb	r2, r3
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	223f      	movs	r2, #63	; 0x3f
 8002e98:	4013      	ands	r3, r2
 8002e9a:	b2da      	uxtb	r2, r3
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	0b5b      	lsrs	r3, r3, #13
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2207      	movs	r2, #7
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	b2da      	uxtb	r2, r3
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d11a      	bne.n	8002eec <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	78db      	ldrb	r3, [r3, #3]
 8002eba:	0018      	movs	r0, r3
 8002ebc:	f000 f897 	bl	8002fee <RTC_Bcd2ToByte>
 8002ec0:	0003      	movs	r3, r0
 8002ec2:	001a      	movs	r2, r3
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	785b      	ldrb	r3, [r3, #1]
 8002ecc:	0018      	movs	r0, r3
 8002ece:	f000 f88e 	bl	8002fee <RTC_Bcd2ToByte>
 8002ed2:	0003      	movs	r3, r0
 8002ed4:	001a      	movs	r2, r3
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	789b      	ldrb	r3, [r3, #2]
 8002ede:	0018      	movs	r0, r3
 8002ee0:	f000 f885 	bl	8002fee <RTC_Bcd2ToByte>
 8002ee4:	0003      	movs	r3, r0
 8002ee6:	001a      	movs	r2, r3
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	0018      	movs	r0, r3
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	b006      	add	sp, #24
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	46c0      	nop			; (mov r8, r8)
 8002ef8:	00ffff3f 	.word	0x00ffff3f

08002efc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68da      	ldr	r2, [r3, #12]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	21a0      	movs	r1, #160	; 0xa0
 8002f10:	438a      	bics	r2, r1
 8002f12:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002f14:	f7fe fb46 	bl	80015a4 <HAL_GetTick>
 8002f18:	0003      	movs	r3, r0
 8002f1a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002f1c:	e00a      	b.n	8002f34 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002f1e:	f7fe fb41 	bl	80015a4 <HAL_GetTick>
 8002f22:	0002      	movs	r2, r0
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	1ad2      	subs	r2, r2, r3
 8002f28:	23fa      	movs	r3, #250	; 0xfa
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d901      	bls.n	8002f34 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e006      	b.n	8002f42 <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	2220      	movs	r2, #32
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	d0ee      	beq.n	8002f1e <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	0018      	movs	r0, r3
 8002f44:	46bd      	mov	sp, r7
 8002f46:	b004      	add	sp, #16
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b084      	sub	sp, #16
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	2240      	movs	r2, #64	; 0x40
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	d11a      	bne.n	8002f94 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2201      	movs	r2, #1
 8002f64:	4252      	negs	r2, r2
 8002f66:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002f68:	f7fe fb1c 	bl	80015a4 <HAL_GetTick>
 8002f6c:	0003      	movs	r3, r0
 8002f6e:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002f70:	e00a      	b.n	8002f88 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002f72:	f7fe fb17 	bl	80015a4 <HAL_GetTick>
 8002f76:	0002      	movs	r2, r0
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	1ad2      	subs	r2, r2, r3
 8002f7c:	23fa      	movs	r3, #250	; 0xfa
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d901      	bls.n	8002f88 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e006      	b.n	8002f96 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	2240      	movs	r2, #64	; 0x40
 8002f90:	4013      	ands	r3, r2
 8002f92:	d0ee      	beq.n	8002f72 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	0018      	movs	r0, r3
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	b004      	add	sp, #16
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b084      	sub	sp, #16
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	0002      	movs	r2, r0
 8002fa6:	1dfb      	adds	r3, r7, #7
 8002fa8:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8002faa:	2300      	movs	r3, #0
 8002fac:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8002fae:	230b      	movs	r3, #11
 8002fb0:	18fb      	adds	r3, r7, r3
 8002fb2:	1dfa      	adds	r2, r7, #7
 8002fb4:	7812      	ldrb	r2, [r2, #0]
 8002fb6:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 8002fb8:	e008      	b.n	8002fcc <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8002fc0:	220b      	movs	r2, #11
 8002fc2:	18bb      	adds	r3, r7, r2
 8002fc4:	18ba      	adds	r2, r7, r2
 8002fc6:	7812      	ldrb	r2, [r2, #0]
 8002fc8:	3a0a      	subs	r2, #10
 8002fca:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 8002fcc:	210b      	movs	r1, #11
 8002fce:	187b      	adds	r3, r7, r1
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	2b09      	cmp	r3, #9
 8002fd4:	d8f1      	bhi.n	8002fba <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	011b      	lsls	r3, r3, #4
 8002fdc:	b2da      	uxtb	r2, r3
 8002fde:	187b      	adds	r3, r7, r1
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	b2db      	uxtb	r3, r3
}
 8002fe6:	0018      	movs	r0, r3
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	b004      	add	sp, #16
 8002fec:	bd80      	pop	{r7, pc}

08002fee <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b084      	sub	sp, #16
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	0002      	movs	r2, r0
 8002ff6:	1dfb      	adds	r3, r7, #7
 8002ff8:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8002ffa:	1dfb      	adds	r3, r7, #7
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	091b      	lsrs	r3, r3, #4
 8003000:	b2db      	uxtb	r3, r3
 8003002:	001a      	movs	r2, r3
 8003004:	0013      	movs	r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	189b      	adds	r3, r3, r2
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	b2da      	uxtb	r2, r3
 8003012:	1dfb      	adds	r3, r7, #7
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	210f      	movs	r1, #15
 8003018:	400b      	ands	r3, r1
 800301a:	b2db      	uxtb	r3, r3
 800301c:	18d3      	adds	r3, r2, r3
 800301e:	b2db      	uxtb	r3, r3
}
 8003020:	0018      	movs	r0, r3
 8003022:	46bd      	mov	sp, r7
 8003024:	b004      	add	sp, #16
 8003026:	bd80      	pop	{r7, pc}

08003028 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e044      	b.n	80030c4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800303e:	2b00      	cmp	r3, #0
 8003040:	d107      	bne.n	8003052 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2274      	movs	r2, #116	; 0x74
 8003046:	2100      	movs	r1, #0
 8003048:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	0018      	movs	r0, r3
 800304e:	f7fe f82d 	bl	80010ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2224      	movs	r2, #36	; 0x24
 8003056:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2101      	movs	r1, #1
 8003064:	438a      	bics	r2, r1
 8003066:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	0018      	movs	r0, r3
 800306c:	f000 fc36 	bl	80038dc <UART_SetConfig>
 8003070:	0003      	movs	r3, r0
 8003072:	2b01      	cmp	r3, #1
 8003074:	d101      	bne.n	800307a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e024      	b.n	80030c4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	0018      	movs	r0, r3
 8003086:	f000 fec9 	bl	8003e1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	685a      	ldr	r2, [r3, #4]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	490d      	ldr	r1, [pc, #52]	; (80030cc <HAL_UART_Init+0xa4>)
 8003096:	400a      	ands	r2, r1
 8003098:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	212a      	movs	r1, #42	; 0x2a
 80030a6:	438a      	bics	r2, r1
 80030a8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2101      	movs	r1, #1
 80030b6:	430a      	orrs	r2, r1
 80030b8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	0018      	movs	r0, r3
 80030be:	f000 ff61 	bl	8003f84 <UART_CheckIdleState>
 80030c2:	0003      	movs	r3, r0
}
 80030c4:	0018      	movs	r0, r3
 80030c6:	46bd      	mov	sp, r7
 80030c8:	b002      	add	sp, #8
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	ffffb7ff 	.word	0xffffb7ff

080030d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b08a      	sub	sp, #40	; 0x28
 80030d4:	af02      	add	r7, sp, #8
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	603b      	str	r3, [r7, #0]
 80030dc:	1dbb      	adds	r3, r7, #6
 80030de:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030e4:	2b20      	cmp	r3, #32
 80030e6:	d000      	beq.n	80030ea <HAL_UART_Transmit+0x1a>
 80030e8:	e095      	b.n	8003216 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d003      	beq.n	80030f8 <HAL_UART_Transmit+0x28>
 80030f0:	1dbb      	adds	r3, r7, #6
 80030f2:	881b      	ldrh	r3, [r3, #0]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d101      	bne.n	80030fc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e08d      	b.n	8003218 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	689a      	ldr	r2, [r3, #8]
 8003100:	2380      	movs	r3, #128	; 0x80
 8003102:	015b      	lsls	r3, r3, #5
 8003104:	429a      	cmp	r2, r3
 8003106:	d109      	bne.n	800311c <HAL_UART_Transmit+0x4c>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d105      	bne.n	800311c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	2201      	movs	r2, #1
 8003114:	4013      	ands	r3, r2
 8003116:	d001      	beq.n	800311c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e07d      	b.n	8003218 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2274      	movs	r2, #116	; 0x74
 8003120:	5c9b      	ldrb	r3, [r3, r2]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d101      	bne.n	800312a <HAL_UART_Transmit+0x5a>
 8003126:	2302      	movs	r3, #2
 8003128:	e076      	b.n	8003218 <HAL_UART_Transmit+0x148>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2274      	movs	r2, #116	; 0x74
 800312e:	2101      	movs	r1, #1
 8003130:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2280      	movs	r2, #128	; 0x80
 8003136:	2100      	movs	r1, #0
 8003138:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2221      	movs	r2, #33	; 0x21
 800313e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003140:	f7fe fa30 	bl	80015a4 <HAL_GetTick>
 8003144:	0003      	movs	r3, r0
 8003146:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	1dba      	adds	r2, r7, #6
 800314c:	2150      	movs	r1, #80	; 0x50
 800314e:	8812      	ldrh	r2, [r2, #0]
 8003150:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	1dba      	adds	r2, r7, #6
 8003156:	2152      	movs	r1, #82	; 0x52
 8003158:	8812      	ldrh	r2, [r2, #0]
 800315a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	2380      	movs	r3, #128	; 0x80
 8003162:	015b      	lsls	r3, r3, #5
 8003164:	429a      	cmp	r2, r3
 8003166:	d108      	bne.n	800317a <HAL_UART_Transmit+0xaa>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d104      	bne.n	800317a <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8003170:	2300      	movs	r3, #0
 8003172:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	61bb      	str	r3, [r7, #24]
 8003178:	e003      	b.n	8003182 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800317e:	2300      	movs	r3, #0
 8003180:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2274      	movs	r2, #116	; 0x74
 8003186:	2100      	movs	r1, #0
 8003188:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800318a:	e02c      	b.n	80031e6 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800318c:	697a      	ldr	r2, [r7, #20]
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	9300      	str	r3, [sp, #0]
 8003194:	0013      	movs	r3, r2
 8003196:	2200      	movs	r2, #0
 8003198:	2180      	movs	r1, #128	; 0x80
 800319a:	f000 ff3b 	bl	8004014 <UART_WaitOnFlagUntilTimeout>
 800319e:	1e03      	subs	r3, r0, #0
 80031a0:	d001      	beq.n	80031a6 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e038      	b.n	8003218 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d10b      	bne.n	80031c4 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	881b      	ldrh	r3, [r3, #0]
 80031b0:	001a      	movs	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	05d2      	lsls	r2, r2, #23
 80031b8:	0dd2      	lsrs	r2, r2, #23
 80031ba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	3302      	adds	r3, #2
 80031c0:	61bb      	str	r3, [r7, #24]
 80031c2:	e007      	b.n	80031d4 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	781a      	ldrb	r2, [r3, #0]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	3301      	adds	r3, #1
 80031d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2252      	movs	r2, #82	; 0x52
 80031d8:	5a9b      	ldrh	r3, [r3, r2]
 80031da:	b29b      	uxth	r3, r3
 80031dc:	3b01      	subs	r3, #1
 80031de:	b299      	uxth	r1, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2252      	movs	r2, #82	; 0x52
 80031e4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2252      	movs	r2, #82	; 0x52
 80031ea:	5a9b      	ldrh	r3, [r3, r2]
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1cc      	bne.n	800318c <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	68f8      	ldr	r0, [r7, #12]
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	9300      	str	r3, [sp, #0]
 80031fa:	0013      	movs	r3, r2
 80031fc:	2200      	movs	r2, #0
 80031fe:	2140      	movs	r1, #64	; 0x40
 8003200:	f000 ff08 	bl	8004014 <UART_WaitOnFlagUntilTimeout>
 8003204:	1e03      	subs	r3, r0, #0
 8003206:	d001      	beq.n	800320c <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e005      	b.n	8003218 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2220      	movs	r2, #32
 8003210:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003212:	2300      	movs	r3, #0
 8003214:	e000      	b.n	8003218 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8003216:	2302      	movs	r3, #2
  }
}
 8003218:	0018      	movs	r0, r3
 800321a:	46bd      	mov	sp, r7
 800321c:	b008      	add	sp, #32
 800321e:	bd80      	pop	{r7, pc}

08003220 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b088      	sub	sp, #32
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	1dbb      	adds	r3, r7, #6
 800322c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003232:	2b20      	cmp	r3, #32
 8003234:	d155      	bne.n	80032e2 <HAL_UART_Receive_IT+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d003      	beq.n	8003244 <HAL_UART_Receive_IT+0x24>
 800323c:	1dbb      	adds	r3, r7, #6
 800323e:	881b      	ldrh	r3, [r3, #0]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d101      	bne.n	8003248 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e04d      	b.n	80032e4 <HAL_UART_Receive_IT+0xc4>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	689a      	ldr	r2, [r3, #8]
 800324c:	2380      	movs	r3, #128	; 0x80
 800324e:	015b      	lsls	r3, r3, #5
 8003250:	429a      	cmp	r2, r3
 8003252:	d109      	bne.n	8003268 <HAL_UART_Receive_IT+0x48>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d105      	bne.n	8003268 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	2201      	movs	r2, #1
 8003260:	4013      	ands	r3, r2
 8003262:	d001      	beq.n	8003268 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e03d      	b.n	80032e4 <HAL_UART_Receive_IT+0xc4>
      }
    }

    __HAL_LOCK(huart);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2274      	movs	r2, #116	; 0x74
 800326c:	5c9b      	ldrb	r3, [r3, r2]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d101      	bne.n	8003276 <HAL_UART_Receive_IT+0x56>
 8003272:	2302      	movs	r3, #2
 8003274:	e036      	b.n	80032e4 <HAL_UART_Receive_IT+0xc4>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2274      	movs	r2, #116	; 0x74
 800327a:	2101      	movs	r1, #1
 800327c:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a18      	ldr	r2, [pc, #96]	; (80032ec <HAL_UART_Receive_IT+0xcc>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d020      	beq.n	80032d0 <HAL_UART_Receive_IT+0xb0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	685a      	ldr	r2, [r3, #4]
 8003294:	2380      	movs	r3, #128	; 0x80
 8003296:	041b      	lsls	r3, r3, #16
 8003298:	4013      	ands	r3, r2
 800329a:	d019      	beq.n	80032d0 <HAL_UART_Receive_IT+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800329c:	f3ef 8310 	mrs	r3, PRIMASK
 80032a0:	613b      	str	r3, [r7, #16]
  return(result);
 80032a2:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80032a4:	61fb      	str	r3, [r7, #28]
 80032a6:	2301      	movs	r3, #1
 80032a8:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f383 8810 	msr	PRIMASK, r3
}
 80032b0:	46c0      	nop			; (mov r8, r8)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2180      	movs	r1, #128	; 0x80
 80032be:	04c9      	lsls	r1, r1, #19
 80032c0:	430a      	orrs	r2, r1
 80032c2:	601a      	str	r2, [r3, #0]
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	f383 8810 	msr	PRIMASK, r3
}
 80032ce:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80032d0:	1dbb      	adds	r3, r7, #6
 80032d2:	881a      	ldrh	r2, [r3, #0]
 80032d4:	68b9      	ldr	r1, [r7, #8]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	0018      	movs	r0, r3
 80032da:	f000 ff5f 	bl	800419c <UART_Start_Receive_IT>
 80032de:	0003      	movs	r3, r0
 80032e0:	e000      	b.n	80032e4 <HAL_UART_Receive_IT+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80032e2:	2302      	movs	r3, #2
  }
}
 80032e4:	0018      	movs	r0, r3
 80032e6:	46bd      	mov	sp, r7
 80032e8:	b008      	add	sp, #32
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	40004800 	.word	0x40004800

080032f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80032f0:	b590      	push	{r4, r7, lr}
 80032f2:	b0ab      	sub	sp, #172	; 0xac
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	69db      	ldr	r3, [r3, #28]
 80032fe:	22a4      	movs	r2, #164	; 0xa4
 8003300:	18b9      	adds	r1, r7, r2
 8003302:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	20a0      	movs	r0, #160	; 0xa0
 800330c:	1839      	adds	r1, r7, r0
 800330e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	219c      	movs	r1, #156	; 0x9c
 8003318:	1879      	adds	r1, r7, r1
 800331a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800331c:	0011      	movs	r1, r2
 800331e:	18bb      	adds	r3, r7, r2
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a99      	ldr	r2, [pc, #612]	; (8003588 <HAL_UART_IRQHandler+0x298>)
 8003324:	4013      	ands	r3, r2
 8003326:	2298      	movs	r2, #152	; 0x98
 8003328:	18bc      	adds	r4, r7, r2
 800332a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800332c:	18bb      	adds	r3, r7, r2
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d114      	bne.n	800335e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003334:	187b      	adds	r3, r7, r1
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2220      	movs	r2, #32
 800333a:	4013      	ands	r3, r2
 800333c:	d00f      	beq.n	800335e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800333e:	183b      	adds	r3, r7, r0
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2220      	movs	r2, #32
 8003344:	4013      	ands	r3, r2
 8003346:	d00a      	beq.n	800335e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800334c:	2b00      	cmp	r3, #0
 800334e:	d100      	bne.n	8003352 <HAL_UART_IRQHandler+0x62>
 8003350:	e298      	b.n	8003884 <HAL_UART_IRQHandler+0x594>
      {
        huart->RxISR(huart);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	0010      	movs	r0, r2
 800335a:	4798      	blx	r3
      }
      return;
 800335c:	e292      	b.n	8003884 <HAL_UART_IRQHandler+0x594>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800335e:	2398      	movs	r3, #152	; 0x98
 8003360:	18fb      	adds	r3, r7, r3
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d100      	bne.n	800336a <HAL_UART_IRQHandler+0x7a>
 8003368:	e114      	b.n	8003594 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800336a:	239c      	movs	r3, #156	; 0x9c
 800336c:	18fb      	adds	r3, r7, r3
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2201      	movs	r2, #1
 8003372:	4013      	ands	r3, r2
 8003374:	d106      	bne.n	8003384 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003376:	23a0      	movs	r3, #160	; 0xa0
 8003378:	18fb      	adds	r3, r7, r3
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a83      	ldr	r2, [pc, #524]	; (800358c <HAL_UART_IRQHandler+0x29c>)
 800337e:	4013      	ands	r3, r2
 8003380:	d100      	bne.n	8003384 <HAL_UART_IRQHandler+0x94>
 8003382:	e107      	b.n	8003594 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003384:	23a4      	movs	r3, #164	; 0xa4
 8003386:	18fb      	adds	r3, r7, r3
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2201      	movs	r2, #1
 800338c:	4013      	ands	r3, r2
 800338e:	d012      	beq.n	80033b6 <HAL_UART_IRQHandler+0xc6>
 8003390:	23a0      	movs	r3, #160	; 0xa0
 8003392:	18fb      	adds	r3, r7, r3
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	2380      	movs	r3, #128	; 0x80
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	4013      	ands	r3, r2
 800339c:	d00b      	beq.n	80033b6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2201      	movs	r2, #1
 80033a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2280      	movs	r2, #128	; 0x80
 80033aa:	589b      	ldr	r3, [r3, r2]
 80033ac:	2201      	movs	r2, #1
 80033ae:	431a      	orrs	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2180      	movs	r1, #128	; 0x80
 80033b4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80033b6:	23a4      	movs	r3, #164	; 0xa4
 80033b8:	18fb      	adds	r3, r7, r3
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2202      	movs	r2, #2
 80033be:	4013      	ands	r3, r2
 80033c0:	d011      	beq.n	80033e6 <HAL_UART_IRQHandler+0xf6>
 80033c2:	239c      	movs	r3, #156	; 0x9c
 80033c4:	18fb      	adds	r3, r7, r3
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2201      	movs	r2, #1
 80033ca:	4013      	ands	r3, r2
 80033cc:	d00b      	beq.n	80033e6 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2202      	movs	r2, #2
 80033d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2280      	movs	r2, #128	; 0x80
 80033da:	589b      	ldr	r3, [r3, r2]
 80033dc:	2204      	movs	r2, #4
 80033de:	431a      	orrs	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2180      	movs	r1, #128	; 0x80
 80033e4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80033e6:	23a4      	movs	r3, #164	; 0xa4
 80033e8:	18fb      	adds	r3, r7, r3
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2204      	movs	r2, #4
 80033ee:	4013      	ands	r3, r2
 80033f0:	d011      	beq.n	8003416 <HAL_UART_IRQHandler+0x126>
 80033f2:	239c      	movs	r3, #156	; 0x9c
 80033f4:	18fb      	adds	r3, r7, r3
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2201      	movs	r2, #1
 80033fa:	4013      	ands	r3, r2
 80033fc:	d00b      	beq.n	8003416 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2204      	movs	r2, #4
 8003404:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2280      	movs	r2, #128	; 0x80
 800340a:	589b      	ldr	r3, [r3, r2]
 800340c:	2202      	movs	r2, #2
 800340e:	431a      	orrs	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2180      	movs	r1, #128	; 0x80
 8003414:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003416:	23a4      	movs	r3, #164	; 0xa4
 8003418:	18fb      	adds	r3, r7, r3
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2208      	movs	r2, #8
 800341e:	4013      	ands	r3, r2
 8003420:	d017      	beq.n	8003452 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003422:	23a0      	movs	r3, #160	; 0xa0
 8003424:	18fb      	adds	r3, r7, r3
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2220      	movs	r2, #32
 800342a:	4013      	ands	r3, r2
 800342c:	d105      	bne.n	800343a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800342e:	239c      	movs	r3, #156	; 0x9c
 8003430:	18fb      	adds	r3, r7, r3
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2201      	movs	r2, #1
 8003436:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003438:	d00b      	beq.n	8003452 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2208      	movs	r2, #8
 8003440:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2280      	movs	r2, #128	; 0x80
 8003446:	589b      	ldr	r3, [r3, r2]
 8003448:	2208      	movs	r2, #8
 800344a:	431a      	orrs	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2180      	movs	r1, #128	; 0x80
 8003450:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003452:	23a4      	movs	r3, #164	; 0xa4
 8003454:	18fb      	adds	r3, r7, r3
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	2380      	movs	r3, #128	; 0x80
 800345a:	011b      	lsls	r3, r3, #4
 800345c:	4013      	ands	r3, r2
 800345e:	d013      	beq.n	8003488 <HAL_UART_IRQHandler+0x198>
 8003460:	23a0      	movs	r3, #160	; 0xa0
 8003462:	18fb      	adds	r3, r7, r3
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	2380      	movs	r3, #128	; 0x80
 8003468:	04db      	lsls	r3, r3, #19
 800346a:	4013      	ands	r3, r2
 800346c:	d00c      	beq.n	8003488 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2280      	movs	r2, #128	; 0x80
 8003474:	0112      	lsls	r2, r2, #4
 8003476:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2280      	movs	r2, #128	; 0x80
 800347c:	589b      	ldr	r3, [r3, r2]
 800347e:	2220      	movs	r2, #32
 8003480:	431a      	orrs	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2180      	movs	r1, #128	; 0x80
 8003486:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2280      	movs	r2, #128	; 0x80
 800348c:	589b      	ldr	r3, [r3, r2]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d100      	bne.n	8003494 <HAL_UART_IRQHandler+0x1a4>
 8003492:	e1f9      	b.n	8003888 <HAL_UART_IRQHandler+0x598>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003494:	23a4      	movs	r3, #164	; 0xa4
 8003496:	18fb      	adds	r3, r7, r3
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2220      	movs	r2, #32
 800349c:	4013      	ands	r3, r2
 800349e:	d00e      	beq.n	80034be <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80034a0:	23a0      	movs	r3, #160	; 0xa0
 80034a2:	18fb      	adds	r3, r7, r3
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2220      	movs	r2, #32
 80034a8:	4013      	ands	r3, r2
 80034aa:	d008      	beq.n	80034be <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d004      	beq.n	80034be <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	0010      	movs	r0, r2
 80034bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2280      	movs	r2, #128	; 0x80
 80034c2:	589b      	ldr	r3, [r3, r2]
 80034c4:	2194      	movs	r1, #148	; 0x94
 80034c6:	187a      	adds	r2, r7, r1
 80034c8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	2240      	movs	r2, #64	; 0x40
 80034d2:	4013      	ands	r3, r2
 80034d4:	2b40      	cmp	r3, #64	; 0x40
 80034d6:	d004      	beq.n	80034e2 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80034d8:	187b      	adds	r3, r7, r1
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2228      	movs	r2, #40	; 0x28
 80034de:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80034e0:	d047      	beq.n	8003572 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	0018      	movs	r0, r3
 80034e6:	f000 ff09 	bl	80042fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	2240      	movs	r2, #64	; 0x40
 80034f2:	4013      	ands	r3, r2
 80034f4:	2b40      	cmp	r3, #64	; 0x40
 80034f6:	d137      	bne.n	8003568 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034f8:	f3ef 8310 	mrs	r3, PRIMASK
 80034fc:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80034fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003500:	2090      	movs	r0, #144	; 0x90
 8003502:	183a      	adds	r2, r7, r0
 8003504:	6013      	str	r3, [r2, #0]
 8003506:	2301      	movs	r3, #1
 8003508:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800350a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800350c:	f383 8810 	msr	PRIMASK, r3
}
 8003510:	46c0      	nop			; (mov r8, r8)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2140      	movs	r1, #64	; 0x40
 800351e:	438a      	bics	r2, r1
 8003520:	609a      	str	r2, [r3, #8]
 8003522:	183b      	adds	r3, r7, r0
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003528:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800352a:	f383 8810 	msr	PRIMASK, r3
}
 800352e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003534:	2b00      	cmp	r3, #0
 8003536:	d012      	beq.n	800355e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800353c:	4a14      	ldr	r2, [pc, #80]	; (8003590 <HAL_UART_IRQHandler+0x2a0>)
 800353e:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003544:	0018      	movs	r0, r3
 8003546:	f7fe f955 	bl	80017f4 <HAL_DMA_Abort_IT>
 800354a:	1e03      	subs	r3, r0, #0
 800354c:	d01a      	beq.n	8003584 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003552:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003558:	0018      	movs	r0, r3
 800355a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800355c:	e012      	b.n	8003584 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	0018      	movs	r0, r3
 8003562:	f000 f9a7 	bl	80038b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003566:	e00d      	b.n	8003584 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	0018      	movs	r0, r3
 800356c:	f000 f9a2 	bl	80038b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003570:	e008      	b.n	8003584 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	0018      	movs	r0, r3
 8003576:	f000 f99d 	bl	80038b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2280      	movs	r2, #128	; 0x80
 800357e:	2100      	movs	r1, #0
 8003580:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003582:	e181      	b.n	8003888 <HAL_UART_IRQHandler+0x598>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003584:	46c0      	nop			; (mov r8, r8)
    return;
 8003586:	e17f      	b.n	8003888 <HAL_UART_IRQHandler+0x598>
 8003588:	0000080f 	.word	0x0000080f
 800358c:	04000120 	.word	0x04000120
 8003590:	080043c1 	.word	0x080043c1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003598:	2b01      	cmp	r3, #1
 800359a:	d000      	beq.n	800359e <HAL_UART_IRQHandler+0x2ae>
 800359c:	e133      	b.n	8003806 <HAL_UART_IRQHandler+0x516>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800359e:	23a4      	movs	r3, #164	; 0xa4
 80035a0:	18fb      	adds	r3, r7, r3
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2210      	movs	r2, #16
 80035a6:	4013      	ands	r3, r2
 80035a8:	d100      	bne.n	80035ac <HAL_UART_IRQHandler+0x2bc>
 80035aa:	e12c      	b.n	8003806 <HAL_UART_IRQHandler+0x516>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80035ac:	23a0      	movs	r3, #160	; 0xa0
 80035ae:	18fb      	adds	r3, r7, r3
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2210      	movs	r2, #16
 80035b4:	4013      	ands	r3, r2
 80035b6:	d100      	bne.n	80035ba <HAL_UART_IRQHandler+0x2ca>
 80035b8:	e125      	b.n	8003806 <HAL_UART_IRQHandler+0x516>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2210      	movs	r2, #16
 80035c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	2240      	movs	r2, #64	; 0x40
 80035ca:	4013      	ands	r3, r2
 80035cc:	2b40      	cmp	r3, #64	; 0x40
 80035ce:	d000      	beq.n	80035d2 <HAL_UART_IRQHandler+0x2e2>
 80035d0:	e09d      	b.n	800370e <HAL_UART_IRQHandler+0x41e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	685a      	ldr	r2, [r3, #4]
 80035da:	217e      	movs	r1, #126	; 0x7e
 80035dc:	187b      	adds	r3, r7, r1
 80035de:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80035e0:	187b      	adds	r3, r7, r1
 80035e2:	881b      	ldrh	r3, [r3, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d100      	bne.n	80035ea <HAL_UART_IRQHandler+0x2fa>
 80035e8:	e150      	b.n	800388c <HAL_UART_IRQHandler+0x59c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2258      	movs	r2, #88	; 0x58
 80035ee:	5a9b      	ldrh	r3, [r3, r2]
 80035f0:	187a      	adds	r2, r7, r1
 80035f2:	8812      	ldrh	r2, [r2, #0]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d300      	bcc.n	80035fa <HAL_UART_IRQHandler+0x30a>
 80035f8:	e148      	b.n	800388c <HAL_UART_IRQHandler+0x59c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	187a      	adds	r2, r7, r1
 80035fe:	215a      	movs	r1, #90	; 0x5a
 8003600:	8812      	ldrh	r2, [r2, #0]
 8003602:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2220      	movs	r2, #32
 800360e:	4013      	ands	r3, r2
 8003610:	d16e      	bne.n	80036f0 <HAL_UART_IRQHandler+0x400>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003612:	f3ef 8310 	mrs	r3, PRIMASK
 8003616:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800361a:	67bb      	str	r3, [r7, #120]	; 0x78
 800361c:	2301      	movs	r3, #1
 800361e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003622:	f383 8810 	msr	PRIMASK, r3
}
 8003626:	46c0      	nop			; (mov r8, r8)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	499a      	ldr	r1, [pc, #616]	; (800389c <HAL_UART_IRQHandler+0x5ac>)
 8003634:	400a      	ands	r2, r1
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800363a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800363c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800363e:	f383 8810 	msr	PRIMASK, r3
}
 8003642:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003644:	f3ef 8310 	mrs	r3, PRIMASK
 8003648:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800364a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800364c:	677b      	str	r3, [r7, #116]	; 0x74
 800364e:	2301      	movs	r3, #1
 8003650:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003652:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003654:	f383 8810 	msr	PRIMASK, r3
}
 8003658:	46c0      	nop			; (mov r8, r8)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	689a      	ldr	r2, [r3, #8]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2101      	movs	r1, #1
 8003666:	438a      	bics	r2, r1
 8003668:	609a      	str	r2, [r3, #8]
 800366a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800366c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800366e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003670:	f383 8810 	msr	PRIMASK, r3
}
 8003674:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003676:	f3ef 8310 	mrs	r3, PRIMASK
 800367a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800367c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800367e:	673b      	str	r3, [r7, #112]	; 0x70
 8003680:	2301      	movs	r3, #1
 8003682:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003686:	f383 8810 	msr	PRIMASK, r3
}
 800368a:	46c0      	nop			; (mov r8, r8)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	689a      	ldr	r2, [r3, #8]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2140      	movs	r1, #64	; 0x40
 8003698:	438a      	bics	r2, r1
 800369a:	609a      	str	r2, [r3, #8]
 800369c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800369e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036a2:	f383 8810 	msr	PRIMASK, r3
}
 80036a6:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2220      	movs	r2, #32
 80036ac:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036b4:	f3ef 8310 	mrs	r3, PRIMASK
 80036b8:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80036ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036be:	2301      	movs	r3, #1
 80036c0:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036c4:	f383 8810 	msr	PRIMASK, r3
}
 80036c8:	46c0      	nop			; (mov r8, r8)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2110      	movs	r1, #16
 80036d6:	438a      	bics	r2, r1
 80036d8:	601a      	str	r2, [r3, #0]
 80036da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036e0:	f383 8810 	msr	PRIMASK, r3
}
 80036e4:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ea:	0018      	movs	r0, r3
 80036ec:	f7fe f842 	bl	8001774 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2258      	movs	r2, #88	; 0x58
 80036f4:	5a9a      	ldrh	r2, [r3, r2]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	215a      	movs	r1, #90	; 0x5a
 80036fa:	5a5b      	ldrh	r3, [r3, r1]
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	b29a      	uxth	r2, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	0011      	movs	r1, r2
 8003706:	0018      	movs	r0, r3
 8003708:	f000 f8dc 	bl	80038c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800370c:	e0be      	b.n	800388c <HAL_UART_IRQHandler+0x59c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2258      	movs	r2, #88	; 0x58
 8003712:	5a99      	ldrh	r1, [r3, r2]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	225a      	movs	r2, #90	; 0x5a
 8003718:	5a9b      	ldrh	r3, [r3, r2]
 800371a:	b29a      	uxth	r2, r3
 800371c:	208e      	movs	r0, #142	; 0x8e
 800371e:	183b      	adds	r3, r7, r0
 8003720:	1a8a      	subs	r2, r1, r2
 8003722:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	225a      	movs	r2, #90	; 0x5a
 8003728:	5a9b      	ldrh	r3, [r3, r2]
 800372a:	b29b      	uxth	r3, r3
 800372c:	2b00      	cmp	r3, #0
 800372e:	d100      	bne.n	8003732 <HAL_UART_IRQHandler+0x442>
 8003730:	e0ae      	b.n	8003890 <HAL_UART_IRQHandler+0x5a0>
          && (nb_rx_data > 0U))
 8003732:	183b      	adds	r3, r7, r0
 8003734:	881b      	ldrh	r3, [r3, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d100      	bne.n	800373c <HAL_UART_IRQHandler+0x44c>
 800373a:	e0a9      	b.n	8003890 <HAL_UART_IRQHandler+0x5a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800373c:	f3ef 8310 	mrs	r3, PRIMASK
 8003740:	60fb      	str	r3, [r7, #12]
  return(result);
 8003742:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003744:	2488      	movs	r4, #136	; 0x88
 8003746:	193a      	adds	r2, r7, r4
 8003748:	6013      	str	r3, [r2, #0]
 800374a:	2301      	movs	r3, #1
 800374c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	f383 8810 	msr	PRIMASK, r3
}
 8003754:	46c0      	nop			; (mov r8, r8)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	494f      	ldr	r1, [pc, #316]	; (80038a0 <HAL_UART_IRQHandler+0x5b0>)
 8003762:	400a      	ands	r2, r1
 8003764:	601a      	str	r2, [r3, #0]
 8003766:	193b      	adds	r3, r7, r4
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	f383 8810 	msr	PRIMASK, r3
}
 8003772:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003774:	f3ef 8310 	mrs	r3, PRIMASK
 8003778:	61bb      	str	r3, [r7, #24]
  return(result);
 800377a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800377c:	2484      	movs	r4, #132	; 0x84
 800377e:	193a      	adds	r2, r7, r4
 8003780:	6013      	str	r3, [r2, #0]
 8003782:	2301      	movs	r3, #1
 8003784:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	f383 8810 	msr	PRIMASK, r3
}
 800378c:	46c0      	nop			; (mov r8, r8)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	689a      	ldr	r2, [r3, #8]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2101      	movs	r1, #1
 800379a:	438a      	bics	r2, r1
 800379c:	609a      	str	r2, [r3, #8]
 800379e:	193b      	adds	r3, r7, r4
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037a4:	6a3b      	ldr	r3, [r7, #32]
 80037a6:	f383 8810 	msr	PRIMASK, r3
}
 80037aa:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2220      	movs	r2, #32
 80037b0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037be:	f3ef 8310 	mrs	r3, PRIMASK
 80037c2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80037c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037c6:	2480      	movs	r4, #128	; 0x80
 80037c8:	193a      	adds	r2, r7, r4
 80037ca:	6013      	str	r3, [r2, #0]
 80037cc:	2301      	movs	r3, #1
 80037ce:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d2:	f383 8810 	msr	PRIMASK, r3
}
 80037d6:	46c0      	nop			; (mov r8, r8)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2110      	movs	r1, #16
 80037e4:	438a      	bics	r2, r1
 80037e6:	601a      	str	r2, [r3, #0]
 80037e8:	193b      	adds	r3, r7, r4
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f0:	f383 8810 	msr	PRIMASK, r3
}
 80037f4:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80037f6:	183b      	adds	r3, r7, r0
 80037f8:	881a      	ldrh	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	0011      	movs	r1, r2
 80037fe:	0018      	movs	r0, r3
 8003800:	f000 f860 	bl	80038c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003804:	e044      	b.n	8003890 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003806:	23a4      	movs	r3, #164	; 0xa4
 8003808:	18fb      	adds	r3, r7, r3
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	2380      	movs	r3, #128	; 0x80
 800380e:	035b      	lsls	r3, r3, #13
 8003810:	4013      	ands	r3, r2
 8003812:	d010      	beq.n	8003836 <HAL_UART_IRQHandler+0x546>
 8003814:	239c      	movs	r3, #156	; 0x9c
 8003816:	18fb      	adds	r3, r7, r3
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	2380      	movs	r3, #128	; 0x80
 800381c:	03db      	lsls	r3, r3, #15
 800381e:	4013      	ands	r3, r2
 8003820:	d009      	beq.n	8003836 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2280      	movs	r2, #128	; 0x80
 8003828:	0352      	lsls	r2, r2, #13
 800382a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	0018      	movs	r0, r3
 8003830:	f000 ff70 	bl	8004714 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003834:	e02f      	b.n	8003896 <HAL_UART_IRQHandler+0x5a6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003836:	23a4      	movs	r3, #164	; 0xa4
 8003838:	18fb      	adds	r3, r7, r3
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2280      	movs	r2, #128	; 0x80
 800383e:	4013      	ands	r3, r2
 8003840:	d00f      	beq.n	8003862 <HAL_UART_IRQHandler+0x572>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003842:	23a0      	movs	r3, #160	; 0xa0
 8003844:	18fb      	adds	r3, r7, r3
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2280      	movs	r2, #128	; 0x80
 800384a:	4013      	ands	r3, r2
 800384c:	d009      	beq.n	8003862 <HAL_UART_IRQHandler+0x572>
  {
    if (huart->TxISR != NULL)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003852:	2b00      	cmp	r3, #0
 8003854:	d01e      	beq.n	8003894 <HAL_UART_IRQHandler+0x5a4>
    {
      huart->TxISR(huart);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	0010      	movs	r0, r2
 800385e:	4798      	blx	r3
    }
    return;
 8003860:	e018      	b.n	8003894 <HAL_UART_IRQHandler+0x5a4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003862:	23a4      	movs	r3, #164	; 0xa4
 8003864:	18fb      	adds	r3, r7, r3
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2240      	movs	r2, #64	; 0x40
 800386a:	4013      	ands	r3, r2
 800386c:	d013      	beq.n	8003896 <HAL_UART_IRQHandler+0x5a6>
 800386e:	23a0      	movs	r3, #160	; 0xa0
 8003870:	18fb      	adds	r3, r7, r3
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2240      	movs	r2, #64	; 0x40
 8003876:	4013      	ands	r3, r2
 8003878:	d00d      	beq.n	8003896 <HAL_UART_IRQHandler+0x5a6>
  {
    UART_EndTransmit_IT(huart);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	0018      	movs	r0, r3
 800387e:	f000 fdb6 	bl	80043ee <UART_EndTransmit_IT>
    return;
 8003882:	e008      	b.n	8003896 <HAL_UART_IRQHandler+0x5a6>
      return;
 8003884:	46c0      	nop			; (mov r8, r8)
 8003886:	e006      	b.n	8003896 <HAL_UART_IRQHandler+0x5a6>
    return;
 8003888:	46c0      	nop			; (mov r8, r8)
 800388a:	e004      	b.n	8003896 <HAL_UART_IRQHandler+0x5a6>
      return;
 800388c:	46c0      	nop			; (mov r8, r8)
 800388e:	e002      	b.n	8003896 <HAL_UART_IRQHandler+0x5a6>
      return;
 8003890:	46c0      	nop			; (mov r8, r8)
 8003892:	e000      	b.n	8003896 <HAL_UART_IRQHandler+0x5a6>
    return;
 8003894:	46c0      	nop			; (mov r8, r8)
  }

}
 8003896:	46bd      	mov	sp, r7
 8003898:	b02b      	add	sp, #172	; 0xac
 800389a:	bd90      	pop	{r4, r7, pc}
 800389c:	fffffeff 	.word	0xfffffeff
 80038a0:	fffffedf 	.word	0xfffffedf

080038a4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80038ac:	46c0      	nop			; (mov r8, r8)
 80038ae:	46bd      	mov	sp, r7
 80038b0:	b002      	add	sp, #8
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80038bc:	46c0      	nop			; (mov r8, r8)
 80038be:	46bd      	mov	sp, r7
 80038c0:	b002      	add	sp, #8
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	000a      	movs	r2, r1
 80038ce:	1cbb      	adds	r3, r7, #2
 80038d0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80038d2:	46c0      	nop			; (mov r8, r8)
 80038d4:	46bd      	mov	sp, r7
 80038d6:	b002      	add	sp, #8
 80038d8:	bd80      	pop	{r7, pc}
	...

080038dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038dc:	b5b0      	push	{r4, r5, r7, lr}
 80038de:	b08e      	sub	sp, #56	; 0x38
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038e4:	231a      	movs	r3, #26
 80038e6:	2218      	movs	r2, #24
 80038e8:	189b      	adds	r3, r3, r2
 80038ea:	19db      	adds	r3, r3, r7
 80038ec:	2200      	movs	r2, #0
 80038ee:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	689a      	ldr	r2, [r3, #8]
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	431a      	orrs	r2, r3
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	431a      	orrs	r2, r3
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	69db      	ldr	r3, [r3, #28]
 8003904:	4313      	orrs	r3, r2
 8003906:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4ac3      	ldr	r2, [pc, #780]	; (8003c1c <UART_SetConfig+0x340>)
 8003910:	4013      	ands	r3, r2
 8003912:	0019      	movs	r1, r3
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800391a:	430a      	orrs	r2, r1
 800391c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	4abe      	ldr	r2, [pc, #760]	; (8003c20 <UART_SetConfig+0x344>)
 8003926:	4013      	ands	r3, r2
 8003928:	0019      	movs	r1, r3
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	68da      	ldr	r2, [r3, #12]
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	430a      	orrs	r2, r1
 8003934:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4ab8      	ldr	r2, [pc, #736]	; (8003c24 <UART_SetConfig+0x348>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d004      	beq.n	8003950 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800394c:	4313      	orrs	r3, r2
 800394e:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	4ab4      	ldr	r2, [pc, #720]	; (8003c28 <UART_SetConfig+0x34c>)
 8003958:	4013      	ands	r3, r2
 800395a:	0019      	movs	r1, r3
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003962:	430a      	orrs	r2, r1
 8003964:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4ab0      	ldr	r2, [pc, #704]	; (8003c2c <UART_SetConfig+0x350>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d131      	bne.n	80039d4 <UART_SetConfig+0xf8>
 8003970:	4baf      	ldr	r3, [pc, #700]	; (8003c30 <UART_SetConfig+0x354>)
 8003972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003974:	2203      	movs	r2, #3
 8003976:	4013      	ands	r3, r2
 8003978:	2b03      	cmp	r3, #3
 800397a:	d01d      	beq.n	80039b8 <UART_SetConfig+0xdc>
 800397c:	d823      	bhi.n	80039c6 <UART_SetConfig+0xea>
 800397e:	2b02      	cmp	r3, #2
 8003980:	d00c      	beq.n	800399c <UART_SetConfig+0xc0>
 8003982:	d820      	bhi.n	80039c6 <UART_SetConfig+0xea>
 8003984:	2b00      	cmp	r3, #0
 8003986:	d002      	beq.n	800398e <UART_SetConfig+0xb2>
 8003988:	2b01      	cmp	r3, #1
 800398a:	d00e      	beq.n	80039aa <UART_SetConfig+0xce>
 800398c:	e01b      	b.n	80039c6 <UART_SetConfig+0xea>
 800398e:	231b      	movs	r3, #27
 8003990:	2218      	movs	r2, #24
 8003992:	189b      	adds	r3, r3, r2
 8003994:	19db      	adds	r3, r3, r7
 8003996:	2201      	movs	r2, #1
 8003998:	701a      	strb	r2, [r3, #0]
 800399a:	e0b4      	b.n	8003b06 <UART_SetConfig+0x22a>
 800399c:	231b      	movs	r3, #27
 800399e:	2218      	movs	r2, #24
 80039a0:	189b      	adds	r3, r3, r2
 80039a2:	19db      	adds	r3, r3, r7
 80039a4:	2202      	movs	r2, #2
 80039a6:	701a      	strb	r2, [r3, #0]
 80039a8:	e0ad      	b.n	8003b06 <UART_SetConfig+0x22a>
 80039aa:	231b      	movs	r3, #27
 80039ac:	2218      	movs	r2, #24
 80039ae:	189b      	adds	r3, r3, r2
 80039b0:	19db      	adds	r3, r3, r7
 80039b2:	2204      	movs	r2, #4
 80039b4:	701a      	strb	r2, [r3, #0]
 80039b6:	e0a6      	b.n	8003b06 <UART_SetConfig+0x22a>
 80039b8:	231b      	movs	r3, #27
 80039ba:	2218      	movs	r2, #24
 80039bc:	189b      	adds	r3, r3, r2
 80039be:	19db      	adds	r3, r3, r7
 80039c0:	2208      	movs	r2, #8
 80039c2:	701a      	strb	r2, [r3, #0]
 80039c4:	e09f      	b.n	8003b06 <UART_SetConfig+0x22a>
 80039c6:	231b      	movs	r3, #27
 80039c8:	2218      	movs	r2, #24
 80039ca:	189b      	adds	r3, r3, r2
 80039cc:	19db      	adds	r3, r3, r7
 80039ce:	2210      	movs	r2, #16
 80039d0:	701a      	strb	r2, [r3, #0]
 80039d2:	e098      	b.n	8003b06 <UART_SetConfig+0x22a>
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a96      	ldr	r2, [pc, #600]	; (8003c34 <UART_SetConfig+0x358>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d131      	bne.n	8003a42 <UART_SetConfig+0x166>
 80039de:	4b94      	ldr	r3, [pc, #592]	; (8003c30 <UART_SetConfig+0x354>)
 80039e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039e2:	220c      	movs	r2, #12
 80039e4:	4013      	ands	r3, r2
 80039e6:	2b0c      	cmp	r3, #12
 80039e8:	d01d      	beq.n	8003a26 <UART_SetConfig+0x14a>
 80039ea:	d823      	bhi.n	8003a34 <UART_SetConfig+0x158>
 80039ec:	2b08      	cmp	r3, #8
 80039ee:	d00c      	beq.n	8003a0a <UART_SetConfig+0x12e>
 80039f0:	d820      	bhi.n	8003a34 <UART_SetConfig+0x158>
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d002      	beq.n	80039fc <UART_SetConfig+0x120>
 80039f6:	2b04      	cmp	r3, #4
 80039f8:	d00e      	beq.n	8003a18 <UART_SetConfig+0x13c>
 80039fa:	e01b      	b.n	8003a34 <UART_SetConfig+0x158>
 80039fc:	231b      	movs	r3, #27
 80039fe:	2218      	movs	r2, #24
 8003a00:	189b      	adds	r3, r3, r2
 8003a02:	19db      	adds	r3, r3, r7
 8003a04:	2200      	movs	r2, #0
 8003a06:	701a      	strb	r2, [r3, #0]
 8003a08:	e07d      	b.n	8003b06 <UART_SetConfig+0x22a>
 8003a0a:	231b      	movs	r3, #27
 8003a0c:	2218      	movs	r2, #24
 8003a0e:	189b      	adds	r3, r3, r2
 8003a10:	19db      	adds	r3, r3, r7
 8003a12:	2202      	movs	r2, #2
 8003a14:	701a      	strb	r2, [r3, #0]
 8003a16:	e076      	b.n	8003b06 <UART_SetConfig+0x22a>
 8003a18:	231b      	movs	r3, #27
 8003a1a:	2218      	movs	r2, #24
 8003a1c:	189b      	adds	r3, r3, r2
 8003a1e:	19db      	adds	r3, r3, r7
 8003a20:	2204      	movs	r2, #4
 8003a22:	701a      	strb	r2, [r3, #0]
 8003a24:	e06f      	b.n	8003b06 <UART_SetConfig+0x22a>
 8003a26:	231b      	movs	r3, #27
 8003a28:	2218      	movs	r2, #24
 8003a2a:	189b      	adds	r3, r3, r2
 8003a2c:	19db      	adds	r3, r3, r7
 8003a2e:	2208      	movs	r2, #8
 8003a30:	701a      	strb	r2, [r3, #0]
 8003a32:	e068      	b.n	8003b06 <UART_SetConfig+0x22a>
 8003a34:	231b      	movs	r3, #27
 8003a36:	2218      	movs	r2, #24
 8003a38:	189b      	adds	r3, r3, r2
 8003a3a:	19db      	adds	r3, r3, r7
 8003a3c:	2210      	movs	r2, #16
 8003a3e:	701a      	strb	r2, [r3, #0]
 8003a40:	e061      	b.n	8003b06 <UART_SetConfig+0x22a>
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a7c      	ldr	r2, [pc, #496]	; (8003c38 <UART_SetConfig+0x35c>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d106      	bne.n	8003a5a <UART_SetConfig+0x17e>
 8003a4c:	231b      	movs	r3, #27
 8003a4e:	2218      	movs	r2, #24
 8003a50:	189b      	adds	r3, r3, r2
 8003a52:	19db      	adds	r3, r3, r7
 8003a54:	2200      	movs	r2, #0
 8003a56:	701a      	strb	r2, [r3, #0]
 8003a58:	e055      	b.n	8003b06 <UART_SetConfig+0x22a>
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a77      	ldr	r2, [pc, #476]	; (8003c3c <UART_SetConfig+0x360>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d106      	bne.n	8003a72 <UART_SetConfig+0x196>
 8003a64:	231b      	movs	r3, #27
 8003a66:	2218      	movs	r2, #24
 8003a68:	189b      	adds	r3, r3, r2
 8003a6a:	19db      	adds	r3, r3, r7
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	701a      	strb	r2, [r3, #0]
 8003a70:	e049      	b.n	8003b06 <UART_SetConfig+0x22a>
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a6b      	ldr	r2, [pc, #428]	; (8003c24 <UART_SetConfig+0x348>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d13e      	bne.n	8003afa <UART_SetConfig+0x21e>
 8003a7c:	4b6c      	ldr	r3, [pc, #432]	; (8003c30 <UART_SetConfig+0x354>)
 8003a7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a80:	23c0      	movs	r3, #192	; 0xc0
 8003a82:	011b      	lsls	r3, r3, #4
 8003a84:	4013      	ands	r3, r2
 8003a86:	22c0      	movs	r2, #192	; 0xc0
 8003a88:	0112      	lsls	r2, r2, #4
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d027      	beq.n	8003ade <UART_SetConfig+0x202>
 8003a8e:	22c0      	movs	r2, #192	; 0xc0
 8003a90:	0112      	lsls	r2, r2, #4
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d82a      	bhi.n	8003aec <UART_SetConfig+0x210>
 8003a96:	2280      	movs	r2, #128	; 0x80
 8003a98:	0112      	lsls	r2, r2, #4
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d011      	beq.n	8003ac2 <UART_SetConfig+0x1e6>
 8003a9e:	2280      	movs	r2, #128	; 0x80
 8003aa0:	0112      	lsls	r2, r2, #4
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d822      	bhi.n	8003aec <UART_SetConfig+0x210>
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d004      	beq.n	8003ab4 <UART_SetConfig+0x1d8>
 8003aaa:	2280      	movs	r2, #128	; 0x80
 8003aac:	00d2      	lsls	r2, r2, #3
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d00e      	beq.n	8003ad0 <UART_SetConfig+0x1f4>
 8003ab2:	e01b      	b.n	8003aec <UART_SetConfig+0x210>
 8003ab4:	231b      	movs	r3, #27
 8003ab6:	2218      	movs	r2, #24
 8003ab8:	189b      	adds	r3, r3, r2
 8003aba:	19db      	adds	r3, r3, r7
 8003abc:	2200      	movs	r2, #0
 8003abe:	701a      	strb	r2, [r3, #0]
 8003ac0:	e021      	b.n	8003b06 <UART_SetConfig+0x22a>
 8003ac2:	231b      	movs	r3, #27
 8003ac4:	2218      	movs	r2, #24
 8003ac6:	189b      	adds	r3, r3, r2
 8003ac8:	19db      	adds	r3, r3, r7
 8003aca:	2202      	movs	r2, #2
 8003acc:	701a      	strb	r2, [r3, #0]
 8003ace:	e01a      	b.n	8003b06 <UART_SetConfig+0x22a>
 8003ad0:	231b      	movs	r3, #27
 8003ad2:	2218      	movs	r2, #24
 8003ad4:	189b      	adds	r3, r3, r2
 8003ad6:	19db      	adds	r3, r3, r7
 8003ad8:	2204      	movs	r2, #4
 8003ada:	701a      	strb	r2, [r3, #0]
 8003adc:	e013      	b.n	8003b06 <UART_SetConfig+0x22a>
 8003ade:	231b      	movs	r3, #27
 8003ae0:	2218      	movs	r2, #24
 8003ae2:	189b      	adds	r3, r3, r2
 8003ae4:	19db      	adds	r3, r3, r7
 8003ae6:	2208      	movs	r2, #8
 8003ae8:	701a      	strb	r2, [r3, #0]
 8003aea:	e00c      	b.n	8003b06 <UART_SetConfig+0x22a>
 8003aec:	231b      	movs	r3, #27
 8003aee:	2218      	movs	r2, #24
 8003af0:	189b      	adds	r3, r3, r2
 8003af2:	19db      	adds	r3, r3, r7
 8003af4:	2210      	movs	r2, #16
 8003af6:	701a      	strb	r2, [r3, #0]
 8003af8:	e005      	b.n	8003b06 <UART_SetConfig+0x22a>
 8003afa:	231b      	movs	r3, #27
 8003afc:	2218      	movs	r2, #24
 8003afe:	189b      	adds	r3, r3, r2
 8003b00:	19db      	adds	r3, r3, r7
 8003b02:	2210      	movs	r2, #16
 8003b04:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a46      	ldr	r2, [pc, #280]	; (8003c24 <UART_SetConfig+0x348>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d000      	beq.n	8003b12 <UART_SetConfig+0x236>
 8003b10:	e09a      	b.n	8003c48 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b12:	231b      	movs	r3, #27
 8003b14:	2218      	movs	r2, #24
 8003b16:	189b      	adds	r3, r3, r2
 8003b18:	19db      	adds	r3, r3, r7
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	2b08      	cmp	r3, #8
 8003b1e:	d01d      	beq.n	8003b5c <UART_SetConfig+0x280>
 8003b20:	dc20      	bgt.n	8003b64 <UART_SetConfig+0x288>
 8003b22:	2b04      	cmp	r3, #4
 8003b24:	d015      	beq.n	8003b52 <UART_SetConfig+0x276>
 8003b26:	dc1d      	bgt.n	8003b64 <UART_SetConfig+0x288>
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d002      	beq.n	8003b32 <UART_SetConfig+0x256>
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d005      	beq.n	8003b3c <UART_SetConfig+0x260>
 8003b30:	e018      	b.n	8003b64 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b32:	f7fe fdb7 	bl	80026a4 <HAL_RCC_GetPCLK1Freq>
 8003b36:	0003      	movs	r3, r0
 8003b38:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003b3a:	e01c      	b.n	8003b76 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b3c:	4b3c      	ldr	r3, [pc, #240]	; (8003c30 <UART_SetConfig+0x354>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2210      	movs	r2, #16
 8003b42:	4013      	ands	r3, r2
 8003b44:	d002      	beq.n	8003b4c <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003b46:	4b3e      	ldr	r3, [pc, #248]	; (8003c40 <UART_SetConfig+0x364>)
 8003b48:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003b4a:	e014      	b.n	8003b76 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8003b4c:	4b3d      	ldr	r3, [pc, #244]	; (8003c44 <UART_SetConfig+0x368>)
 8003b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003b50:	e011      	b.n	8003b76 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b52:	f7fe fcf7 	bl	8002544 <HAL_RCC_GetSysClockFreq>
 8003b56:	0003      	movs	r3, r0
 8003b58:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003b5a:	e00c      	b.n	8003b76 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b5c:	2380      	movs	r3, #128	; 0x80
 8003b5e:	021b      	lsls	r3, r3, #8
 8003b60:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003b62:	e008      	b.n	8003b76 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8003b64:	2300      	movs	r3, #0
 8003b66:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003b68:	231a      	movs	r3, #26
 8003b6a:	2218      	movs	r2, #24
 8003b6c:	189b      	adds	r3, r3, r2
 8003b6e:	19db      	adds	r3, r3, r7
 8003b70:	2201      	movs	r2, #1
 8003b72:	701a      	strb	r2, [r3, #0]
        break;
 8003b74:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d100      	bne.n	8003b7e <UART_SetConfig+0x2a2>
 8003b7c:	e134      	b.n	8003de8 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	685a      	ldr	r2, [r3, #4]
 8003b82:	0013      	movs	r3, r2
 8003b84:	005b      	lsls	r3, r3, #1
 8003b86:	189b      	adds	r3, r3, r2
 8003b88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d305      	bcc.n	8003b9a <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d906      	bls.n	8003ba8 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8003b9a:	231a      	movs	r3, #26
 8003b9c:	2218      	movs	r2, #24
 8003b9e:	189b      	adds	r3, r3, r2
 8003ba0:	19db      	adds	r3, r3, r7
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	701a      	strb	r2, [r3, #0]
 8003ba6:	e11f      	b.n	8003de8 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003baa:	613b      	str	r3, [r7, #16]
 8003bac:	2300      	movs	r3, #0
 8003bae:	617b      	str	r3, [r7, #20]
 8003bb0:	6939      	ldr	r1, [r7, #16]
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	000b      	movs	r3, r1
 8003bb6:	0e1b      	lsrs	r3, r3, #24
 8003bb8:	0010      	movs	r0, r2
 8003bba:	0205      	lsls	r5, r0, #8
 8003bbc:	431d      	orrs	r5, r3
 8003bbe:	000b      	movs	r3, r1
 8003bc0:	021c      	lsls	r4, r3, #8
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	085b      	lsrs	r3, r3, #1
 8003bc8:	60bb      	str	r3, [r7, #8]
 8003bca:	2300      	movs	r3, #0
 8003bcc:	60fb      	str	r3, [r7, #12]
 8003bce:	68b8      	ldr	r0, [r7, #8]
 8003bd0:	68f9      	ldr	r1, [r7, #12]
 8003bd2:	1900      	adds	r0, r0, r4
 8003bd4:	4169      	adcs	r1, r5
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	603b      	str	r3, [r7, #0]
 8003bdc:	2300      	movs	r3, #0
 8003bde:	607b      	str	r3, [r7, #4]
 8003be0:	683a      	ldr	r2, [r7, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f7fc fc46 	bl	8000474 <__aeabi_uldivmod>
 8003be8:	0002      	movs	r2, r0
 8003bea:	000b      	movs	r3, r1
 8003bec:	0013      	movs	r3, r2
 8003bee:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003bf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bf2:	23c0      	movs	r3, #192	; 0xc0
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d309      	bcc.n	8003c0e <UART_SetConfig+0x332>
 8003bfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bfc:	2380      	movs	r3, #128	; 0x80
 8003bfe:	035b      	lsls	r3, r3, #13
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d204      	bcs.n	8003c0e <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c0a:	60da      	str	r2, [r3, #12]
 8003c0c:	e0ec      	b.n	8003de8 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 8003c0e:	231a      	movs	r3, #26
 8003c10:	2218      	movs	r2, #24
 8003c12:	189b      	adds	r3, r3, r2
 8003c14:	19db      	adds	r3, r3, r7
 8003c16:	2201      	movs	r2, #1
 8003c18:	701a      	strb	r2, [r3, #0]
 8003c1a:	e0e5      	b.n	8003de8 <UART_SetConfig+0x50c>
 8003c1c:	efff69f3 	.word	0xefff69f3
 8003c20:	ffffcfff 	.word	0xffffcfff
 8003c24:	40004800 	.word	0x40004800
 8003c28:	fffff4ff 	.word	0xfffff4ff
 8003c2c:	40013800 	.word	0x40013800
 8003c30:	40021000 	.word	0x40021000
 8003c34:	40004400 	.word	0x40004400
 8003c38:	40004c00 	.word	0x40004c00
 8003c3c:	40005000 	.word	0x40005000
 8003c40:	003d0900 	.word	0x003d0900
 8003c44:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	69da      	ldr	r2, [r3, #28]
 8003c4c:	2380      	movs	r3, #128	; 0x80
 8003c4e:	021b      	lsls	r3, r3, #8
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d000      	beq.n	8003c56 <UART_SetConfig+0x37a>
 8003c54:	e071      	b.n	8003d3a <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8003c56:	231b      	movs	r3, #27
 8003c58:	2218      	movs	r2, #24
 8003c5a:	189b      	adds	r3, r3, r2
 8003c5c:	19db      	adds	r3, r3, r7
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	2b08      	cmp	r3, #8
 8003c62:	d822      	bhi.n	8003caa <UART_SetConfig+0x3ce>
 8003c64:	009a      	lsls	r2, r3, #2
 8003c66:	4b68      	ldr	r3, [pc, #416]	; (8003e08 <UART_SetConfig+0x52c>)
 8003c68:	18d3      	adds	r3, r2, r3
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c6e:	f7fe fd19 	bl	80026a4 <HAL_RCC_GetPCLK1Freq>
 8003c72:	0003      	movs	r3, r0
 8003c74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003c76:	e021      	b.n	8003cbc <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c78:	f7fe fd2a 	bl	80026d0 <HAL_RCC_GetPCLK2Freq>
 8003c7c:	0003      	movs	r3, r0
 8003c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003c80:	e01c      	b.n	8003cbc <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c82:	4b62      	ldr	r3, [pc, #392]	; (8003e0c <UART_SetConfig+0x530>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2210      	movs	r2, #16
 8003c88:	4013      	ands	r3, r2
 8003c8a:	d002      	beq.n	8003c92 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003c8c:	4b60      	ldr	r3, [pc, #384]	; (8003e10 <UART_SetConfig+0x534>)
 8003c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003c90:	e014      	b.n	8003cbc <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8003c92:	4b60      	ldr	r3, [pc, #384]	; (8003e14 <UART_SetConfig+0x538>)
 8003c94:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003c96:	e011      	b.n	8003cbc <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c98:	f7fe fc54 	bl	8002544 <HAL_RCC_GetSysClockFreq>
 8003c9c:	0003      	movs	r3, r0
 8003c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003ca0:	e00c      	b.n	8003cbc <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ca2:	2380      	movs	r3, #128	; 0x80
 8003ca4:	021b      	lsls	r3, r3, #8
 8003ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003ca8:	e008      	b.n	8003cbc <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8003caa:	2300      	movs	r3, #0
 8003cac:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003cae:	231a      	movs	r3, #26
 8003cb0:	2218      	movs	r2, #24
 8003cb2:	189b      	adds	r3, r3, r2
 8003cb4:	19db      	adds	r3, r3, r7
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	701a      	strb	r2, [r3, #0]
        break;
 8003cba:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d100      	bne.n	8003cc4 <UART_SetConfig+0x3e8>
 8003cc2:	e091      	b.n	8003de8 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc6:	005a      	lsls	r2, r3, #1
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	085b      	lsrs	r3, r3, #1
 8003cce:	18d2      	adds	r2, r2, r3
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	0019      	movs	r1, r3
 8003cd6:	0010      	movs	r0, r2
 8003cd8:	f7fc fa32 	bl	8000140 <__udivsi3>
 8003cdc:	0003      	movs	r3, r0
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce4:	2b0f      	cmp	r3, #15
 8003ce6:	d921      	bls.n	8003d2c <UART_SetConfig+0x450>
 8003ce8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cea:	2380      	movs	r3, #128	; 0x80
 8003cec:	025b      	lsls	r3, r3, #9
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d21c      	bcs.n	8003d2c <UART_SetConfig+0x450>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	200e      	movs	r0, #14
 8003cf8:	2418      	movs	r4, #24
 8003cfa:	1903      	adds	r3, r0, r4
 8003cfc:	19db      	adds	r3, r3, r7
 8003cfe:	210f      	movs	r1, #15
 8003d00:	438a      	bics	r2, r1
 8003d02:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d06:	085b      	lsrs	r3, r3, #1
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	2207      	movs	r2, #7
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	b299      	uxth	r1, r3
 8003d10:	1903      	adds	r3, r0, r4
 8003d12:	19db      	adds	r3, r3, r7
 8003d14:	1902      	adds	r2, r0, r4
 8003d16:	19d2      	adds	r2, r2, r7
 8003d18:	8812      	ldrh	r2, [r2, #0]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	1902      	adds	r2, r0, r4
 8003d24:	19d2      	adds	r2, r2, r7
 8003d26:	8812      	ldrh	r2, [r2, #0]
 8003d28:	60da      	str	r2, [r3, #12]
 8003d2a:	e05d      	b.n	8003de8 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8003d2c:	231a      	movs	r3, #26
 8003d2e:	2218      	movs	r2, #24
 8003d30:	189b      	adds	r3, r3, r2
 8003d32:	19db      	adds	r3, r3, r7
 8003d34:	2201      	movs	r2, #1
 8003d36:	701a      	strb	r2, [r3, #0]
 8003d38:	e056      	b.n	8003de8 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d3a:	231b      	movs	r3, #27
 8003d3c:	2218      	movs	r2, #24
 8003d3e:	189b      	adds	r3, r3, r2
 8003d40:	19db      	adds	r3, r3, r7
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	2b08      	cmp	r3, #8
 8003d46:	d822      	bhi.n	8003d8e <UART_SetConfig+0x4b2>
 8003d48:	009a      	lsls	r2, r3, #2
 8003d4a:	4b33      	ldr	r3, [pc, #204]	; (8003e18 <UART_SetConfig+0x53c>)
 8003d4c:	18d3      	adds	r3, r2, r3
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d52:	f7fe fca7 	bl	80026a4 <HAL_RCC_GetPCLK1Freq>
 8003d56:	0003      	movs	r3, r0
 8003d58:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d5a:	e021      	b.n	8003da0 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d5c:	f7fe fcb8 	bl	80026d0 <HAL_RCC_GetPCLK2Freq>
 8003d60:	0003      	movs	r3, r0
 8003d62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d64:	e01c      	b.n	8003da0 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d66:	4b29      	ldr	r3, [pc, #164]	; (8003e0c <UART_SetConfig+0x530>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2210      	movs	r2, #16
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	d002      	beq.n	8003d76 <UART_SetConfig+0x49a>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003d70:	4b27      	ldr	r3, [pc, #156]	; (8003e10 <UART_SetConfig+0x534>)
 8003d72:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003d74:	e014      	b.n	8003da0 <UART_SetConfig+0x4c4>
          pclk = (uint32_t) HSI_VALUE;
 8003d76:	4b27      	ldr	r3, [pc, #156]	; (8003e14 <UART_SetConfig+0x538>)
 8003d78:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d7a:	e011      	b.n	8003da0 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d7c:	f7fe fbe2 	bl	8002544 <HAL_RCC_GetSysClockFreq>
 8003d80:	0003      	movs	r3, r0
 8003d82:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d84:	e00c      	b.n	8003da0 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d86:	2380      	movs	r3, #128	; 0x80
 8003d88:	021b      	lsls	r3, r3, #8
 8003d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d8c:	e008      	b.n	8003da0 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003d92:	231a      	movs	r3, #26
 8003d94:	2218      	movs	r2, #24
 8003d96:	189b      	adds	r3, r3, r2
 8003d98:	19db      	adds	r3, r3, r7
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	701a      	strb	r2, [r3, #0]
        break;
 8003d9e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d020      	beq.n	8003de8 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	085a      	lsrs	r2, r3, #1
 8003dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dae:	18d2      	adds	r2, r2, r3
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	0019      	movs	r1, r3
 8003db6:	0010      	movs	r0, r2
 8003db8:	f7fc f9c2 	bl	8000140 <__udivsi3>
 8003dbc:	0003      	movs	r3, r0
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc4:	2b0f      	cmp	r3, #15
 8003dc6:	d909      	bls.n	8003ddc <UART_SetConfig+0x500>
 8003dc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dca:	2380      	movs	r3, #128	; 0x80
 8003dcc:	025b      	lsls	r3, r3, #9
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d204      	bcs.n	8003ddc <UART_SetConfig+0x500>
      {
        huart->Instance->BRR = usartdiv;
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dd8:	60da      	str	r2, [r3, #12]
 8003dda:	e005      	b.n	8003de8 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8003ddc:	231a      	movs	r3, #26
 8003dde:	2218      	movs	r2, #24
 8003de0:	189b      	adds	r3, r3, r2
 8003de2:	19db      	adds	r3, r3, r7
 8003de4:	2201      	movs	r2, #1
 8003de6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	2200      	movs	r2, #0
 8003dec:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	2200      	movs	r2, #0
 8003df2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003df4:	231a      	movs	r3, #26
 8003df6:	2218      	movs	r2, #24
 8003df8:	189b      	adds	r3, r3, r2
 8003dfa:	19db      	adds	r3, r3, r7
 8003dfc:	781b      	ldrb	r3, [r3, #0]
}
 8003dfe:	0018      	movs	r0, r3
 8003e00:	46bd      	mov	sp, r7
 8003e02:	b00e      	add	sp, #56	; 0x38
 8003e04:	bdb0      	pop	{r4, r5, r7, pc}
 8003e06:	46c0      	nop			; (mov r8, r8)
 8003e08:	080076c0 	.word	0x080076c0
 8003e0c:	40021000 	.word	0x40021000
 8003e10:	003d0900 	.word	0x003d0900
 8003e14:	00f42400 	.word	0x00f42400
 8003e18:	080076e4 	.word	0x080076e4

08003e1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e28:	2201      	movs	r2, #1
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	d00b      	beq.n	8003e46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	4a4a      	ldr	r2, [pc, #296]	; (8003f60 <UART_AdvFeatureConfig+0x144>)
 8003e36:	4013      	ands	r3, r2
 8003e38:	0019      	movs	r1, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	430a      	orrs	r2, r1
 8003e44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4a:	2202      	movs	r2, #2
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	d00b      	beq.n	8003e68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	4a43      	ldr	r2, [pc, #268]	; (8003f64 <UART_AdvFeatureConfig+0x148>)
 8003e58:	4013      	ands	r3, r2
 8003e5a:	0019      	movs	r1, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	430a      	orrs	r2, r1
 8003e66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6c:	2204      	movs	r2, #4
 8003e6e:	4013      	ands	r3, r2
 8003e70:	d00b      	beq.n	8003e8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	4a3b      	ldr	r2, [pc, #236]	; (8003f68 <UART_AdvFeatureConfig+0x14c>)
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	0019      	movs	r1, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	430a      	orrs	r2, r1
 8003e88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8e:	2208      	movs	r2, #8
 8003e90:	4013      	ands	r3, r2
 8003e92:	d00b      	beq.n	8003eac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	4a34      	ldr	r2, [pc, #208]	; (8003f6c <UART_AdvFeatureConfig+0x150>)
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	0019      	movs	r1, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb0:	2210      	movs	r2, #16
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	d00b      	beq.n	8003ece <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	4a2c      	ldr	r2, [pc, #176]	; (8003f70 <UART_AdvFeatureConfig+0x154>)
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	0019      	movs	r1, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	d00b      	beq.n	8003ef0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	4a25      	ldr	r2, [pc, #148]	; (8003f74 <UART_AdvFeatureConfig+0x158>)
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	0019      	movs	r1, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	430a      	orrs	r2, r1
 8003eee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef4:	2240      	movs	r2, #64	; 0x40
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	d01d      	beq.n	8003f36 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	4a1d      	ldr	r2, [pc, #116]	; (8003f78 <UART_AdvFeatureConfig+0x15c>)
 8003f02:	4013      	ands	r3, r2
 8003f04:	0019      	movs	r1, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f16:	2380      	movs	r3, #128	; 0x80
 8003f18:	035b      	lsls	r3, r3, #13
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d10b      	bne.n	8003f36 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	4a15      	ldr	r2, [pc, #84]	; (8003f7c <UART_AdvFeatureConfig+0x160>)
 8003f26:	4013      	ands	r3, r2
 8003f28:	0019      	movs	r1, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	430a      	orrs	r2, r1
 8003f34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3a:	2280      	movs	r2, #128	; 0x80
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	d00b      	beq.n	8003f58 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	4a0e      	ldr	r2, [pc, #56]	; (8003f80 <UART_AdvFeatureConfig+0x164>)
 8003f48:	4013      	ands	r3, r2
 8003f4a:	0019      	movs	r1, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	430a      	orrs	r2, r1
 8003f56:	605a      	str	r2, [r3, #4]
  }
}
 8003f58:	46c0      	nop			; (mov r8, r8)
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	b002      	add	sp, #8
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	fffdffff 	.word	0xfffdffff
 8003f64:	fffeffff 	.word	0xfffeffff
 8003f68:	fffbffff 	.word	0xfffbffff
 8003f6c:	ffff7fff 	.word	0xffff7fff
 8003f70:	ffffefff 	.word	0xffffefff
 8003f74:	ffffdfff 	.word	0xffffdfff
 8003f78:	ffefffff 	.word	0xffefffff
 8003f7c:	ff9fffff 	.word	0xff9fffff
 8003f80:	fff7ffff 	.word	0xfff7ffff

08003f84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b086      	sub	sp, #24
 8003f88:	af02      	add	r7, sp, #8
 8003f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2280      	movs	r2, #128	; 0x80
 8003f90:	2100      	movs	r1, #0
 8003f92:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f94:	f7fd fb06 	bl	80015a4 <HAL_GetTick>
 8003f98:	0003      	movs	r3, r0
 8003f9a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2208      	movs	r2, #8
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	2b08      	cmp	r3, #8
 8003fa8:	d10c      	bne.n	8003fc4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2280      	movs	r2, #128	; 0x80
 8003fae:	0391      	lsls	r1, r2, #14
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	4a17      	ldr	r2, [pc, #92]	; (8004010 <UART_CheckIdleState+0x8c>)
 8003fb4:	9200      	str	r2, [sp, #0]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f000 f82c 	bl	8004014 <UART_WaitOnFlagUntilTimeout>
 8003fbc:	1e03      	subs	r3, r0, #0
 8003fbe:	d001      	beq.n	8003fc4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e021      	b.n	8004008 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2204      	movs	r2, #4
 8003fcc:	4013      	ands	r3, r2
 8003fce:	2b04      	cmp	r3, #4
 8003fd0:	d10c      	bne.n	8003fec <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2280      	movs	r2, #128	; 0x80
 8003fd6:	03d1      	lsls	r1, r2, #15
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	4a0d      	ldr	r2, [pc, #52]	; (8004010 <UART_CheckIdleState+0x8c>)
 8003fdc:	9200      	str	r2, [sp, #0]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f000 f818 	bl	8004014 <UART_WaitOnFlagUntilTimeout>
 8003fe4:	1e03      	subs	r3, r0, #0
 8003fe6:	d001      	beq.n	8003fec <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e00d      	b.n	8004008 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2220      	movs	r2, #32
 8003ff0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2220      	movs	r2, #32
 8003ff6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2274      	movs	r2, #116	; 0x74
 8004002:	2100      	movs	r1, #0
 8004004:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004006:	2300      	movs	r3, #0
}
 8004008:	0018      	movs	r0, r3
 800400a:	46bd      	mov	sp, r7
 800400c:	b004      	add	sp, #16
 800400e:	bd80      	pop	{r7, pc}
 8004010:	01ffffff 	.word	0x01ffffff

08004014 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b094      	sub	sp, #80	; 0x50
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	603b      	str	r3, [r7, #0]
 8004020:	1dfb      	adds	r3, r7, #7
 8004022:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004024:	e0a3      	b.n	800416e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004026:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004028:	3301      	adds	r3, #1
 800402a:	d100      	bne.n	800402e <UART_WaitOnFlagUntilTimeout+0x1a>
 800402c:	e09f      	b.n	800416e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800402e:	f7fd fab9 	bl	80015a4 <HAL_GetTick>
 8004032:	0002      	movs	r2, r0
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800403a:	429a      	cmp	r2, r3
 800403c:	d302      	bcc.n	8004044 <UART_WaitOnFlagUntilTimeout+0x30>
 800403e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004040:	2b00      	cmp	r3, #0
 8004042:	d13d      	bne.n	80040c0 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004044:	f3ef 8310 	mrs	r3, PRIMASK
 8004048:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800404a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800404c:	647b      	str	r3, [r7, #68]	; 0x44
 800404e:	2301      	movs	r3, #1
 8004050:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004054:	f383 8810 	msr	PRIMASK, r3
}
 8004058:	46c0      	nop			; (mov r8, r8)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	494c      	ldr	r1, [pc, #304]	; (8004198 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004066:	400a      	ands	r2, r1
 8004068:	601a      	str	r2, [r3, #0]
 800406a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800406c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800406e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004070:	f383 8810 	msr	PRIMASK, r3
}
 8004074:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004076:	f3ef 8310 	mrs	r3, PRIMASK
 800407a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800407c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800407e:	643b      	str	r3, [r7, #64]	; 0x40
 8004080:	2301      	movs	r3, #1
 8004082:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004086:	f383 8810 	msr	PRIMASK, r3
}
 800408a:	46c0      	nop			; (mov r8, r8)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	689a      	ldr	r2, [r3, #8]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2101      	movs	r1, #1
 8004098:	438a      	bics	r2, r1
 800409a:	609a      	str	r2, [r3, #8]
 800409c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800409e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040a2:	f383 8810 	msr	PRIMASK, r3
}
 80040a6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2220      	movs	r2, #32
 80040ac:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2220      	movs	r2, #32
 80040b2:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2274      	movs	r2, #116	; 0x74
 80040b8:	2100      	movs	r1, #0
 80040ba:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e067      	b.n	8004190 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2204      	movs	r2, #4
 80040c8:	4013      	ands	r3, r2
 80040ca:	d050      	beq.n	800416e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	69da      	ldr	r2, [r3, #28]
 80040d2:	2380      	movs	r3, #128	; 0x80
 80040d4:	011b      	lsls	r3, r3, #4
 80040d6:	401a      	ands	r2, r3
 80040d8:	2380      	movs	r3, #128	; 0x80
 80040da:	011b      	lsls	r3, r3, #4
 80040dc:	429a      	cmp	r2, r3
 80040de:	d146      	bne.n	800416e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2280      	movs	r2, #128	; 0x80
 80040e6:	0112      	lsls	r2, r2, #4
 80040e8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040ea:	f3ef 8310 	mrs	r3, PRIMASK
 80040ee:	613b      	str	r3, [r7, #16]
  return(result);
 80040f0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040f4:	2301      	movs	r3, #1
 80040f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	f383 8810 	msr	PRIMASK, r3
}
 80040fe:	46c0      	nop			; (mov r8, r8)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4923      	ldr	r1, [pc, #140]	; (8004198 <UART_WaitOnFlagUntilTimeout+0x184>)
 800410c:	400a      	ands	r2, r1
 800410e:	601a      	str	r2, [r3, #0]
 8004110:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004112:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	f383 8810 	msr	PRIMASK, r3
}
 800411a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800411c:	f3ef 8310 	mrs	r3, PRIMASK
 8004120:	61fb      	str	r3, [r7, #28]
  return(result);
 8004122:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004124:	64bb      	str	r3, [r7, #72]	; 0x48
 8004126:	2301      	movs	r3, #1
 8004128:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800412a:	6a3b      	ldr	r3, [r7, #32]
 800412c:	f383 8810 	msr	PRIMASK, r3
}
 8004130:	46c0      	nop			; (mov r8, r8)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	689a      	ldr	r2, [r3, #8]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2101      	movs	r1, #1
 800413e:	438a      	bics	r2, r1
 8004140:	609a      	str	r2, [r3, #8]
 8004142:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004144:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004148:	f383 8810 	msr	PRIMASK, r3
}
 800414c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2220      	movs	r2, #32
 8004152:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2220      	movs	r2, #32
 8004158:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2280      	movs	r2, #128	; 0x80
 800415e:	2120      	movs	r1, #32
 8004160:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2274      	movs	r2, #116	; 0x74
 8004166:	2100      	movs	r1, #0
 8004168:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e010      	b.n	8004190 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	69db      	ldr	r3, [r3, #28]
 8004174:	68ba      	ldr	r2, [r7, #8]
 8004176:	4013      	ands	r3, r2
 8004178:	68ba      	ldr	r2, [r7, #8]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	425a      	negs	r2, r3
 800417e:	4153      	adcs	r3, r2
 8004180:	b2db      	uxtb	r3, r3
 8004182:	001a      	movs	r2, r3
 8004184:	1dfb      	adds	r3, r7, #7
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	429a      	cmp	r2, r3
 800418a:	d100      	bne.n	800418e <UART_WaitOnFlagUntilTimeout+0x17a>
 800418c:	e74b      	b.n	8004026 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800418e:	2300      	movs	r3, #0
}
 8004190:	0018      	movs	r0, r3
 8004192:	46bd      	mov	sp, r7
 8004194:	b014      	add	sp, #80	; 0x50
 8004196:	bd80      	pop	{r7, pc}
 8004198:	fffffe5f 	.word	0xfffffe5f

0800419c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b08c      	sub	sp, #48	; 0x30
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	1dbb      	adds	r3, r7, #6
 80041a8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	68ba      	ldr	r2, [r7, #8]
 80041ae:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	1dba      	adds	r2, r7, #6
 80041b4:	2158      	movs	r1, #88	; 0x58
 80041b6:	8812      	ldrh	r2, [r2, #0]
 80041b8:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	1dba      	adds	r2, r7, #6
 80041be:	215a      	movs	r1, #90	; 0x5a
 80041c0:	8812      	ldrh	r2, [r2, #0]
 80041c2:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	689a      	ldr	r2, [r3, #8]
 80041ce:	2380      	movs	r3, #128	; 0x80
 80041d0:	015b      	lsls	r3, r3, #5
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d10d      	bne.n	80041f2 <UART_Start_Receive_IT+0x56>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d104      	bne.n	80041e8 <UART_Start_Receive_IT+0x4c>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	225c      	movs	r2, #92	; 0x5c
 80041e2:	4943      	ldr	r1, [pc, #268]	; (80042f0 <UART_Start_Receive_IT+0x154>)
 80041e4:	5299      	strh	r1, [r3, r2]
 80041e6:	e02e      	b.n	8004246 <UART_Start_Receive_IT+0xaa>
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	225c      	movs	r2, #92	; 0x5c
 80041ec:	21ff      	movs	r1, #255	; 0xff
 80041ee:	5299      	strh	r1, [r3, r2]
 80041f0:	e029      	b.n	8004246 <UART_Start_Receive_IT+0xaa>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d10d      	bne.n	8004216 <UART_Start_Receive_IT+0x7a>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d104      	bne.n	800420c <UART_Start_Receive_IT+0x70>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	225c      	movs	r2, #92	; 0x5c
 8004206:	21ff      	movs	r1, #255	; 0xff
 8004208:	5299      	strh	r1, [r3, r2]
 800420a:	e01c      	b.n	8004246 <UART_Start_Receive_IT+0xaa>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	225c      	movs	r2, #92	; 0x5c
 8004210:	217f      	movs	r1, #127	; 0x7f
 8004212:	5299      	strh	r1, [r3, r2]
 8004214:	e017      	b.n	8004246 <UART_Start_Receive_IT+0xaa>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	689a      	ldr	r2, [r3, #8]
 800421a:	2380      	movs	r3, #128	; 0x80
 800421c:	055b      	lsls	r3, r3, #21
 800421e:	429a      	cmp	r2, r3
 8004220:	d10d      	bne.n	800423e <UART_Start_Receive_IT+0xa2>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d104      	bne.n	8004234 <UART_Start_Receive_IT+0x98>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	225c      	movs	r2, #92	; 0x5c
 800422e:	217f      	movs	r1, #127	; 0x7f
 8004230:	5299      	strh	r1, [r3, r2]
 8004232:	e008      	b.n	8004246 <UART_Start_Receive_IT+0xaa>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	225c      	movs	r2, #92	; 0x5c
 8004238:	213f      	movs	r1, #63	; 0x3f
 800423a:	5299      	strh	r1, [r3, r2]
 800423c:	e003      	b.n	8004246 <UART_Start_Receive_IT+0xaa>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	225c      	movs	r2, #92	; 0x5c
 8004242:	2100      	movs	r1, #0
 8004244:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2280      	movs	r2, #128	; 0x80
 800424a:	2100      	movs	r1, #0
 800424c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2222      	movs	r2, #34	; 0x22
 8004252:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004254:	f3ef 8310 	mrs	r3, PRIMASK
 8004258:	61fb      	str	r3, [r7, #28]
  return(result);
 800425a:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800425c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800425e:	2301      	movs	r3, #1
 8004260:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004262:	6a3b      	ldr	r3, [r7, #32]
 8004264:	f383 8810 	msr	PRIMASK, r3
}
 8004268:	46c0      	nop			; (mov r8, r8)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	689a      	ldr	r2, [r3, #8]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2101      	movs	r1, #1
 8004276:	430a      	orrs	r2, r1
 8004278:	609a      	str	r2, [r3, #8]
 800427a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800427c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800427e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004280:	f383 8810 	msr	PRIMASK, r3
}
 8004284:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	689a      	ldr	r2, [r3, #8]
 800428a:	2380      	movs	r3, #128	; 0x80
 800428c:	015b      	lsls	r3, r3, #5
 800428e:	429a      	cmp	r2, r3
 8004290:	d107      	bne.n	80042a2 <UART_Start_Receive_IT+0x106>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d103      	bne.n	80042a2 <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	4a15      	ldr	r2, [pc, #84]	; (80042f4 <UART_Start_Receive_IT+0x158>)
 800429e:	665a      	str	r2, [r3, #100]	; 0x64
 80042a0:	e002      	b.n	80042a8 <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	4a14      	ldr	r2, [pc, #80]	; (80042f8 <UART_Start_Receive_IT+0x15c>)
 80042a6:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2274      	movs	r2, #116	; 0x74
 80042ac:	2100      	movs	r1, #0
 80042ae:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042b0:	f3ef 8310 	mrs	r3, PRIMASK
 80042b4:	613b      	str	r3, [r7, #16]
  return(result);
 80042b6:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80042b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80042ba:	2301      	movs	r3, #1
 80042bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	f383 8810 	msr	PRIMASK, r3
}
 80042c4:	46c0      	nop			; (mov r8, r8)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2190      	movs	r1, #144	; 0x90
 80042d2:	0049      	lsls	r1, r1, #1
 80042d4:	430a      	orrs	r2, r1
 80042d6:	601a      	str	r2, [r3, #0]
 80042d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042da:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	f383 8810 	msr	PRIMASK, r3
}
 80042e2:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	0018      	movs	r0, r3
 80042e8:	46bd      	mov	sp, r7
 80042ea:	b00c      	add	sp, #48	; 0x30
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	46c0      	nop			; (mov r8, r8)
 80042f0:	000001ff 	.word	0x000001ff
 80042f4:	080045ad 	.word	0x080045ad
 80042f8:	08004445 	.word	0x08004445

080042fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b08e      	sub	sp, #56	; 0x38
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004304:	f3ef 8310 	mrs	r3, PRIMASK
 8004308:	617b      	str	r3, [r7, #20]
  return(result);
 800430a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800430c:	637b      	str	r3, [r7, #52]	; 0x34
 800430e:	2301      	movs	r3, #1
 8004310:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	f383 8810 	msr	PRIMASK, r3
}
 8004318:	46c0      	nop			; (mov r8, r8)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4925      	ldr	r1, [pc, #148]	; (80043bc <UART_EndRxTransfer+0xc0>)
 8004326:	400a      	ands	r2, r1
 8004328:	601a      	str	r2, [r3, #0]
 800432a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800432c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	f383 8810 	msr	PRIMASK, r3
}
 8004334:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004336:	f3ef 8310 	mrs	r3, PRIMASK
 800433a:	623b      	str	r3, [r7, #32]
  return(result);
 800433c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800433e:	633b      	str	r3, [r7, #48]	; 0x30
 8004340:	2301      	movs	r3, #1
 8004342:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004346:	f383 8810 	msr	PRIMASK, r3
}
 800434a:	46c0      	nop			; (mov r8, r8)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	689a      	ldr	r2, [r3, #8]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2101      	movs	r1, #1
 8004358:	438a      	bics	r2, r1
 800435a:	609a      	str	r2, [r3, #8]
 800435c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800435e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004362:	f383 8810 	msr	PRIMASK, r3
}
 8004366:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800436c:	2b01      	cmp	r3, #1
 800436e:	d118      	bne.n	80043a2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004370:	f3ef 8310 	mrs	r3, PRIMASK
 8004374:	60bb      	str	r3, [r7, #8]
  return(result);
 8004376:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004378:	62fb      	str	r3, [r7, #44]	; 0x2c
 800437a:	2301      	movs	r3, #1
 800437c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f383 8810 	msr	PRIMASK, r3
}
 8004384:	46c0      	nop			; (mov r8, r8)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2110      	movs	r1, #16
 8004392:	438a      	bics	r2, r1
 8004394:	601a      	str	r2, [r3, #0]
 8004396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004398:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	f383 8810 	msr	PRIMASK, r3
}
 80043a0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2220      	movs	r2, #32
 80043a6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	665a      	str	r2, [r3, #100]	; 0x64
}
 80043b4:	46c0      	nop			; (mov r8, r8)
 80043b6:	46bd      	mov	sp, r7
 80043b8:	b00e      	add	sp, #56	; 0x38
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	fffffedf 	.word	0xfffffedf

080043c0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	225a      	movs	r2, #90	; 0x5a
 80043d2:	2100      	movs	r1, #0
 80043d4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2252      	movs	r2, #82	; 0x52
 80043da:	2100      	movs	r1, #0
 80043dc:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	0018      	movs	r0, r3
 80043e2:	f7ff fa67 	bl	80038b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043e6:	46c0      	nop			; (mov r8, r8)
 80043e8:	46bd      	mov	sp, r7
 80043ea:	b004      	add	sp, #16
 80043ec:	bd80      	pop	{r7, pc}

080043ee <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043ee:	b580      	push	{r7, lr}
 80043f0:	b086      	sub	sp, #24
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043f6:	f3ef 8310 	mrs	r3, PRIMASK
 80043fa:	60bb      	str	r3, [r7, #8]
  return(result);
 80043fc:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80043fe:	617b      	str	r3, [r7, #20]
 8004400:	2301      	movs	r3, #1
 8004402:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f383 8810 	msr	PRIMASK, r3
}
 800440a:	46c0      	nop			; (mov r8, r8)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2140      	movs	r1, #64	; 0x40
 8004418:	438a      	bics	r2, r1
 800441a:	601a      	str	r2, [r3, #0]
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	f383 8810 	msr	PRIMASK, r3
}
 8004426:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2220      	movs	r2, #32
 800442c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	0018      	movs	r0, r3
 8004438:	f7ff fa34 	bl	80038a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800443c:	46c0      	nop			; (mov r8, r8)
 800443e:	46bd      	mov	sp, r7
 8004440:	b006      	add	sp, #24
 8004442:	bd80      	pop	{r7, pc}

08004444 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b090      	sub	sp, #64	; 0x40
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800444c:	203e      	movs	r0, #62	; 0x3e
 800444e:	183b      	adds	r3, r7, r0
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	215c      	movs	r1, #92	; 0x5c
 8004454:	5a52      	ldrh	r2, [r2, r1]
 8004456:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800445c:	2b22      	cmp	r3, #34	; 0x22
 800445e:	d000      	beq.n	8004462 <UART_RxISR_8BIT+0x1e>
 8004460:	e095      	b.n	800458e <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004468:	213c      	movs	r1, #60	; 0x3c
 800446a:	187b      	adds	r3, r7, r1
 800446c:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800446e:	187b      	adds	r3, r7, r1
 8004470:	881b      	ldrh	r3, [r3, #0]
 8004472:	b2da      	uxtb	r2, r3
 8004474:	183b      	adds	r3, r7, r0
 8004476:	881b      	ldrh	r3, [r3, #0]
 8004478:	b2d9      	uxtb	r1, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800447e:	400a      	ands	r2, r1
 8004480:	b2d2      	uxtb	r2, r2
 8004482:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004488:	1c5a      	adds	r2, r3, #1
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	225a      	movs	r2, #90	; 0x5a
 8004492:	5a9b      	ldrh	r3, [r3, r2]
 8004494:	b29b      	uxth	r3, r3
 8004496:	3b01      	subs	r3, #1
 8004498:	b299      	uxth	r1, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	225a      	movs	r2, #90	; 0x5a
 800449e:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	225a      	movs	r2, #90	; 0x5a
 80044a4:	5a9b      	ldrh	r3, [r3, r2]
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d178      	bne.n	800459e <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044ac:	f3ef 8310 	mrs	r3, PRIMASK
 80044b0:	61bb      	str	r3, [r7, #24]
  return(result);
 80044b2:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80044b6:	2301      	movs	r3, #1
 80044b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	f383 8810 	msr	PRIMASK, r3
}
 80044c0:	46c0      	nop			; (mov r8, r8)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4936      	ldr	r1, [pc, #216]	; (80045a8 <UART_RxISR_8BIT+0x164>)
 80044ce:	400a      	ands	r2, r1
 80044d0:	601a      	str	r2, [r3, #0]
 80044d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044d6:	6a3b      	ldr	r3, [r7, #32]
 80044d8:	f383 8810 	msr	PRIMASK, r3
}
 80044dc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044de:	f3ef 8310 	mrs	r3, PRIMASK
 80044e2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80044e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044e6:	637b      	str	r3, [r7, #52]	; 0x34
 80044e8:	2301      	movs	r3, #1
 80044ea:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ee:	f383 8810 	msr	PRIMASK, r3
}
 80044f2:	46c0      	nop			; (mov r8, r8)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	689a      	ldr	r2, [r3, #8]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2101      	movs	r1, #1
 8004500:	438a      	bics	r2, r1
 8004502:	609a      	str	r2, [r3, #8]
 8004504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004506:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800450a:	f383 8810 	msr	PRIMASK, r3
}
 800450e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2220      	movs	r2, #32
 8004514:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004520:	2b01      	cmp	r3, #1
 8004522:	d12f      	bne.n	8004584 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800452a:	f3ef 8310 	mrs	r3, PRIMASK
 800452e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004530:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004532:	633b      	str	r3, [r7, #48]	; 0x30
 8004534:	2301      	movs	r3, #1
 8004536:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	f383 8810 	msr	PRIMASK, r3
}
 800453e:	46c0      	nop			; (mov r8, r8)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2110      	movs	r1, #16
 800454c:	438a      	bics	r2, r1
 800454e:	601a      	str	r2, [r3, #0]
 8004550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004552:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	f383 8810 	msr	PRIMASK, r3
}
 800455a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	69db      	ldr	r3, [r3, #28]
 8004562:	2210      	movs	r2, #16
 8004564:	4013      	ands	r3, r2
 8004566:	2b10      	cmp	r3, #16
 8004568:	d103      	bne.n	8004572 <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2210      	movs	r2, #16
 8004570:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2258      	movs	r2, #88	; 0x58
 8004576:	5a9a      	ldrh	r2, [r3, r2]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	0011      	movs	r1, r2
 800457c:	0018      	movs	r0, r3
 800457e:	f7ff f9a1 	bl	80038c4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004582:	e00c      	b.n	800459e <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	0018      	movs	r0, r3
 8004588:	f7fc ff42 	bl	8001410 <HAL_UART_RxCpltCallback>
}
 800458c:	e007      	b.n	800459e <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	699a      	ldr	r2, [r3, #24]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2108      	movs	r1, #8
 800459a:	430a      	orrs	r2, r1
 800459c:	619a      	str	r2, [r3, #24]
}
 800459e:	46c0      	nop			; (mov r8, r8)
 80045a0:	46bd      	mov	sp, r7
 80045a2:	b010      	add	sp, #64	; 0x40
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	46c0      	nop			; (mov r8, r8)
 80045a8:	fffffedf 	.word	0xfffffedf

080045ac <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b090      	sub	sp, #64	; 0x40
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80045b4:	203e      	movs	r0, #62	; 0x3e
 80045b6:	183b      	adds	r3, r7, r0
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	215c      	movs	r1, #92	; 0x5c
 80045bc:	5a52      	ldrh	r2, [r2, r1]
 80045be:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045c4:	2b22      	cmp	r3, #34	; 0x22
 80045c6:	d000      	beq.n	80045ca <UART_RxISR_16BIT+0x1e>
 80045c8:	e095      	b.n	80046f6 <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045d0:	213c      	movs	r1, #60	; 0x3c
 80045d2:	187b      	adds	r3, r7, r1
 80045d4:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045da:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 80045dc:	187b      	adds	r3, r7, r1
 80045de:	183a      	adds	r2, r7, r0
 80045e0:	881b      	ldrh	r3, [r3, #0]
 80045e2:	8812      	ldrh	r2, [r2, #0]
 80045e4:	4013      	ands	r3, r2
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ea:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f0:	1c9a      	adds	r2, r3, #2
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	225a      	movs	r2, #90	; 0x5a
 80045fa:	5a9b      	ldrh	r3, [r3, r2]
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	3b01      	subs	r3, #1
 8004600:	b299      	uxth	r1, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	225a      	movs	r2, #90	; 0x5a
 8004606:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	225a      	movs	r2, #90	; 0x5a
 800460c:	5a9b      	ldrh	r3, [r3, r2]
 800460e:	b29b      	uxth	r3, r3
 8004610:	2b00      	cmp	r3, #0
 8004612:	d178      	bne.n	8004706 <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004614:	f3ef 8310 	mrs	r3, PRIMASK
 8004618:	617b      	str	r3, [r7, #20]
  return(result);
 800461a:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800461c:	637b      	str	r3, [r7, #52]	; 0x34
 800461e:	2301      	movs	r3, #1
 8004620:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	f383 8810 	msr	PRIMASK, r3
}
 8004628:	46c0      	nop			; (mov r8, r8)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4936      	ldr	r1, [pc, #216]	; (8004710 <UART_RxISR_16BIT+0x164>)
 8004636:	400a      	ands	r2, r1
 8004638:	601a      	str	r2, [r3, #0]
 800463a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800463c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	f383 8810 	msr	PRIMASK, r3
}
 8004644:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004646:	f3ef 8310 	mrs	r3, PRIMASK
 800464a:	623b      	str	r3, [r7, #32]
  return(result);
 800464c:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800464e:	633b      	str	r3, [r7, #48]	; 0x30
 8004650:	2301      	movs	r3, #1
 8004652:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004656:	f383 8810 	msr	PRIMASK, r3
}
 800465a:	46c0      	nop			; (mov r8, r8)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	689a      	ldr	r2, [r3, #8]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2101      	movs	r1, #1
 8004668:	438a      	bics	r2, r1
 800466a:	609a      	str	r2, [r3, #8]
 800466c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800466e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004672:	f383 8810 	msr	PRIMASK, r3
}
 8004676:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2220      	movs	r2, #32
 800467c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004688:	2b01      	cmp	r3, #1
 800468a:	d12f      	bne.n	80046ec <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004692:	f3ef 8310 	mrs	r3, PRIMASK
 8004696:	60bb      	str	r3, [r7, #8]
  return(result);
 8004698:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800469a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800469c:	2301      	movs	r3, #1
 800469e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f383 8810 	msr	PRIMASK, r3
}
 80046a6:	46c0      	nop			; (mov r8, r8)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2110      	movs	r1, #16
 80046b4:	438a      	bics	r2, r1
 80046b6:	601a      	str	r2, [r3, #0]
 80046b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	f383 8810 	msr	PRIMASK, r3
}
 80046c2:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	69db      	ldr	r3, [r3, #28]
 80046ca:	2210      	movs	r2, #16
 80046cc:	4013      	ands	r3, r2
 80046ce:	2b10      	cmp	r3, #16
 80046d0:	d103      	bne.n	80046da <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2210      	movs	r2, #16
 80046d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2258      	movs	r2, #88	; 0x58
 80046de:	5a9a      	ldrh	r2, [r3, r2]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	0011      	movs	r1, r2
 80046e4:	0018      	movs	r0, r3
 80046e6:	f7ff f8ed 	bl	80038c4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80046ea:	e00c      	b.n	8004706 <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	0018      	movs	r0, r3
 80046f0:	f7fc fe8e 	bl	8001410 <HAL_UART_RxCpltCallback>
}
 80046f4:	e007      	b.n	8004706 <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	699a      	ldr	r2, [r3, #24]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2108      	movs	r1, #8
 8004702:	430a      	orrs	r2, r1
 8004704:	619a      	str	r2, [r3, #24]
}
 8004706:	46c0      	nop			; (mov r8, r8)
 8004708:	46bd      	mov	sp, r7
 800470a:	b010      	add	sp, #64	; 0x40
 800470c:	bd80      	pop	{r7, pc}
 800470e:	46c0      	nop			; (mov r8, r8)
 8004710:	fffffedf 	.word	0xfffffedf

08004714 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800471c:	46c0      	nop			; (mov r8, r8)
 800471e:	46bd      	mov	sp, r7
 8004720:	b002      	add	sp, #8
 8004722:	bd80      	pop	{r7, pc}

08004724 <atoi>:
 8004724:	b510      	push	{r4, lr}
 8004726:	220a      	movs	r2, #10
 8004728:	2100      	movs	r1, #0
 800472a:	f000 fe21 	bl	8005370 <strtol>
 800472e:	bd10      	pop	{r4, pc}

08004730 <__errno>:
 8004730:	4b01      	ldr	r3, [pc, #4]	; (8004738 <__errno+0x8>)
 8004732:	6818      	ldr	r0, [r3, #0]
 8004734:	4770      	bx	lr
 8004736:	46c0      	nop			; (mov r8, r8)
 8004738:	20000018 	.word	0x20000018

0800473c <__libc_init_array>:
 800473c:	b570      	push	{r4, r5, r6, lr}
 800473e:	2600      	movs	r6, #0
 8004740:	4d0c      	ldr	r5, [pc, #48]	; (8004774 <__libc_init_array+0x38>)
 8004742:	4c0d      	ldr	r4, [pc, #52]	; (8004778 <__libc_init_array+0x3c>)
 8004744:	1b64      	subs	r4, r4, r5
 8004746:	10a4      	asrs	r4, r4, #2
 8004748:	42a6      	cmp	r6, r4
 800474a:	d109      	bne.n	8004760 <__libc_init_array+0x24>
 800474c:	2600      	movs	r6, #0
 800474e:	f002 ff3b 	bl	80075c8 <_init>
 8004752:	4d0a      	ldr	r5, [pc, #40]	; (800477c <__libc_init_array+0x40>)
 8004754:	4c0a      	ldr	r4, [pc, #40]	; (8004780 <__libc_init_array+0x44>)
 8004756:	1b64      	subs	r4, r4, r5
 8004758:	10a4      	asrs	r4, r4, #2
 800475a:	42a6      	cmp	r6, r4
 800475c:	d105      	bne.n	800476a <__libc_init_array+0x2e>
 800475e:	bd70      	pop	{r4, r5, r6, pc}
 8004760:	00b3      	lsls	r3, r6, #2
 8004762:	58eb      	ldr	r3, [r5, r3]
 8004764:	4798      	blx	r3
 8004766:	3601      	adds	r6, #1
 8004768:	e7ee      	b.n	8004748 <__libc_init_array+0xc>
 800476a:	00b3      	lsls	r3, r6, #2
 800476c:	58eb      	ldr	r3, [r5, r3]
 800476e:	4798      	blx	r3
 8004770:	3601      	adds	r6, #1
 8004772:	e7f2      	b.n	800475a <__libc_init_array+0x1e>
 8004774:	08007ad0 	.word	0x08007ad0
 8004778:	08007ad0 	.word	0x08007ad0
 800477c:	08007ad0 	.word	0x08007ad0
 8004780:	08007ad4 	.word	0x08007ad4

08004784 <localtime>:
 8004784:	4b0b      	ldr	r3, [pc, #44]	; (80047b4 <localtime+0x30>)
 8004786:	b570      	push	{r4, r5, r6, lr}
 8004788:	681d      	ldr	r5, [r3, #0]
 800478a:	0004      	movs	r4, r0
 800478c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800478e:	2b00      	cmp	r3, #0
 8004790:	d10a      	bne.n	80047a8 <localtime+0x24>
 8004792:	2024      	movs	r0, #36	; 0x24
 8004794:	f000 f916 	bl	80049c4 <malloc>
 8004798:	1e02      	subs	r2, r0, #0
 800479a:	63e8      	str	r0, [r5, #60]	; 0x3c
 800479c:	d104      	bne.n	80047a8 <localtime+0x24>
 800479e:	2132      	movs	r1, #50	; 0x32
 80047a0:	4b05      	ldr	r3, [pc, #20]	; (80047b8 <localtime+0x34>)
 80047a2:	4806      	ldr	r0, [pc, #24]	; (80047bc <localtime+0x38>)
 80047a4:	f001 f844 	bl	8005830 <__assert_func>
 80047a8:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 80047aa:	0020      	movs	r0, r4
 80047ac:	f000 f808 	bl	80047c0 <localtime_r>
 80047b0:	bd70      	pop	{r4, r5, r6, pc}
 80047b2:	46c0      	nop			; (mov r8, r8)
 80047b4:	20000018 	.word	0x20000018
 80047b8:	0800770c 	.word	0x0800770c
 80047bc:	08007723 	.word	0x08007723

080047c0 <localtime_r>:
 80047c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047c2:	000c      	movs	r4, r1
 80047c4:	0006      	movs	r6, r0
 80047c6:	f001 f8bb 	bl	8005940 <__gettzinfo>
 80047ca:	0021      	movs	r1, r4
 80047cc:	0005      	movs	r5, r0
 80047ce:	0030      	movs	r0, r6
 80047d0:	f001 f8ba 	bl	8005948 <gmtime_r>
 80047d4:	4a77      	ldr	r2, [pc, #476]	; (80049b4 <localtime_r+0x1f4>)
 80047d6:	6943      	ldr	r3, [r0, #20]
 80047d8:	0004      	movs	r4, r0
 80047da:	189f      	adds	r7, r3, r2
 80047dc:	079b      	lsls	r3, r3, #30
 80047de:	d106      	bne.n	80047ee <localtime_r+0x2e>
 80047e0:	2164      	movs	r1, #100	; 0x64
 80047e2:	0038      	movs	r0, r7
 80047e4:	f7fb fe1c 	bl	8000420 <__aeabi_idivmod>
 80047e8:	2301      	movs	r3, #1
 80047ea:	2900      	cmp	r1, #0
 80047ec:	d106      	bne.n	80047fc <localtime_r+0x3c>
 80047ee:	21c8      	movs	r1, #200	; 0xc8
 80047f0:	0038      	movs	r0, r7
 80047f2:	0049      	lsls	r1, r1, #1
 80047f4:	f7fb fe14 	bl	8000420 <__aeabi_idivmod>
 80047f8:	424b      	negs	r3, r1
 80047fa:	414b      	adcs	r3, r1
 80047fc:	2130      	movs	r1, #48	; 0x30
 80047fe:	434b      	muls	r3, r1
 8004800:	496d      	ldr	r1, [pc, #436]	; (80049b8 <localtime_r+0x1f8>)
 8004802:	185b      	adds	r3, r3, r1
 8004804:	9301      	str	r3, [sp, #4]
 8004806:	f000 fe79 	bl	80054fc <__tz_lock>
 800480a:	f000 fe87 	bl	800551c <_tzset_unlocked>
 800480e:	4b6b      	ldr	r3, [pc, #428]	; (80049bc <localtime_r+0x1fc>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d02c      	beq.n	8004870 <localtime_r+0xb0>
 8004816:	686b      	ldr	r3, [r5, #4]
 8004818:	42bb      	cmp	r3, r7
 800481a:	d11b      	bne.n	8004854 <localtime_r+0x94>
 800481c:	ce0a      	ldmia	r6!, {r1, r3}
 800481e:	682e      	ldr	r6, [r5, #0]
 8004820:	6a28      	ldr	r0, [r5, #32]
 8004822:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8004824:	2e00      	cmp	r6, #0
 8004826:	d11d      	bne.n	8004864 <localtime_r+0xa4>
 8004828:	429a      	cmp	r2, r3
 800482a:	dc02      	bgt.n	8004832 <localtime_r+0x72>
 800482c:	d129      	bne.n	8004882 <localtime_r+0xc2>
 800482e:	4288      	cmp	r0, r1
 8004830:	d927      	bls.n	8004882 <localtime_r+0xc2>
 8004832:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 8004834:	2601      	movs	r6, #1
 8004836:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 8004838:	429a      	cmp	r2, r3
 800483a:	dc03      	bgt.n	8004844 <localtime_r+0x84>
 800483c:	d101      	bne.n	8004842 <localtime_r+0x82>
 800483e:	4288      	cmp	r0, r1
 8004840:	d800      	bhi.n	8004844 <localtime_r+0x84>
 8004842:	2600      	movs	r6, #0
 8004844:	6226      	str	r6, [r4, #32]
 8004846:	429a      	cmp	r2, r3
 8004848:	dc1d      	bgt.n	8004886 <localtime_r+0xc6>
 800484a:	d101      	bne.n	8004850 <localtime_r+0x90>
 800484c:	4288      	cmp	r0, r1
 800484e:	d81a      	bhi.n	8004886 <localtime_r+0xc6>
 8004850:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 8004852:	e019      	b.n	8004888 <localtime_r+0xc8>
 8004854:	0038      	movs	r0, r7
 8004856:	f000 fd97 	bl	8005388 <__tzcalc_limits>
 800485a:	2800      	cmp	r0, #0
 800485c:	d1de      	bne.n	800481c <localtime_r+0x5c>
 800485e:	2301      	movs	r3, #1
 8004860:	425b      	negs	r3, r3
 8004862:	e005      	b.n	8004870 <localtime_r+0xb0>
 8004864:	429a      	cmp	r2, r3
 8004866:	dc02      	bgt.n	800486e <localtime_r+0xae>
 8004868:	d104      	bne.n	8004874 <localtime_r+0xb4>
 800486a:	4288      	cmp	r0, r1
 800486c:	d902      	bls.n	8004874 <localtime_r+0xb4>
 800486e:	2300      	movs	r3, #0
 8004870:	6223      	str	r3, [r4, #32]
 8004872:	e7ed      	b.n	8004850 <localtime_r+0x90>
 8004874:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 8004876:	429a      	cmp	r2, r3
 8004878:	dc03      	bgt.n	8004882 <localtime_r+0xc2>
 800487a:	d1f8      	bne.n	800486e <localtime_r+0xae>
 800487c:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800487e:	428b      	cmp	r3, r1
 8004880:	d9f5      	bls.n	800486e <localtime_r+0xae>
 8004882:	2301      	movs	r3, #1
 8004884:	6223      	str	r3, [r4, #32]
 8004886:	6d2f      	ldr	r7, [r5, #80]	; 0x50
 8004888:	21e1      	movs	r1, #225	; 0xe1
 800488a:	0038      	movs	r0, r7
 800488c:	0109      	lsls	r1, r1, #4
 800488e:	f7fb fdc7 	bl	8000420 <__aeabi_idivmod>
 8004892:	000e      	movs	r6, r1
 8004894:	213c      	movs	r1, #60	; 0x3c
 8004896:	0030      	movs	r0, r6
 8004898:	f7fb fdc2 	bl	8000420 <__aeabi_idivmod>
 800489c:	6823      	ldr	r3, [r4, #0]
 800489e:	0030      	movs	r0, r6
 80048a0:	1a5d      	subs	r5, r3, r1
 80048a2:	6025      	str	r5, [r4, #0]
 80048a4:	213c      	movs	r1, #60	; 0x3c
 80048a6:	f7fb fcd5 	bl	8000254 <__divsi3>
 80048aa:	21e1      	movs	r1, #225	; 0xe1
 80048ac:	6863      	ldr	r3, [r4, #4]
 80048ae:	0109      	lsls	r1, r1, #4
 80048b0:	1a1e      	subs	r6, r3, r0
 80048b2:	6066      	str	r6, [r4, #4]
 80048b4:	0038      	movs	r0, r7
 80048b6:	f7fb fccd 	bl	8000254 <__divsi3>
 80048ba:	68a3      	ldr	r3, [r4, #8]
 80048bc:	1a1b      	subs	r3, r3, r0
 80048be:	60a3      	str	r3, [r4, #8]
 80048c0:	2d3b      	cmp	r5, #59	; 0x3b
 80048c2:	dd2a      	ble.n	800491a <localtime_r+0x15a>
 80048c4:	3601      	adds	r6, #1
 80048c6:	6066      	str	r6, [r4, #4]
 80048c8:	3d3c      	subs	r5, #60	; 0x3c
 80048ca:	6025      	str	r5, [r4, #0]
 80048cc:	6862      	ldr	r2, [r4, #4]
 80048ce:	2a3b      	cmp	r2, #59	; 0x3b
 80048d0:	dd29      	ble.n	8004926 <localtime_r+0x166>
 80048d2:	3301      	adds	r3, #1
 80048d4:	60a3      	str	r3, [r4, #8]
 80048d6:	3a3c      	subs	r2, #60	; 0x3c
 80048d8:	6062      	str	r2, [r4, #4]
 80048da:	68a2      	ldr	r2, [r4, #8]
 80048dc:	2a17      	cmp	r2, #23
 80048de:	dd31      	ble.n	8004944 <localtime_r+0x184>
 80048e0:	69e3      	ldr	r3, [r4, #28]
 80048e2:	3301      	adds	r3, #1
 80048e4:	61e3      	str	r3, [r4, #28]
 80048e6:	69a3      	ldr	r3, [r4, #24]
 80048e8:	3301      	adds	r3, #1
 80048ea:	2b06      	cmp	r3, #6
 80048ec:	dc21      	bgt.n	8004932 <localtime_r+0x172>
 80048ee:	61a3      	str	r3, [r4, #24]
 80048f0:	3a18      	subs	r2, #24
 80048f2:	68e3      	ldr	r3, [r4, #12]
 80048f4:	60a2      	str	r2, [r4, #8]
 80048f6:	6922      	ldr	r2, [r4, #16]
 80048f8:	9801      	ldr	r0, [sp, #4]
 80048fa:	3301      	adds	r3, #1
 80048fc:	60e3      	str	r3, [r4, #12]
 80048fe:	0091      	lsls	r1, r2, #2
 8004900:	5809      	ldr	r1, [r1, r0]
 8004902:	428b      	cmp	r3, r1
 8004904:	dd05      	ble.n	8004912 <localtime_r+0x152>
 8004906:	1a5b      	subs	r3, r3, r1
 8004908:	60e3      	str	r3, [r4, #12]
 800490a:	1c53      	adds	r3, r2, #1
 800490c:	2a0b      	cmp	r2, #11
 800490e:	d012      	beq.n	8004936 <localtime_r+0x176>
 8004910:	6123      	str	r3, [r4, #16]
 8004912:	f000 fdfb 	bl	800550c <__tz_unlock>
 8004916:	0020      	movs	r0, r4
 8004918:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800491a:	2d00      	cmp	r5, #0
 800491c:	dad6      	bge.n	80048cc <localtime_r+0x10c>
 800491e:	3e01      	subs	r6, #1
 8004920:	6066      	str	r6, [r4, #4]
 8004922:	353c      	adds	r5, #60	; 0x3c
 8004924:	e7d1      	b.n	80048ca <localtime_r+0x10a>
 8004926:	2a00      	cmp	r2, #0
 8004928:	dad7      	bge.n	80048da <localtime_r+0x11a>
 800492a:	3b01      	subs	r3, #1
 800492c:	60a3      	str	r3, [r4, #8]
 800492e:	323c      	adds	r2, #60	; 0x3c
 8004930:	e7d2      	b.n	80048d8 <localtime_r+0x118>
 8004932:	2300      	movs	r3, #0
 8004934:	e7db      	b.n	80048ee <localtime_r+0x12e>
 8004936:	2200      	movs	r2, #0
 8004938:	6963      	ldr	r3, [r4, #20]
 800493a:	6122      	str	r2, [r4, #16]
 800493c:	3301      	adds	r3, #1
 800493e:	6163      	str	r3, [r4, #20]
 8004940:	61e2      	str	r2, [r4, #28]
 8004942:	e7e6      	b.n	8004912 <localtime_r+0x152>
 8004944:	2a00      	cmp	r2, #0
 8004946:	dae4      	bge.n	8004912 <localtime_r+0x152>
 8004948:	69e3      	ldr	r3, [r4, #28]
 800494a:	3b01      	subs	r3, #1
 800494c:	61e3      	str	r3, [r4, #28]
 800494e:	69a3      	ldr	r3, [r4, #24]
 8004950:	3b01      	subs	r3, #1
 8004952:	d411      	bmi.n	8004978 <localtime_r+0x1b8>
 8004954:	61a3      	str	r3, [r4, #24]
 8004956:	68e3      	ldr	r3, [r4, #12]
 8004958:	3218      	adds	r2, #24
 800495a:	1e59      	subs	r1, r3, #1
 800495c:	60e1      	str	r1, [r4, #12]
 800495e:	60a2      	str	r2, [r4, #8]
 8004960:	2900      	cmp	r1, #0
 8004962:	d1d6      	bne.n	8004912 <localtime_r+0x152>
 8004964:	6923      	ldr	r3, [r4, #16]
 8004966:	3b01      	subs	r3, #1
 8004968:	d408      	bmi.n	800497c <localtime_r+0x1bc>
 800496a:	6123      	str	r3, [r4, #16]
 800496c:	6923      	ldr	r3, [r4, #16]
 800496e:	9a01      	ldr	r2, [sp, #4]
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	589b      	ldr	r3, [r3, r2]
 8004974:	60e3      	str	r3, [r4, #12]
 8004976:	e7cc      	b.n	8004912 <localtime_r+0x152>
 8004978:	2306      	movs	r3, #6
 800497a:	e7eb      	b.n	8004954 <localtime_r+0x194>
 800497c:	230b      	movs	r3, #11
 800497e:	6965      	ldr	r5, [r4, #20]
 8004980:	6123      	str	r3, [r4, #16]
 8004982:	1e6b      	subs	r3, r5, #1
 8004984:	6163      	str	r3, [r4, #20]
 8004986:	4b0e      	ldr	r3, [pc, #56]	; (80049c0 <localtime_r+0x200>)
 8004988:	18ed      	adds	r5, r5, r3
 800498a:	07ab      	lsls	r3, r5, #30
 800498c:	d106      	bne.n	800499c <localtime_r+0x1dc>
 800498e:	2164      	movs	r1, #100	; 0x64
 8004990:	0028      	movs	r0, r5
 8004992:	f7fb fd45 	bl	8000420 <__aeabi_idivmod>
 8004996:	2301      	movs	r3, #1
 8004998:	2900      	cmp	r1, #0
 800499a:	d106      	bne.n	80049aa <localtime_r+0x1ea>
 800499c:	21c8      	movs	r1, #200	; 0xc8
 800499e:	0028      	movs	r0, r5
 80049a0:	0049      	lsls	r1, r1, #1
 80049a2:	f7fb fd3d 	bl	8000420 <__aeabi_idivmod>
 80049a6:	424b      	negs	r3, r1
 80049a8:	414b      	adcs	r3, r1
 80049aa:	336d      	adds	r3, #109	; 0x6d
 80049ac:	33ff      	adds	r3, #255	; 0xff
 80049ae:	61e3      	str	r3, [r4, #28]
 80049b0:	e7dc      	b.n	800496c <localtime_r+0x1ac>
 80049b2:	46c0      	nop			; (mov r8, r8)
 80049b4:	0000076c 	.word	0x0000076c
 80049b8:	080077e0 	.word	0x080077e0
 80049bc:	2000024c 	.word	0x2000024c
 80049c0:	0000076b 	.word	0x0000076b

080049c4 <malloc>:
 80049c4:	b510      	push	{r4, lr}
 80049c6:	4b03      	ldr	r3, [pc, #12]	; (80049d4 <malloc+0x10>)
 80049c8:	0001      	movs	r1, r0
 80049ca:	6818      	ldr	r0, [r3, #0]
 80049cc:	f000 fb24 	bl	8005018 <_malloc_r>
 80049d0:	bd10      	pop	{r4, pc}
 80049d2:	46c0      	nop			; (mov r8, r8)
 80049d4:	20000018 	.word	0x20000018

080049d8 <free>:
 80049d8:	b510      	push	{r4, lr}
 80049da:	4b03      	ldr	r3, [pc, #12]	; (80049e8 <free+0x10>)
 80049dc:	0001      	movs	r1, r0
 80049de:	6818      	ldr	r0, [r3, #0]
 80049e0:	f000 faae 	bl	8004f40 <_free_r>
 80049e4:	bd10      	pop	{r4, pc}
 80049e6:	46c0      	nop			; (mov r8, r8)
 80049e8:	20000018 	.word	0x20000018

080049ec <memcpy>:
 80049ec:	2300      	movs	r3, #0
 80049ee:	b510      	push	{r4, lr}
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d100      	bne.n	80049f6 <memcpy+0xa>
 80049f4:	bd10      	pop	{r4, pc}
 80049f6:	5ccc      	ldrb	r4, [r1, r3]
 80049f8:	54c4      	strb	r4, [r0, r3]
 80049fa:	3301      	adds	r3, #1
 80049fc:	e7f8      	b.n	80049f0 <memcpy+0x4>

080049fe <memset>:
 80049fe:	0003      	movs	r3, r0
 8004a00:	1882      	adds	r2, r0, r2
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d100      	bne.n	8004a08 <memset+0xa>
 8004a06:	4770      	bx	lr
 8004a08:	7019      	strb	r1, [r3, #0]
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	e7f9      	b.n	8004a02 <memset+0x4>
	...

08004a10 <validate_structure>:
 8004a10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a12:	6801      	ldr	r1, [r0, #0]
 8004a14:	0004      	movs	r4, r0
 8004a16:	293b      	cmp	r1, #59	; 0x3b
 8004a18:	d90b      	bls.n	8004a32 <validate_structure+0x22>
 8004a1a:	223c      	movs	r2, #60	; 0x3c
 8004a1c:	4668      	mov	r0, sp
 8004a1e:	f000 ff25 	bl	800586c <div>
 8004a22:	6863      	ldr	r3, [r4, #4]
 8004a24:	9900      	ldr	r1, [sp, #0]
 8004a26:	9a01      	ldr	r2, [sp, #4]
 8004a28:	185b      	adds	r3, r3, r1
 8004a2a:	6063      	str	r3, [r4, #4]
 8004a2c:	2a00      	cmp	r2, #0
 8004a2e:	db71      	blt.n	8004b14 <validate_structure+0x104>
 8004a30:	6022      	str	r2, [r4, #0]
 8004a32:	6861      	ldr	r1, [r4, #4]
 8004a34:	293b      	cmp	r1, #59	; 0x3b
 8004a36:	d90b      	bls.n	8004a50 <validate_structure+0x40>
 8004a38:	223c      	movs	r2, #60	; 0x3c
 8004a3a:	4668      	mov	r0, sp
 8004a3c:	f000 ff16 	bl	800586c <div>
 8004a40:	68a3      	ldr	r3, [r4, #8]
 8004a42:	9900      	ldr	r1, [sp, #0]
 8004a44:	9a01      	ldr	r2, [sp, #4]
 8004a46:	185b      	adds	r3, r3, r1
 8004a48:	60a3      	str	r3, [r4, #8]
 8004a4a:	2a00      	cmp	r2, #0
 8004a4c:	db67      	blt.n	8004b1e <validate_structure+0x10e>
 8004a4e:	6062      	str	r2, [r4, #4]
 8004a50:	68a1      	ldr	r1, [r4, #8]
 8004a52:	2917      	cmp	r1, #23
 8004a54:	d90b      	bls.n	8004a6e <validate_structure+0x5e>
 8004a56:	2218      	movs	r2, #24
 8004a58:	4668      	mov	r0, sp
 8004a5a:	f000 ff07 	bl	800586c <div>
 8004a5e:	68e3      	ldr	r3, [r4, #12]
 8004a60:	9900      	ldr	r1, [sp, #0]
 8004a62:	9a01      	ldr	r2, [sp, #4]
 8004a64:	185b      	adds	r3, r3, r1
 8004a66:	60e3      	str	r3, [r4, #12]
 8004a68:	2a00      	cmp	r2, #0
 8004a6a:	db5d      	blt.n	8004b28 <validate_structure+0x118>
 8004a6c:	60a2      	str	r2, [r4, #8]
 8004a6e:	6921      	ldr	r1, [r4, #16]
 8004a70:	290b      	cmp	r1, #11
 8004a72:	d90b      	bls.n	8004a8c <validate_structure+0x7c>
 8004a74:	220c      	movs	r2, #12
 8004a76:	4668      	mov	r0, sp
 8004a78:	f000 fef8 	bl	800586c <div>
 8004a7c:	6963      	ldr	r3, [r4, #20]
 8004a7e:	9900      	ldr	r1, [sp, #0]
 8004a80:	9a01      	ldr	r2, [sp, #4]
 8004a82:	185b      	adds	r3, r3, r1
 8004a84:	6163      	str	r3, [r4, #20]
 8004a86:	2a00      	cmp	r2, #0
 8004a88:	db53      	blt.n	8004b32 <validate_structure+0x122>
 8004a8a:	6122      	str	r2, [r4, #16]
 8004a8c:	6965      	ldr	r5, [r4, #20]
 8004a8e:	231c      	movs	r3, #28
 8004a90:	07aa      	lsls	r2, r5, #30
 8004a92:	d110      	bne.n	8004ab6 <validate_structure+0xa6>
 8004a94:	2164      	movs	r1, #100	; 0x64
 8004a96:	0028      	movs	r0, r5
 8004a98:	f7fb fcc2 	bl	8000420 <__aeabi_idivmod>
 8004a9c:	231d      	movs	r3, #29
 8004a9e:	2900      	cmp	r1, #0
 8004aa0:	d109      	bne.n	8004ab6 <validate_structure+0xa6>
 8004aa2:	4b3c      	ldr	r3, [pc, #240]	; (8004b94 <validate_structure+0x184>)
 8004aa4:	3191      	adds	r1, #145	; 0x91
 8004aa6:	18e8      	adds	r0, r5, r3
 8004aa8:	31ff      	adds	r1, #255	; 0xff
 8004aaa:	f7fb fcb9 	bl	8000420 <__aeabi_idivmod>
 8004aae:	424b      	negs	r3, r1
 8004ab0:	4159      	adcs	r1, r3
 8004ab2:	000b      	movs	r3, r1
 8004ab4:	331c      	adds	r3, #28
 8004ab6:	68e2      	ldr	r2, [r4, #12]
 8004ab8:	271d      	movs	r7, #29
 8004aba:	2a00      	cmp	r2, #0
 8004abc:	dd65      	ble.n	8004b8a <validate_structure+0x17a>
 8004abe:	2603      	movs	r6, #3
 8004ac0:	271c      	movs	r7, #28
 8004ac2:	6922      	ldr	r2, [r4, #16]
 8004ac4:	0018      	movs	r0, r3
 8004ac6:	68e1      	ldr	r1, [r4, #12]
 8004ac8:	2a01      	cmp	r2, #1
 8004aca:	d002      	beq.n	8004ad2 <validate_structure+0xc2>
 8004acc:	4d32      	ldr	r5, [pc, #200]	; (8004b98 <validate_structure+0x188>)
 8004ace:	0090      	lsls	r0, r2, #2
 8004ad0:	5940      	ldr	r0, [r0, r5]
 8004ad2:	4281      	cmp	r1, r0
 8004ad4:	dd5c      	ble.n	8004b90 <validate_structure+0x180>
 8004ad6:	1a09      	subs	r1, r1, r0
 8004ad8:	3201      	adds	r2, #1
 8004ada:	60e1      	str	r1, [r4, #12]
 8004adc:	6122      	str	r2, [r4, #16]
 8004ade:	2a0c      	cmp	r2, #12
 8004ae0:	d1ef      	bne.n	8004ac2 <validate_structure+0xb2>
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	6965      	ldr	r5, [r4, #20]
 8004ae6:	6123      	str	r3, [r4, #16]
 8004ae8:	1c68      	adds	r0, r5, #1
 8004aea:	003b      	movs	r3, r7
 8004aec:	6160      	str	r0, [r4, #20]
 8004aee:	4230      	tst	r0, r6
 8004af0:	d1e7      	bne.n	8004ac2 <validate_structure+0xb2>
 8004af2:	2164      	movs	r1, #100	; 0x64
 8004af4:	f7fb fc94 	bl	8000420 <__aeabi_idivmod>
 8004af8:	231d      	movs	r3, #29
 8004afa:	2900      	cmp	r1, #0
 8004afc:	d1e1      	bne.n	8004ac2 <validate_structure+0xb2>
 8004afe:	4b27      	ldr	r3, [pc, #156]	; (8004b9c <validate_structure+0x18c>)
 8004b00:	3191      	adds	r1, #145	; 0x91
 8004b02:	18e8      	adds	r0, r5, r3
 8004b04:	31ff      	adds	r1, #255	; 0xff
 8004b06:	f7fb fc8b 	bl	8000420 <__aeabi_idivmod>
 8004b0a:	424b      	negs	r3, r1
 8004b0c:	4159      	adcs	r1, r3
 8004b0e:	000b      	movs	r3, r1
 8004b10:	331c      	adds	r3, #28
 8004b12:	e7d6      	b.n	8004ac2 <validate_structure+0xb2>
 8004b14:	323c      	adds	r2, #60	; 0x3c
 8004b16:	3b01      	subs	r3, #1
 8004b18:	6022      	str	r2, [r4, #0]
 8004b1a:	6063      	str	r3, [r4, #4]
 8004b1c:	e789      	b.n	8004a32 <validate_structure+0x22>
 8004b1e:	323c      	adds	r2, #60	; 0x3c
 8004b20:	3b01      	subs	r3, #1
 8004b22:	6062      	str	r2, [r4, #4]
 8004b24:	60a3      	str	r3, [r4, #8]
 8004b26:	e793      	b.n	8004a50 <validate_structure+0x40>
 8004b28:	3218      	adds	r2, #24
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	60a2      	str	r2, [r4, #8]
 8004b2e:	60e3      	str	r3, [r4, #12]
 8004b30:	e79d      	b.n	8004a6e <validate_structure+0x5e>
 8004b32:	320c      	adds	r2, #12
 8004b34:	3b01      	subs	r3, #1
 8004b36:	6122      	str	r2, [r4, #16]
 8004b38:	6163      	str	r3, [r4, #20]
 8004b3a:	e7a7      	b.n	8004a8c <validate_structure+0x7c>
 8004b3c:	6922      	ldr	r2, [r4, #16]
 8004b3e:	3a01      	subs	r2, #1
 8004b40:	6122      	str	r2, [r4, #16]
 8004b42:	3201      	adds	r2, #1
 8004b44:	d118      	bne.n	8004b78 <validate_structure+0x168>
 8004b46:	230b      	movs	r3, #11
 8004b48:	2203      	movs	r2, #3
 8004b4a:	6965      	ldr	r5, [r4, #20]
 8004b4c:	6123      	str	r3, [r4, #16]
 8004b4e:	1e68      	subs	r0, r5, #1
 8004b50:	6160      	str	r0, [r4, #20]
 8004b52:	3311      	adds	r3, #17
 8004b54:	4210      	tst	r0, r2
 8004b56:	d10f      	bne.n	8004b78 <validate_structure+0x168>
 8004b58:	2164      	movs	r1, #100	; 0x64
 8004b5a:	f7fb fc61 	bl	8000420 <__aeabi_idivmod>
 8004b5e:	003b      	movs	r3, r7
 8004b60:	2900      	cmp	r1, #0
 8004b62:	d109      	bne.n	8004b78 <validate_structure+0x168>
 8004b64:	4b0e      	ldr	r3, [pc, #56]	; (8004ba0 <validate_structure+0x190>)
 8004b66:	3191      	adds	r1, #145	; 0x91
 8004b68:	18e8      	adds	r0, r5, r3
 8004b6a:	31ff      	adds	r1, #255	; 0xff
 8004b6c:	f7fb fc58 	bl	8000420 <__aeabi_idivmod>
 8004b70:	424b      	negs	r3, r1
 8004b72:	4159      	adcs	r1, r3
 8004b74:	000b      	movs	r3, r1
 8004b76:	331c      	adds	r3, #28
 8004b78:	6921      	ldr	r1, [r4, #16]
 8004b7a:	001a      	movs	r2, r3
 8004b7c:	2901      	cmp	r1, #1
 8004b7e:	d002      	beq.n	8004b86 <validate_structure+0x176>
 8004b80:	4a05      	ldr	r2, [pc, #20]	; (8004b98 <validate_structure+0x188>)
 8004b82:	0089      	lsls	r1, r1, #2
 8004b84:	588a      	ldr	r2, [r1, r2]
 8004b86:	18b2      	adds	r2, r6, r2
 8004b88:	60e2      	str	r2, [r4, #12]
 8004b8a:	68e6      	ldr	r6, [r4, #12]
 8004b8c:	2e00      	cmp	r6, #0
 8004b8e:	ddd5      	ble.n	8004b3c <validate_structure+0x12c>
 8004b90:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8004b92:	46c0      	nop			; (mov r8, r8)
 8004b94:	0000076c 	.word	0x0000076c
 8004b98:	08007780 	.word	0x08007780
 8004b9c:	0000076d 	.word	0x0000076d
 8004ba0:	0000076b 	.word	0x0000076b

08004ba4 <mktime>:
 8004ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ba6:	b08f      	sub	sp, #60	; 0x3c
 8004ba8:	0004      	movs	r4, r0
 8004baa:	f000 fec9 	bl	8005940 <__gettzinfo>
 8004bae:	0007      	movs	r7, r0
 8004bb0:	0020      	movs	r0, r4
 8004bb2:	f7ff ff2d 	bl	8004a10 <validate_structure>
 8004bb6:	233c      	movs	r3, #60	; 0x3c
 8004bb8:	6862      	ldr	r2, [r4, #4]
 8004bba:	68a1      	ldr	r1, [r4, #8]
 8004bbc:	4353      	muls	r3, r2
 8004bbe:	6822      	ldr	r2, [r4, #0]
 8004bc0:	6966      	ldr	r6, [r4, #20]
 8004bc2:	189b      	adds	r3, r3, r2
 8004bc4:	22e1      	movs	r2, #225	; 0xe1
 8004bc6:	0112      	lsls	r2, r2, #4
 8004bc8:	434a      	muls	r2, r1
 8004bca:	189b      	adds	r3, r3, r2
 8004bcc:	9300      	str	r3, [sp, #0]
 8004bce:	68e2      	ldr	r2, [r4, #12]
 8004bd0:	17db      	asrs	r3, r3, #31
 8004bd2:	9301      	str	r3, [sp, #4]
 8004bd4:	6923      	ldr	r3, [r4, #16]
 8004bd6:	1e50      	subs	r0, r2, #1
 8004bd8:	4aaf      	ldr	r2, [pc, #700]	; (8004e98 <mktime+0x2f4>)
 8004bda:	0099      	lsls	r1, r3, #2
 8004bdc:	588a      	ldr	r2, [r1, r2]
 8004bde:	1882      	adds	r2, r0, r2
 8004be0:	9206      	str	r2, [sp, #24]
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	dd12      	ble.n	8004c0c <mktime+0x68>
 8004be6:	07b3      	lsls	r3, r6, #30
 8004be8:	d110      	bne.n	8004c0c <mktime+0x68>
 8004bea:	2164      	movs	r1, #100	; 0x64
 8004bec:	0030      	movs	r0, r6
 8004bee:	f7fb fc17 	bl	8000420 <__aeabi_idivmod>
 8004bf2:	2900      	cmp	r1, #0
 8004bf4:	d107      	bne.n	8004c06 <mktime+0x62>
 8004bf6:	4ba9      	ldr	r3, [pc, #676]	; (8004e9c <mktime+0x2f8>)
 8004bf8:	3191      	adds	r1, #145	; 0x91
 8004bfa:	31ff      	adds	r1, #255	; 0xff
 8004bfc:	18f0      	adds	r0, r6, r3
 8004bfe:	f7fb fc0f 	bl	8000420 <__aeabi_idivmod>
 8004c02:	2900      	cmp	r1, #0
 8004c04:	d102      	bne.n	8004c0c <mktime+0x68>
 8004c06:	9b06      	ldr	r3, [sp, #24]
 8004c08:	3301      	adds	r3, #1
 8004c0a:	9306      	str	r3, [sp, #24]
 8004c0c:	9b06      	ldr	r3, [sp, #24]
 8004c0e:	4aa4      	ldr	r2, [pc, #656]	; (8004ea0 <mktime+0x2fc>)
 8004c10:	61e3      	str	r3, [r4, #28]
 8004c12:	4ba4      	ldr	r3, [pc, #656]	; (8004ea4 <mktime+0x300>)
 8004c14:	18f3      	adds	r3, r6, r3
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d900      	bls.n	8004c1c <mktime+0x78>
 8004c1a:	e18b      	b.n	8004f34 <mktime+0x390>
 8004c1c:	2e46      	cmp	r6, #70	; 0x46
 8004c1e:	dc00      	bgt.n	8004c22 <mktime+0x7e>
 8004c20:	e09c      	b.n	8004d5c <mktime+0x1b8>
 8004c22:	2203      	movs	r2, #3
 8004c24:	2346      	movs	r3, #70	; 0x46
 8004c26:	4694      	mov	ip, r2
 8004c28:	4661      	mov	r1, ip
 8004c2a:	4662      	mov	r2, ip
 8004c2c:	4019      	ands	r1, r3
 8004c2e:	4213      	tst	r3, r2
 8004c30:	d000      	beq.n	8004c34 <mktime+0x90>
 8004c32:	e090      	b.n	8004d56 <mktime+0x1b2>
 8004c34:	2002      	movs	r0, #2
 8004c36:	4d9c      	ldr	r5, [pc, #624]	; (8004ea8 <mktime+0x304>)
 8004c38:	4a9c      	ldr	r2, [pc, #624]	; (8004eac <mktime+0x308>)
 8004c3a:	435d      	muls	r5, r3
 8004c3c:	41c5      	rors	r5, r0
 8004c3e:	306d      	adds	r0, #109	; 0x6d
 8004c40:	30ff      	adds	r0, #255	; 0xff
 8004c42:	4295      	cmp	r5, r2
 8004c44:	d80b      	bhi.n	8004c5e <mktime+0xba>
 8004c46:	4a95      	ldr	r2, [pc, #596]	; (8004e9c <mktime+0x2f8>)
 8004c48:	1898      	adds	r0, r3, r2
 8004c4a:	4a97      	ldr	r2, [pc, #604]	; (8004ea8 <mktime+0x304>)
 8004c4c:	4342      	muls	r2, r0
 8004c4e:	2004      	movs	r0, #4
 8004c50:	41c2      	rors	r2, r0
 8004c52:	4897      	ldr	r0, [pc, #604]	; (8004eb0 <mktime+0x30c>)
 8004c54:	4290      	cmp	r0, r2
 8004c56:	4149      	adcs	r1, r1
 8004c58:	316e      	adds	r1, #110	; 0x6e
 8004c5a:	31ff      	adds	r1, #255	; 0xff
 8004c5c:	0008      	movs	r0, r1
 8004c5e:	9a06      	ldr	r2, [sp, #24]
 8004c60:	3301      	adds	r3, #1
 8004c62:	1812      	adds	r2, r2, r0
 8004c64:	9206      	str	r2, [sp, #24]
 8004c66:	429e      	cmp	r6, r3
 8004c68:	d1de      	bne.n	8004c28 <mktime+0x84>
 8004c6a:	9b06      	ldr	r3, [sp, #24]
 8004c6c:	4a91      	ldr	r2, [pc, #580]	; (8004eb4 <mktime+0x310>)
 8004c6e:	9806      	ldr	r0, [sp, #24]
 8004c70:	17d9      	asrs	r1, r3, #31
 8004c72:	2300      	movs	r3, #0
 8004c74:	f7fb fc1e 	bl	80004b4 <__aeabi_lmul>
 8004c78:	9a00      	ldr	r2, [sp, #0]
 8004c7a:	9b01      	ldr	r3, [sp, #4]
 8004c7c:	1812      	adds	r2, r2, r0
 8004c7e:	414b      	adcs	r3, r1
 8004c80:	9200      	str	r2, [sp, #0]
 8004c82:	9301      	str	r3, [sp, #4]
 8004c84:	f000 fc3a 	bl	80054fc <__tz_lock>
 8004c88:	f000 fc48 	bl	800551c <_tzset_unlocked>
 8004c8c:	4b8a      	ldr	r3, [pc, #552]	; (8004eb8 <mktime+0x314>)
 8004c8e:	681d      	ldr	r5, [r3, #0]
 8004c90:	2d00      	cmp	r5, #0
 8004c92:	d058      	beq.n	8004d46 <mktime+0x1a2>
 8004c94:	6963      	ldr	r3, [r4, #20]
 8004c96:	4a81      	ldr	r2, [pc, #516]	; (8004e9c <mktime+0x2f8>)
 8004c98:	1898      	adds	r0, r3, r2
 8004c9a:	6a23      	ldr	r3, [r4, #32]
 8004c9c:	9307      	str	r3, [sp, #28]
 8004c9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	dd01      	ble.n	8004ca8 <mktime+0x104>
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4283      	cmp	r3, r0
 8004cac:	d000      	beq.n	8004cb0 <mktime+0x10c>
 8004cae:	e093      	b.n	8004dd8 <mktime+0x234>
 8004cb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cb2:	930a      	str	r3, [sp, #40]	; 0x28
 8004cb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cb6:	9308      	str	r3, [sp, #32]
 8004cb8:	17db      	asrs	r3, r3, #31
 8004cba:	9309      	str	r3, [sp, #36]	; 0x24
 8004cbc:	9808      	ldr	r0, [sp, #32]
 8004cbe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004cc0:	6a3a      	ldr	r2, [r7, #32]
 8004cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc4:	1a12      	subs	r2, r2, r0
 8004cc6:	418b      	sbcs	r3, r1
 8004cc8:	9204      	str	r2, [sp, #16]
 8004cca:	9305      	str	r3, [sp, #20]
 8004ccc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cd0:	920c      	str	r2, [sp, #48]	; 0x30
 8004cd2:	930d      	str	r3, [sp, #52]	; 0x34
 8004cd4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004cd6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cda:	001a      	movs	r2, r3
 8004cdc:	469c      	mov	ip, r3
 8004cde:	17db      	asrs	r3, r3, #31
 8004ce0:	1a80      	subs	r0, r0, r2
 8004ce2:	4199      	sbcs	r1, r3
 8004ce4:	9002      	str	r0, [sp, #8]
 8004ce6:	9103      	str	r1, [sp, #12]
 8004ce8:	9b03      	ldr	r3, [sp, #12]
 8004cea:	9901      	ldr	r1, [sp, #4]
 8004cec:	428b      	cmp	r3, r1
 8004cee:	dc11      	bgt.n	8004d14 <mktime+0x170>
 8004cf0:	d103      	bne.n	8004cfa <mktime+0x156>
 8004cf2:	9900      	ldr	r1, [sp, #0]
 8004cf4:	9b02      	ldr	r3, [sp, #8]
 8004cf6:	428b      	cmp	r3, r1
 8004cf8:	d80c      	bhi.n	8004d14 <mktime+0x170>
 8004cfa:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004cfc:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004cfe:	9a08      	ldr	r2, [sp, #32]
 8004d00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d02:	1a80      	subs	r0, r0, r2
 8004d04:	4199      	sbcs	r1, r3
 8004d06:	9d01      	ldr	r5, [sp, #4]
 8004d08:	42a9      	cmp	r1, r5
 8004d0a:	dc6a      	bgt.n	8004de2 <mktime+0x23e>
 8004d0c:	d102      	bne.n	8004d14 <mktime+0x170>
 8004d0e:	9d00      	ldr	r5, [sp, #0]
 8004d10:	42a8      	cmp	r0, r5
 8004d12:	d866      	bhi.n	8004de2 <mktime+0x23e>
 8004d14:	6839      	ldr	r1, [r7, #0]
 8004d16:	2900      	cmp	r1, #0
 8004d18:	d065      	beq.n	8004de6 <mktime+0x242>
 8004d1a:	9905      	ldr	r1, [sp, #20]
 8004d1c:	9801      	ldr	r0, [sp, #4]
 8004d1e:	4281      	cmp	r1, r0
 8004d20:	dc0d      	bgt.n	8004d3e <mktime+0x19a>
 8004d22:	d103      	bne.n	8004d2c <mktime+0x188>
 8004d24:	9904      	ldr	r1, [sp, #16]
 8004d26:	9800      	ldr	r0, [sp, #0]
 8004d28:	4281      	cmp	r1, r0
 8004d2a:	d808      	bhi.n	8004d3e <mktime+0x19a>
 8004d2c:	9901      	ldr	r1, [sp, #4]
 8004d2e:	9b03      	ldr	r3, [sp, #12]
 8004d30:	428b      	cmp	r3, r1
 8004d32:	dc61      	bgt.n	8004df8 <mktime+0x254>
 8004d34:	d103      	bne.n	8004d3e <mktime+0x19a>
 8004d36:	9900      	ldr	r1, [sp, #0]
 8004d38:	9b02      	ldr	r3, [sp, #8]
 8004d3a:	428b      	cmp	r3, r1
 8004d3c:	d85c      	bhi.n	8004df8 <mktime+0x254>
 8004d3e:	2500      	movs	r5, #0
 8004d40:	9b07      	ldr	r3, [sp, #28]
 8004d42:	42ab      	cmp	r3, r5
 8004d44:	da5c      	bge.n	8004e00 <mktime+0x25c>
 8004d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d48:	001e      	movs	r6, r3
 8004d4a:	17df      	asrs	r7, r3, #31
 8004d4c:	9a00      	ldr	r2, [sp, #0]
 8004d4e:	9b01      	ldr	r3, [sp, #4]
 8004d50:	18b6      	adds	r6, r6, r2
 8004d52:	415f      	adcs	r7, r3
 8004d54:	e0d5      	b.n	8004f02 <mktime+0x35e>
 8004d56:	206e      	movs	r0, #110	; 0x6e
 8004d58:	30ff      	adds	r0, #255	; 0xff
 8004d5a:	e780      	b.n	8004c5e <mktime+0xba>
 8004d5c:	2545      	movs	r5, #69	; 0x45
 8004d5e:	2e46      	cmp	r6, #70	; 0x46
 8004d60:	d100      	bne.n	8004d64 <mktime+0x1c0>
 8004d62:	e782      	b.n	8004c6a <mktime+0xc6>
 8004d64:	2303      	movs	r3, #3
 8004d66:	402b      	ands	r3, r5
 8004d68:	42ae      	cmp	r6, r5
 8004d6a:	db15      	blt.n	8004d98 <mktime+0x1f4>
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d12e      	bne.n	8004dce <mktime+0x22a>
 8004d70:	2164      	movs	r1, #100	; 0x64
 8004d72:	0030      	movs	r0, r6
 8004d74:	f7fb fb54 	bl	8000420 <__aeabi_idivmod>
 8004d78:	2900      	cmp	r1, #0
 8004d7a:	d12a      	bne.n	8004dd2 <mktime+0x22e>
 8004d7c:	4b47      	ldr	r3, [pc, #284]	; (8004e9c <mktime+0x2f8>)
 8004d7e:	3191      	adds	r1, #145	; 0x91
 8004d80:	18f0      	adds	r0, r6, r3
 8004d82:	31ff      	adds	r1, #255	; 0xff
 8004d84:	f7fb fb4c 	bl	8000420 <__aeabi_idivmod>
 8004d88:	424b      	negs	r3, r1
 8004d8a:	4159      	adcs	r1, r3
 8004d8c:	316e      	adds	r1, #110	; 0x6e
 8004d8e:	31ff      	adds	r1, #255	; 0xff
 8004d90:	9b06      	ldr	r3, [sp, #24]
 8004d92:	1a5b      	subs	r3, r3, r1
 8004d94:	9306      	str	r3, [sp, #24]
 8004d96:	e768      	b.n	8004c6a <mktime+0xc6>
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d116      	bne.n	8004dca <mktime+0x226>
 8004d9c:	2164      	movs	r1, #100	; 0x64
 8004d9e:	0028      	movs	r0, r5
 8004da0:	f7fb fb3e 	bl	8000420 <__aeabi_idivmod>
 8004da4:	23b7      	movs	r3, #183	; 0xb7
 8004da6:	005b      	lsls	r3, r3, #1
 8004da8:	2900      	cmp	r1, #0
 8004daa:	d109      	bne.n	8004dc0 <mktime+0x21c>
 8004dac:	4b3b      	ldr	r3, [pc, #236]	; (8004e9c <mktime+0x2f8>)
 8004dae:	3191      	adds	r1, #145	; 0x91
 8004db0:	18e8      	adds	r0, r5, r3
 8004db2:	31ff      	adds	r1, #255	; 0xff
 8004db4:	f7fb fb34 	bl	8000420 <__aeabi_idivmod>
 8004db8:	424b      	negs	r3, r1
 8004dba:	414b      	adcs	r3, r1
 8004dbc:	336e      	adds	r3, #110	; 0x6e
 8004dbe:	33ff      	adds	r3, #255	; 0xff
 8004dc0:	9a06      	ldr	r2, [sp, #24]
 8004dc2:	3d01      	subs	r5, #1
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	9306      	str	r3, [sp, #24]
 8004dc8:	e7cc      	b.n	8004d64 <mktime+0x1c0>
 8004dca:	236e      	movs	r3, #110	; 0x6e
 8004dcc:	e7f7      	b.n	8004dbe <mktime+0x21a>
 8004dce:	216e      	movs	r1, #110	; 0x6e
 8004dd0:	e7dd      	b.n	8004d8e <mktime+0x1ea>
 8004dd2:	21b7      	movs	r1, #183	; 0xb7
 8004dd4:	0049      	lsls	r1, r1, #1
 8004dd6:	e7db      	b.n	8004d90 <mktime+0x1ec>
 8004dd8:	f000 fad6 	bl	8005388 <__tzcalc_limits>
 8004ddc:	2800      	cmp	r0, #0
 8004dde:	d000      	beq.n	8004de2 <mktime+0x23e>
 8004de0:	e766      	b.n	8004cb0 <mktime+0x10c>
 8004de2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8004de4:	e082      	b.n	8004eec <mktime+0x348>
 8004de6:	9905      	ldr	r1, [sp, #20]
 8004de8:	9801      	ldr	r0, [sp, #4]
 8004dea:	4281      	cmp	r1, r0
 8004dec:	dc9e      	bgt.n	8004d2c <mktime+0x188>
 8004dee:	d103      	bne.n	8004df8 <mktime+0x254>
 8004df0:	9904      	ldr	r1, [sp, #16]
 8004df2:	9800      	ldr	r0, [sp, #0]
 8004df4:	4281      	cmp	r1, r0
 8004df6:	d899      	bhi.n	8004d2c <mktime+0x188>
 8004df8:	9b07      	ldr	r3, [sp, #28]
 8004dfa:	2501      	movs	r5, #1
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	db78      	blt.n	8004ef2 <mktime+0x34e>
 8004e00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e02:	406b      	eors	r3, r5
 8004e04:	9302      	str	r3, [sp, #8]
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d170      	bne.n	8004eec <mktime+0x348>
 8004e0a:	4662      	mov	r2, ip
 8004e0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e0e:	1a9b      	subs	r3, r3, r2
 8004e10:	2d00      	cmp	r5, #0
 8004e12:	d002      	beq.n	8004e1a <mktime+0x276>
 8004e14:	4663      	mov	r3, ip
 8004e16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e18:	1a9b      	subs	r3, r3, r2
 8004e1a:	0018      	movs	r0, r3
 8004e1c:	6822      	ldr	r2, [r4, #0]
 8004e1e:	17d9      	asrs	r1, r3, #31
 8004e20:	18d2      	adds	r2, r2, r3
 8004e22:	6022      	str	r2, [r4, #0]
 8004e24:	9a00      	ldr	r2, [sp, #0]
 8004e26:	9b01      	ldr	r3, [sp, #4]
 8004e28:	1812      	adds	r2, r2, r0
 8004e2a:	414b      	adcs	r3, r1
 8004e2c:	9200      	str	r2, [sp, #0]
 8004e2e:	9301      	str	r3, [sp, #4]
 8004e30:	68e3      	ldr	r3, [r4, #12]
 8004e32:	0020      	movs	r0, r4
 8004e34:	9304      	str	r3, [sp, #16]
 8004e36:	f7ff fdeb 	bl	8004a10 <validate_structure>
 8004e3a:	68e2      	ldr	r2, [r4, #12]
 8004e3c:	9b04      	ldr	r3, [sp, #16]
 8004e3e:	9904      	ldr	r1, [sp, #16]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	428a      	cmp	r2, r1
 8004e44:	d052      	beq.n	8004eec <mktime+0x348>
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	dc1d      	bgt.n	8004e86 <mktime+0x2e2>
 8004e4a:	1c5a      	adds	r2, r3, #1
 8004e4c:	da00      	bge.n	8004e50 <mktime+0x2ac>
 8004e4e:	9b02      	ldr	r3, [sp, #8]
 8004e50:	9a06      	ldr	r2, [sp, #24]
 8004e52:	69e1      	ldr	r1, [r4, #28]
 8004e54:	18d2      	adds	r2, r2, r3
 8004e56:	9206      	str	r2, [sp, #24]
 8004e58:	2203      	movs	r2, #3
 8004e5a:	18c9      	adds	r1, r1, r3
 8004e5c:	9102      	str	r1, [sp, #8]
 8004e5e:	d52f      	bpl.n	8004ec0 <mktime+0x31c>
 8004e60:	1e70      	subs	r0, r6, #1
 8004e62:	4210      	tst	r0, r2
 8004e64:	d112      	bne.n	8004e8c <mktime+0x2e8>
 8004e66:	2164      	movs	r1, #100	; 0x64
 8004e68:	f7fb fada 	bl	8000420 <__aeabi_idivmod>
 8004e6c:	2900      	cmp	r1, #0
 8004e6e:	d111      	bne.n	8004e94 <mktime+0x2f0>
 8004e70:	4b12      	ldr	r3, [pc, #72]	; (8004ebc <mktime+0x318>)
 8004e72:	3191      	adds	r1, #145	; 0x91
 8004e74:	18f0      	adds	r0, r6, r3
 8004e76:	31ff      	adds	r1, #255	; 0xff
 8004e78:	f7fb fad2 	bl	8000420 <__aeabi_idivmod>
 8004e7c:	424b      	negs	r3, r1
 8004e7e:	4159      	adcs	r1, r3
 8004e80:	316d      	adds	r1, #109	; 0x6d
 8004e82:	31ff      	adds	r1, #255	; 0xff
 8004e84:	e004      	b.n	8004e90 <mktime+0x2ec>
 8004e86:	2301      	movs	r3, #1
 8004e88:	425b      	negs	r3, r3
 8004e8a:	e7e1      	b.n	8004e50 <mktime+0x2ac>
 8004e8c:	21b6      	movs	r1, #182	; 0xb6
 8004e8e:	0049      	lsls	r1, r1, #1
 8004e90:	61e1      	str	r1, [r4, #28]
 8004e92:	e02b      	b.n	8004eec <mktime+0x348>
 8004e94:	216e      	movs	r1, #110	; 0x6e
 8004e96:	e7f4      	b.n	8004e82 <mktime+0x2de>
 8004e98:	080077b0 	.word	0x080077b0
 8004e9c:	0000076c 	.word	0x0000076c
 8004ea0:	00004e20 	.word	0x00004e20
 8004ea4:	00002710 	.word	0x00002710
 8004ea8:	c28f5c29 	.word	0xc28f5c29
 8004eac:	028f5c28 	.word	0x028f5c28
 8004eb0:	00a3d70a 	.word	0x00a3d70a
 8004eb4:	00015180 	.word	0x00015180
 8004eb8:	2000024c 	.word	0x2000024c
 8004ebc:	0000076b 	.word	0x0000076b
 8004ec0:	4216      	tst	r6, r2
 8004ec2:	d12d      	bne.n	8004f20 <mktime+0x37c>
 8004ec4:	2164      	movs	r1, #100	; 0x64
 8004ec6:	0030      	movs	r0, r6
 8004ec8:	f7fb faaa 	bl	8000420 <__aeabi_idivmod>
 8004ecc:	2900      	cmp	r1, #0
 8004ece:	d129      	bne.n	8004f24 <mktime+0x380>
 8004ed0:	4b1a      	ldr	r3, [pc, #104]	; (8004f3c <mktime+0x398>)
 8004ed2:	3191      	adds	r1, #145	; 0x91
 8004ed4:	18f0      	adds	r0, r6, r3
 8004ed6:	31ff      	adds	r1, #255	; 0xff
 8004ed8:	f7fb faa2 	bl	8000420 <__aeabi_idivmod>
 8004edc:	424b      	negs	r3, r1
 8004ede:	4159      	adcs	r1, r3
 8004ee0:	316e      	adds	r1, #110	; 0x6e
 8004ee2:	31ff      	adds	r1, #255	; 0xff
 8004ee4:	9b02      	ldr	r3, [sp, #8]
 8004ee6:	428b      	cmp	r3, r1
 8004ee8:	da1f      	bge.n	8004f2a <mktime+0x386>
 8004eea:	61e3      	str	r3, [r4, #28]
 8004eec:	2d01      	cmp	r5, #1
 8004eee:	d000      	beq.n	8004ef2 <mktime+0x34e>
 8004ef0:	e729      	b.n	8004d46 <mktime+0x1a2>
 8004ef2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ef4:	2501      	movs	r5, #1
 8004ef6:	001e      	movs	r6, r3
 8004ef8:	17df      	asrs	r7, r3, #31
 8004efa:	9a00      	ldr	r2, [sp, #0]
 8004efc:	9b01      	ldr	r3, [sp, #4]
 8004efe:	18b6      	adds	r6, r6, r2
 8004f00:	415f      	adcs	r7, r3
 8004f02:	f000 fb03 	bl	800550c <__tz_unlock>
 8004f06:	9806      	ldr	r0, [sp, #24]
 8004f08:	2107      	movs	r1, #7
 8004f0a:	6225      	str	r5, [r4, #32]
 8004f0c:	3004      	adds	r0, #4
 8004f0e:	f7fb fa87 	bl	8000420 <__aeabi_idivmod>
 8004f12:	2900      	cmp	r1, #0
 8004f14:	db0c      	blt.n	8004f30 <mktime+0x38c>
 8004f16:	61a1      	str	r1, [r4, #24]
 8004f18:	0030      	movs	r0, r6
 8004f1a:	0039      	movs	r1, r7
 8004f1c:	b00f      	add	sp, #60	; 0x3c
 8004f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f20:	216e      	movs	r1, #110	; 0x6e
 8004f22:	e7de      	b.n	8004ee2 <mktime+0x33e>
 8004f24:	21b7      	movs	r1, #183	; 0xb7
 8004f26:	0049      	lsls	r1, r1, #1
 8004f28:	e7dc      	b.n	8004ee4 <mktime+0x340>
 8004f2a:	9b02      	ldr	r3, [sp, #8]
 8004f2c:	1a59      	subs	r1, r3, r1
 8004f2e:	e7af      	b.n	8004e90 <mktime+0x2ec>
 8004f30:	3107      	adds	r1, #7
 8004f32:	e7f0      	b.n	8004f16 <mktime+0x372>
 8004f34:	2601      	movs	r6, #1
 8004f36:	4276      	negs	r6, r6
 8004f38:	17f7      	asrs	r7, r6, #31
 8004f3a:	e7ed      	b.n	8004f18 <mktime+0x374>
 8004f3c:	0000076c 	.word	0x0000076c

08004f40 <_free_r>:
 8004f40:	b570      	push	{r4, r5, r6, lr}
 8004f42:	0005      	movs	r5, r0
 8004f44:	2900      	cmp	r1, #0
 8004f46:	d010      	beq.n	8004f6a <_free_r+0x2a>
 8004f48:	1f0c      	subs	r4, r1, #4
 8004f4a:	6823      	ldr	r3, [r4, #0]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	da00      	bge.n	8004f52 <_free_r+0x12>
 8004f50:	18e4      	adds	r4, r4, r3
 8004f52:	0028      	movs	r0, r5
 8004f54:	f000 fdd2 	bl	8005afc <__malloc_lock>
 8004f58:	4a1d      	ldr	r2, [pc, #116]	; (8004fd0 <_free_r+0x90>)
 8004f5a:	6813      	ldr	r3, [r2, #0]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d105      	bne.n	8004f6c <_free_r+0x2c>
 8004f60:	6063      	str	r3, [r4, #4]
 8004f62:	6014      	str	r4, [r2, #0]
 8004f64:	0028      	movs	r0, r5
 8004f66:	f000 fdd1 	bl	8005b0c <__malloc_unlock>
 8004f6a:	bd70      	pop	{r4, r5, r6, pc}
 8004f6c:	42a3      	cmp	r3, r4
 8004f6e:	d908      	bls.n	8004f82 <_free_r+0x42>
 8004f70:	6821      	ldr	r1, [r4, #0]
 8004f72:	1860      	adds	r0, r4, r1
 8004f74:	4283      	cmp	r3, r0
 8004f76:	d1f3      	bne.n	8004f60 <_free_r+0x20>
 8004f78:	6818      	ldr	r0, [r3, #0]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	1841      	adds	r1, r0, r1
 8004f7e:	6021      	str	r1, [r4, #0]
 8004f80:	e7ee      	b.n	8004f60 <_free_r+0x20>
 8004f82:	001a      	movs	r2, r3
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d001      	beq.n	8004f8e <_free_r+0x4e>
 8004f8a:	42a3      	cmp	r3, r4
 8004f8c:	d9f9      	bls.n	8004f82 <_free_r+0x42>
 8004f8e:	6811      	ldr	r1, [r2, #0]
 8004f90:	1850      	adds	r0, r2, r1
 8004f92:	42a0      	cmp	r0, r4
 8004f94:	d10b      	bne.n	8004fae <_free_r+0x6e>
 8004f96:	6820      	ldr	r0, [r4, #0]
 8004f98:	1809      	adds	r1, r1, r0
 8004f9a:	1850      	adds	r0, r2, r1
 8004f9c:	6011      	str	r1, [r2, #0]
 8004f9e:	4283      	cmp	r3, r0
 8004fa0:	d1e0      	bne.n	8004f64 <_free_r+0x24>
 8004fa2:	6818      	ldr	r0, [r3, #0]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	1841      	adds	r1, r0, r1
 8004fa8:	6011      	str	r1, [r2, #0]
 8004faa:	6053      	str	r3, [r2, #4]
 8004fac:	e7da      	b.n	8004f64 <_free_r+0x24>
 8004fae:	42a0      	cmp	r0, r4
 8004fb0:	d902      	bls.n	8004fb8 <_free_r+0x78>
 8004fb2:	230c      	movs	r3, #12
 8004fb4:	602b      	str	r3, [r5, #0]
 8004fb6:	e7d5      	b.n	8004f64 <_free_r+0x24>
 8004fb8:	6821      	ldr	r1, [r4, #0]
 8004fba:	1860      	adds	r0, r4, r1
 8004fbc:	4283      	cmp	r3, r0
 8004fbe:	d103      	bne.n	8004fc8 <_free_r+0x88>
 8004fc0:	6818      	ldr	r0, [r3, #0]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	1841      	adds	r1, r0, r1
 8004fc6:	6021      	str	r1, [r4, #0]
 8004fc8:	6063      	str	r3, [r4, #4]
 8004fca:	6054      	str	r4, [r2, #4]
 8004fcc:	e7ca      	b.n	8004f64 <_free_r+0x24>
 8004fce:	46c0      	nop			; (mov r8, r8)
 8004fd0:	20000228 	.word	0x20000228

08004fd4 <sbrk_aligned>:
 8004fd4:	b570      	push	{r4, r5, r6, lr}
 8004fd6:	4e0f      	ldr	r6, [pc, #60]	; (8005014 <sbrk_aligned+0x40>)
 8004fd8:	000d      	movs	r5, r1
 8004fda:	6831      	ldr	r1, [r6, #0]
 8004fdc:	0004      	movs	r4, r0
 8004fde:	2900      	cmp	r1, #0
 8004fe0:	d102      	bne.n	8004fe8 <sbrk_aligned+0x14>
 8004fe2:	f000 f88f 	bl	8005104 <_sbrk_r>
 8004fe6:	6030      	str	r0, [r6, #0]
 8004fe8:	0029      	movs	r1, r5
 8004fea:	0020      	movs	r0, r4
 8004fec:	f000 f88a 	bl	8005104 <_sbrk_r>
 8004ff0:	1c43      	adds	r3, r0, #1
 8004ff2:	d00a      	beq.n	800500a <sbrk_aligned+0x36>
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	1cc5      	adds	r5, r0, #3
 8004ff8:	439d      	bics	r5, r3
 8004ffa:	42a8      	cmp	r0, r5
 8004ffc:	d007      	beq.n	800500e <sbrk_aligned+0x3a>
 8004ffe:	1a29      	subs	r1, r5, r0
 8005000:	0020      	movs	r0, r4
 8005002:	f000 f87f 	bl	8005104 <_sbrk_r>
 8005006:	1c43      	adds	r3, r0, #1
 8005008:	d101      	bne.n	800500e <sbrk_aligned+0x3a>
 800500a:	2501      	movs	r5, #1
 800500c:	426d      	negs	r5, r5
 800500e:	0028      	movs	r0, r5
 8005010:	bd70      	pop	{r4, r5, r6, pc}
 8005012:	46c0      	nop			; (mov r8, r8)
 8005014:	2000022c 	.word	0x2000022c

08005018 <_malloc_r>:
 8005018:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800501a:	2203      	movs	r2, #3
 800501c:	1ccb      	adds	r3, r1, #3
 800501e:	4393      	bics	r3, r2
 8005020:	3308      	adds	r3, #8
 8005022:	0006      	movs	r6, r0
 8005024:	001f      	movs	r7, r3
 8005026:	2b0c      	cmp	r3, #12
 8005028:	d232      	bcs.n	8005090 <_malloc_r+0x78>
 800502a:	270c      	movs	r7, #12
 800502c:	42b9      	cmp	r1, r7
 800502e:	d831      	bhi.n	8005094 <_malloc_r+0x7c>
 8005030:	0030      	movs	r0, r6
 8005032:	f000 fd63 	bl	8005afc <__malloc_lock>
 8005036:	4d32      	ldr	r5, [pc, #200]	; (8005100 <_malloc_r+0xe8>)
 8005038:	682b      	ldr	r3, [r5, #0]
 800503a:	001c      	movs	r4, r3
 800503c:	2c00      	cmp	r4, #0
 800503e:	d12e      	bne.n	800509e <_malloc_r+0x86>
 8005040:	0039      	movs	r1, r7
 8005042:	0030      	movs	r0, r6
 8005044:	f7ff ffc6 	bl	8004fd4 <sbrk_aligned>
 8005048:	0004      	movs	r4, r0
 800504a:	1c43      	adds	r3, r0, #1
 800504c:	d11e      	bne.n	800508c <_malloc_r+0x74>
 800504e:	682c      	ldr	r4, [r5, #0]
 8005050:	0025      	movs	r5, r4
 8005052:	2d00      	cmp	r5, #0
 8005054:	d14a      	bne.n	80050ec <_malloc_r+0xd4>
 8005056:	6823      	ldr	r3, [r4, #0]
 8005058:	0029      	movs	r1, r5
 800505a:	18e3      	adds	r3, r4, r3
 800505c:	0030      	movs	r0, r6
 800505e:	9301      	str	r3, [sp, #4]
 8005060:	f000 f850 	bl	8005104 <_sbrk_r>
 8005064:	9b01      	ldr	r3, [sp, #4]
 8005066:	4283      	cmp	r3, r0
 8005068:	d143      	bne.n	80050f2 <_malloc_r+0xda>
 800506a:	6823      	ldr	r3, [r4, #0]
 800506c:	3703      	adds	r7, #3
 800506e:	1aff      	subs	r7, r7, r3
 8005070:	2303      	movs	r3, #3
 8005072:	439f      	bics	r7, r3
 8005074:	3708      	adds	r7, #8
 8005076:	2f0c      	cmp	r7, #12
 8005078:	d200      	bcs.n	800507c <_malloc_r+0x64>
 800507a:	270c      	movs	r7, #12
 800507c:	0039      	movs	r1, r7
 800507e:	0030      	movs	r0, r6
 8005080:	f7ff ffa8 	bl	8004fd4 <sbrk_aligned>
 8005084:	1c43      	adds	r3, r0, #1
 8005086:	d034      	beq.n	80050f2 <_malloc_r+0xda>
 8005088:	6823      	ldr	r3, [r4, #0]
 800508a:	19df      	adds	r7, r3, r7
 800508c:	6027      	str	r7, [r4, #0]
 800508e:	e013      	b.n	80050b8 <_malloc_r+0xa0>
 8005090:	2b00      	cmp	r3, #0
 8005092:	dacb      	bge.n	800502c <_malloc_r+0x14>
 8005094:	230c      	movs	r3, #12
 8005096:	2500      	movs	r5, #0
 8005098:	6033      	str	r3, [r6, #0]
 800509a:	0028      	movs	r0, r5
 800509c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800509e:	6822      	ldr	r2, [r4, #0]
 80050a0:	1bd1      	subs	r1, r2, r7
 80050a2:	d420      	bmi.n	80050e6 <_malloc_r+0xce>
 80050a4:	290b      	cmp	r1, #11
 80050a6:	d917      	bls.n	80050d8 <_malloc_r+0xc0>
 80050a8:	19e2      	adds	r2, r4, r7
 80050aa:	6027      	str	r7, [r4, #0]
 80050ac:	42a3      	cmp	r3, r4
 80050ae:	d111      	bne.n	80050d4 <_malloc_r+0xbc>
 80050b0:	602a      	str	r2, [r5, #0]
 80050b2:	6863      	ldr	r3, [r4, #4]
 80050b4:	6011      	str	r1, [r2, #0]
 80050b6:	6053      	str	r3, [r2, #4]
 80050b8:	0030      	movs	r0, r6
 80050ba:	0025      	movs	r5, r4
 80050bc:	f000 fd26 	bl	8005b0c <__malloc_unlock>
 80050c0:	2207      	movs	r2, #7
 80050c2:	350b      	adds	r5, #11
 80050c4:	1d23      	adds	r3, r4, #4
 80050c6:	4395      	bics	r5, r2
 80050c8:	1aea      	subs	r2, r5, r3
 80050ca:	429d      	cmp	r5, r3
 80050cc:	d0e5      	beq.n	800509a <_malloc_r+0x82>
 80050ce:	1b5b      	subs	r3, r3, r5
 80050d0:	50a3      	str	r3, [r4, r2]
 80050d2:	e7e2      	b.n	800509a <_malloc_r+0x82>
 80050d4:	605a      	str	r2, [r3, #4]
 80050d6:	e7ec      	b.n	80050b2 <_malloc_r+0x9a>
 80050d8:	6862      	ldr	r2, [r4, #4]
 80050da:	42a3      	cmp	r3, r4
 80050dc:	d101      	bne.n	80050e2 <_malloc_r+0xca>
 80050de:	602a      	str	r2, [r5, #0]
 80050e0:	e7ea      	b.n	80050b8 <_malloc_r+0xa0>
 80050e2:	605a      	str	r2, [r3, #4]
 80050e4:	e7e8      	b.n	80050b8 <_malloc_r+0xa0>
 80050e6:	0023      	movs	r3, r4
 80050e8:	6864      	ldr	r4, [r4, #4]
 80050ea:	e7a7      	b.n	800503c <_malloc_r+0x24>
 80050ec:	002c      	movs	r4, r5
 80050ee:	686d      	ldr	r5, [r5, #4]
 80050f0:	e7af      	b.n	8005052 <_malloc_r+0x3a>
 80050f2:	230c      	movs	r3, #12
 80050f4:	0030      	movs	r0, r6
 80050f6:	6033      	str	r3, [r6, #0]
 80050f8:	f000 fd08 	bl	8005b0c <__malloc_unlock>
 80050fc:	e7cd      	b.n	800509a <_malloc_r+0x82>
 80050fe:	46c0      	nop			; (mov r8, r8)
 8005100:	20000228 	.word	0x20000228

08005104 <_sbrk_r>:
 8005104:	2300      	movs	r3, #0
 8005106:	b570      	push	{r4, r5, r6, lr}
 8005108:	4d06      	ldr	r5, [pc, #24]	; (8005124 <_sbrk_r+0x20>)
 800510a:	0004      	movs	r4, r0
 800510c:	0008      	movs	r0, r1
 800510e:	602b      	str	r3, [r5, #0]
 8005110:	f7fc f8c4 	bl	800129c <_sbrk>
 8005114:	1c43      	adds	r3, r0, #1
 8005116:	d103      	bne.n	8005120 <_sbrk_r+0x1c>
 8005118:	682b      	ldr	r3, [r5, #0]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d000      	beq.n	8005120 <_sbrk_r+0x1c>
 800511e:	6023      	str	r3, [r4, #0]
 8005120:	bd70      	pop	{r4, r5, r6, pc}
 8005122:	46c0      	nop			; (mov r8, r8)
 8005124:	2000025c 	.word	0x2000025c

08005128 <siprintf>:
 8005128:	b40e      	push	{r1, r2, r3}
 800512a:	b500      	push	{lr}
 800512c:	490b      	ldr	r1, [pc, #44]	; (800515c <siprintf+0x34>)
 800512e:	b09c      	sub	sp, #112	; 0x70
 8005130:	ab1d      	add	r3, sp, #116	; 0x74
 8005132:	9002      	str	r0, [sp, #8]
 8005134:	9006      	str	r0, [sp, #24]
 8005136:	9107      	str	r1, [sp, #28]
 8005138:	9104      	str	r1, [sp, #16]
 800513a:	4809      	ldr	r0, [pc, #36]	; (8005160 <siprintf+0x38>)
 800513c:	4909      	ldr	r1, [pc, #36]	; (8005164 <siprintf+0x3c>)
 800513e:	cb04      	ldmia	r3!, {r2}
 8005140:	9105      	str	r1, [sp, #20]
 8005142:	6800      	ldr	r0, [r0, #0]
 8005144:	a902      	add	r1, sp, #8
 8005146:	9301      	str	r3, [sp, #4]
 8005148:	f000 fd4a 	bl	8005be0 <_svfiprintf_r>
 800514c:	2300      	movs	r3, #0
 800514e:	9a02      	ldr	r2, [sp, #8]
 8005150:	7013      	strb	r3, [r2, #0]
 8005152:	b01c      	add	sp, #112	; 0x70
 8005154:	bc08      	pop	{r3}
 8005156:	b003      	add	sp, #12
 8005158:	4718      	bx	r3
 800515a:	46c0      	nop			; (mov r8, r8)
 800515c:	7fffffff 	.word	0x7fffffff
 8005160:	20000018 	.word	0x20000018
 8005164:	ffff0208 	.word	0xffff0208

08005168 <strcat>:
 8005168:	0002      	movs	r2, r0
 800516a:	b510      	push	{r4, lr}
 800516c:	7813      	ldrb	r3, [r2, #0]
 800516e:	0014      	movs	r4, r2
 8005170:	3201      	adds	r2, #1
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1fa      	bne.n	800516c <strcat+0x4>
 8005176:	5cca      	ldrb	r2, [r1, r3]
 8005178:	54e2      	strb	r2, [r4, r3]
 800517a:	3301      	adds	r3, #1
 800517c:	2a00      	cmp	r2, #0
 800517e:	d1fa      	bne.n	8005176 <strcat+0xe>
 8005180:	bd10      	pop	{r4, pc}
	...

08005184 <strtok>:
 8005184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005186:	4b16      	ldr	r3, [pc, #88]	; (80051e0 <strtok+0x5c>)
 8005188:	0005      	movs	r5, r0
 800518a:	681f      	ldr	r7, [r3, #0]
 800518c:	000e      	movs	r6, r1
 800518e:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8005190:	2c00      	cmp	r4, #0
 8005192:	d11d      	bne.n	80051d0 <strtok+0x4c>
 8005194:	2050      	movs	r0, #80	; 0x50
 8005196:	f7ff fc15 	bl	80049c4 <malloc>
 800519a:	1e02      	subs	r2, r0, #0
 800519c:	65b8      	str	r0, [r7, #88]	; 0x58
 800519e:	d104      	bne.n	80051aa <strtok+0x26>
 80051a0:	2157      	movs	r1, #87	; 0x57
 80051a2:	4b10      	ldr	r3, [pc, #64]	; (80051e4 <strtok+0x60>)
 80051a4:	4810      	ldr	r0, [pc, #64]	; (80051e8 <strtok+0x64>)
 80051a6:	f000 fb43 	bl	8005830 <__assert_func>
 80051aa:	6004      	str	r4, [r0, #0]
 80051ac:	6044      	str	r4, [r0, #4]
 80051ae:	6084      	str	r4, [r0, #8]
 80051b0:	60c4      	str	r4, [r0, #12]
 80051b2:	6104      	str	r4, [r0, #16]
 80051b4:	6144      	str	r4, [r0, #20]
 80051b6:	6184      	str	r4, [r0, #24]
 80051b8:	6284      	str	r4, [r0, #40]	; 0x28
 80051ba:	62c4      	str	r4, [r0, #44]	; 0x2c
 80051bc:	6304      	str	r4, [r0, #48]	; 0x30
 80051be:	6344      	str	r4, [r0, #52]	; 0x34
 80051c0:	6384      	str	r4, [r0, #56]	; 0x38
 80051c2:	63c4      	str	r4, [r0, #60]	; 0x3c
 80051c4:	6404      	str	r4, [r0, #64]	; 0x40
 80051c6:	6444      	str	r4, [r0, #68]	; 0x44
 80051c8:	6484      	str	r4, [r0, #72]	; 0x48
 80051ca:	64c4      	str	r4, [r0, #76]	; 0x4c
 80051cc:	7704      	strb	r4, [r0, #28]
 80051ce:	6244      	str	r4, [r0, #36]	; 0x24
 80051d0:	0031      	movs	r1, r6
 80051d2:	0028      	movs	r0, r5
 80051d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80051d6:	2301      	movs	r3, #1
 80051d8:	f000 f808 	bl	80051ec <__strtok_r>
 80051dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051de:	46c0      	nop			; (mov r8, r8)
 80051e0:	20000018 	.word	0x20000018
 80051e4:	0800770c 	.word	0x0800770c
 80051e8:	08007840 	.word	0x08007840

080051ec <__strtok_r>:
 80051ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051ee:	2800      	cmp	r0, #0
 80051f0:	d102      	bne.n	80051f8 <__strtok_r+0xc>
 80051f2:	6810      	ldr	r0, [r2, #0]
 80051f4:	2800      	cmp	r0, #0
 80051f6:	d013      	beq.n	8005220 <__strtok_r+0x34>
 80051f8:	0004      	movs	r4, r0
 80051fa:	0020      	movs	r0, r4
 80051fc:	000e      	movs	r6, r1
 80051fe:	7805      	ldrb	r5, [r0, #0]
 8005200:	3401      	adds	r4, #1
 8005202:	7837      	ldrb	r7, [r6, #0]
 8005204:	2f00      	cmp	r7, #0
 8005206:	d104      	bne.n	8005212 <__strtok_r+0x26>
 8005208:	2d00      	cmp	r5, #0
 800520a:	d10f      	bne.n	800522c <__strtok_r+0x40>
 800520c:	0028      	movs	r0, r5
 800520e:	6015      	str	r5, [r2, #0]
 8005210:	e006      	b.n	8005220 <__strtok_r+0x34>
 8005212:	3601      	adds	r6, #1
 8005214:	42bd      	cmp	r5, r7
 8005216:	d1f4      	bne.n	8005202 <__strtok_r+0x16>
 8005218:	2b00      	cmp	r3, #0
 800521a:	d1ee      	bne.n	80051fa <__strtok_r+0xe>
 800521c:	6014      	str	r4, [r2, #0]
 800521e:	7003      	strb	r3, [r0, #0]
 8005220:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005222:	002f      	movs	r7, r5
 8005224:	e00f      	b.n	8005246 <__strtok_r+0x5a>
 8005226:	3301      	adds	r3, #1
 8005228:	2e00      	cmp	r6, #0
 800522a:	d104      	bne.n	8005236 <__strtok_r+0x4a>
 800522c:	0023      	movs	r3, r4
 800522e:	3401      	adds	r4, #1
 8005230:	781d      	ldrb	r5, [r3, #0]
 8005232:	0027      	movs	r7, r4
 8005234:	000b      	movs	r3, r1
 8005236:	781e      	ldrb	r6, [r3, #0]
 8005238:	42b5      	cmp	r5, r6
 800523a:	d1f4      	bne.n	8005226 <__strtok_r+0x3a>
 800523c:	2d00      	cmp	r5, #0
 800523e:	d0f0      	beq.n	8005222 <__strtok_r+0x36>
 8005240:	2300      	movs	r3, #0
 8005242:	3c01      	subs	r4, #1
 8005244:	7023      	strb	r3, [r4, #0]
 8005246:	6017      	str	r7, [r2, #0]
 8005248:	e7ea      	b.n	8005220 <__strtok_r+0x34>
	...

0800524c <_strtol_l.constprop.0>:
 800524c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800524e:	b087      	sub	sp, #28
 8005250:	001e      	movs	r6, r3
 8005252:	9005      	str	r0, [sp, #20]
 8005254:	9101      	str	r1, [sp, #4]
 8005256:	9202      	str	r2, [sp, #8]
 8005258:	2b01      	cmp	r3, #1
 800525a:	d045      	beq.n	80052e8 <_strtol_l.constprop.0+0x9c>
 800525c:	000b      	movs	r3, r1
 800525e:	2e24      	cmp	r6, #36	; 0x24
 8005260:	d842      	bhi.n	80052e8 <_strtol_l.constprop.0+0x9c>
 8005262:	4a3f      	ldr	r2, [pc, #252]	; (8005360 <_strtol_l.constprop.0+0x114>)
 8005264:	2108      	movs	r1, #8
 8005266:	4694      	mov	ip, r2
 8005268:	001a      	movs	r2, r3
 800526a:	4660      	mov	r0, ip
 800526c:	7814      	ldrb	r4, [r2, #0]
 800526e:	3301      	adds	r3, #1
 8005270:	5d00      	ldrb	r0, [r0, r4]
 8005272:	001d      	movs	r5, r3
 8005274:	0007      	movs	r7, r0
 8005276:	400f      	ands	r7, r1
 8005278:	4208      	tst	r0, r1
 800527a:	d1f5      	bne.n	8005268 <_strtol_l.constprop.0+0x1c>
 800527c:	2c2d      	cmp	r4, #45	; 0x2d
 800527e:	d13a      	bne.n	80052f6 <_strtol_l.constprop.0+0xaa>
 8005280:	2701      	movs	r7, #1
 8005282:	781c      	ldrb	r4, [r3, #0]
 8005284:	1c95      	adds	r5, r2, #2
 8005286:	2e00      	cmp	r6, #0
 8005288:	d065      	beq.n	8005356 <_strtol_l.constprop.0+0x10a>
 800528a:	2e10      	cmp	r6, #16
 800528c:	d109      	bne.n	80052a2 <_strtol_l.constprop.0+0x56>
 800528e:	2c30      	cmp	r4, #48	; 0x30
 8005290:	d107      	bne.n	80052a2 <_strtol_l.constprop.0+0x56>
 8005292:	2220      	movs	r2, #32
 8005294:	782b      	ldrb	r3, [r5, #0]
 8005296:	4393      	bics	r3, r2
 8005298:	2b58      	cmp	r3, #88	; 0x58
 800529a:	d157      	bne.n	800534c <_strtol_l.constprop.0+0x100>
 800529c:	2610      	movs	r6, #16
 800529e:	786c      	ldrb	r4, [r5, #1]
 80052a0:	3502      	adds	r5, #2
 80052a2:	4b30      	ldr	r3, [pc, #192]	; (8005364 <_strtol_l.constprop.0+0x118>)
 80052a4:	0031      	movs	r1, r6
 80052a6:	18fb      	adds	r3, r7, r3
 80052a8:	0018      	movs	r0, r3
 80052aa:	9303      	str	r3, [sp, #12]
 80052ac:	f7fa ffce 	bl	800024c <__aeabi_uidivmod>
 80052b0:	2300      	movs	r3, #0
 80052b2:	2201      	movs	r2, #1
 80052b4:	4684      	mov	ip, r0
 80052b6:	0018      	movs	r0, r3
 80052b8:	9104      	str	r1, [sp, #16]
 80052ba:	4252      	negs	r2, r2
 80052bc:	0021      	movs	r1, r4
 80052be:	3930      	subs	r1, #48	; 0x30
 80052c0:	2909      	cmp	r1, #9
 80052c2:	d81d      	bhi.n	8005300 <_strtol_l.constprop.0+0xb4>
 80052c4:	000c      	movs	r4, r1
 80052c6:	42a6      	cmp	r6, r4
 80052c8:	dd28      	ble.n	800531c <_strtol_l.constprop.0+0xd0>
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	db24      	blt.n	8005318 <_strtol_l.constprop.0+0xcc>
 80052ce:	0013      	movs	r3, r2
 80052d0:	4584      	cmp	ip, r0
 80052d2:	d306      	bcc.n	80052e2 <_strtol_l.constprop.0+0x96>
 80052d4:	d102      	bne.n	80052dc <_strtol_l.constprop.0+0x90>
 80052d6:	9904      	ldr	r1, [sp, #16]
 80052d8:	42a1      	cmp	r1, r4
 80052da:	db02      	blt.n	80052e2 <_strtol_l.constprop.0+0x96>
 80052dc:	2301      	movs	r3, #1
 80052de:	4370      	muls	r0, r6
 80052e0:	1820      	adds	r0, r4, r0
 80052e2:	782c      	ldrb	r4, [r5, #0]
 80052e4:	3501      	adds	r5, #1
 80052e6:	e7e9      	b.n	80052bc <_strtol_l.constprop.0+0x70>
 80052e8:	f7ff fa22 	bl	8004730 <__errno>
 80052ec:	2316      	movs	r3, #22
 80052ee:	6003      	str	r3, [r0, #0]
 80052f0:	2000      	movs	r0, #0
 80052f2:	b007      	add	sp, #28
 80052f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052f6:	2c2b      	cmp	r4, #43	; 0x2b
 80052f8:	d1c5      	bne.n	8005286 <_strtol_l.constprop.0+0x3a>
 80052fa:	781c      	ldrb	r4, [r3, #0]
 80052fc:	1c95      	adds	r5, r2, #2
 80052fe:	e7c2      	b.n	8005286 <_strtol_l.constprop.0+0x3a>
 8005300:	0021      	movs	r1, r4
 8005302:	3941      	subs	r1, #65	; 0x41
 8005304:	2919      	cmp	r1, #25
 8005306:	d801      	bhi.n	800530c <_strtol_l.constprop.0+0xc0>
 8005308:	3c37      	subs	r4, #55	; 0x37
 800530a:	e7dc      	b.n	80052c6 <_strtol_l.constprop.0+0x7a>
 800530c:	0021      	movs	r1, r4
 800530e:	3961      	subs	r1, #97	; 0x61
 8005310:	2919      	cmp	r1, #25
 8005312:	d803      	bhi.n	800531c <_strtol_l.constprop.0+0xd0>
 8005314:	3c57      	subs	r4, #87	; 0x57
 8005316:	e7d6      	b.n	80052c6 <_strtol_l.constprop.0+0x7a>
 8005318:	0013      	movs	r3, r2
 800531a:	e7e2      	b.n	80052e2 <_strtol_l.constprop.0+0x96>
 800531c:	2b00      	cmp	r3, #0
 800531e:	da09      	bge.n	8005334 <_strtol_l.constprop.0+0xe8>
 8005320:	2322      	movs	r3, #34	; 0x22
 8005322:	9a05      	ldr	r2, [sp, #20]
 8005324:	9803      	ldr	r0, [sp, #12]
 8005326:	6013      	str	r3, [r2, #0]
 8005328:	9b02      	ldr	r3, [sp, #8]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d0e1      	beq.n	80052f2 <_strtol_l.constprop.0+0xa6>
 800532e:	1e6b      	subs	r3, r5, #1
 8005330:	9301      	str	r3, [sp, #4]
 8005332:	e007      	b.n	8005344 <_strtol_l.constprop.0+0xf8>
 8005334:	2f00      	cmp	r7, #0
 8005336:	d000      	beq.n	800533a <_strtol_l.constprop.0+0xee>
 8005338:	4240      	negs	r0, r0
 800533a:	9a02      	ldr	r2, [sp, #8]
 800533c:	2a00      	cmp	r2, #0
 800533e:	d0d8      	beq.n	80052f2 <_strtol_l.constprop.0+0xa6>
 8005340:	2b00      	cmp	r3, #0
 8005342:	d1f4      	bne.n	800532e <_strtol_l.constprop.0+0xe2>
 8005344:	9b02      	ldr	r3, [sp, #8]
 8005346:	9a01      	ldr	r2, [sp, #4]
 8005348:	601a      	str	r2, [r3, #0]
 800534a:	e7d2      	b.n	80052f2 <_strtol_l.constprop.0+0xa6>
 800534c:	2430      	movs	r4, #48	; 0x30
 800534e:	2e00      	cmp	r6, #0
 8005350:	d1a7      	bne.n	80052a2 <_strtol_l.constprop.0+0x56>
 8005352:	3608      	adds	r6, #8
 8005354:	e7a5      	b.n	80052a2 <_strtol_l.constprop.0+0x56>
 8005356:	2c30      	cmp	r4, #48	; 0x30
 8005358:	d09b      	beq.n	8005292 <_strtol_l.constprop.0+0x46>
 800535a:	260a      	movs	r6, #10
 800535c:	e7a1      	b.n	80052a2 <_strtol_l.constprop.0+0x56>
 800535e:	46c0      	nop			; (mov r8, r8)
 8005360:	08007916 	.word	0x08007916
 8005364:	7fffffff 	.word	0x7fffffff

08005368 <_strtol_r>:
 8005368:	b510      	push	{r4, lr}
 800536a:	f7ff ff6f 	bl	800524c <_strtol_l.constprop.0>
 800536e:	bd10      	pop	{r4, pc}

08005370 <strtol>:
 8005370:	b510      	push	{r4, lr}
 8005372:	0013      	movs	r3, r2
 8005374:	000a      	movs	r2, r1
 8005376:	0001      	movs	r1, r0
 8005378:	4802      	ldr	r0, [pc, #8]	; (8005384 <strtol+0x14>)
 800537a:	6800      	ldr	r0, [r0, #0]
 800537c:	f7ff ff66 	bl	800524c <_strtol_l.constprop.0>
 8005380:	bd10      	pop	{r4, pc}
 8005382:	46c0      	nop			; (mov r8, r8)
 8005384:	20000018 	.word	0x20000018

08005388 <__tzcalc_limits>:
 8005388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800538a:	b08d      	sub	sp, #52	; 0x34
 800538c:	0004      	movs	r4, r0
 800538e:	f000 fad7 	bl	8005940 <__gettzinfo>
 8005392:	4b53      	ldr	r3, [pc, #332]	; (80054e0 <__tzcalc_limits+0x158>)
 8005394:	0005      	movs	r5, r0
 8005396:	2000      	movs	r0, #0
 8005398:	429c      	cmp	r4, r3
 800539a:	dd6d      	ble.n	8005478 <__tzcalc_limits+0xf0>
 800539c:	266e      	movs	r6, #110	; 0x6e
 800539e:	2164      	movs	r1, #100	; 0x64
 80053a0:	4b50      	ldr	r3, [pc, #320]	; (80054e4 <__tzcalc_limits+0x15c>)
 80053a2:	36ff      	adds	r6, #255	; 0xff
 80053a4:	18e0      	adds	r0, r4, r3
 80053a6:	4346      	muls	r6, r0
 80053a8:	4b4f      	ldr	r3, [pc, #316]	; (80054e8 <__tzcalc_limits+0x160>)
 80053aa:	606c      	str	r4, [r5, #4]
 80053ac:	18e3      	adds	r3, r4, r3
 80053ae:	109b      	asrs	r3, r3, #2
 80053b0:	18f6      	adds	r6, r6, r3
 80053b2:	4b4e      	ldr	r3, [pc, #312]	; (80054ec <__tzcalc_limits+0x164>)
 80053b4:	4249      	negs	r1, r1
 80053b6:	18e0      	adds	r0, r4, r3
 80053b8:	f7fa ff4c 	bl	8000254 <__divsi3>
 80053bc:	21c8      	movs	r1, #200	; 0xc8
 80053be:	4b4c      	ldr	r3, [pc, #304]	; (80054f0 <__tzcalc_limits+0x168>)
 80053c0:	1836      	adds	r6, r6, r0
 80053c2:	0049      	lsls	r1, r1, #1
 80053c4:	18e0      	adds	r0, r4, r3
 80053c6:	f7fa ff45 	bl	8000254 <__divsi3>
 80053ca:	2164      	movs	r1, #100	; 0x64
 80053cc:	1833      	adds	r3, r6, r0
 80053ce:	0020      	movs	r0, r4
 80053d0:	9301      	str	r3, [sp, #4]
 80053d2:	f7fb f825 	bl	8000420 <__aeabi_idivmod>
 80053d6:	9102      	str	r1, [sp, #8]
 80053d8:	21c8      	movs	r1, #200	; 0xc8
 80053da:	0020      	movs	r0, r4
 80053dc:	0049      	lsls	r1, r1, #1
 80053de:	f7fb f81f 	bl	8000420 <__aeabi_idivmod>
 80053e2:	000b      	movs	r3, r1
 80053e4:	2003      	movs	r0, #3
 80053e6:	425a      	negs	r2, r3
 80053e8:	415a      	adcs	r2, r3
 80053ea:	002b      	movs	r3, r5
 80053ec:	002e      	movs	r6, r5
 80053ee:	3358      	adds	r3, #88	; 0x58
 80053f0:	4004      	ands	r4, r0
 80053f2:	9103      	str	r1, [sp, #12]
 80053f4:	920b      	str	r2, [sp, #44]	; 0x2c
 80053f6:	3608      	adds	r6, #8
 80053f8:	930a      	str	r3, [sp, #40]	; 0x28
 80053fa:	9409      	str	r4, [sp, #36]	; 0x24
 80053fc:	7833      	ldrb	r3, [r6, #0]
 80053fe:	68f7      	ldr	r7, [r6, #12]
 8005400:	2b4a      	cmp	r3, #74	; 0x4a
 8005402:	d13b      	bne.n	800547c <__tzcalc_limits+0xf4>
 8005404:	9b01      	ldr	r3, [sp, #4]
 8005406:	19d8      	adds	r0, r3, r7
 8005408:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800540a:	2b00      	cmp	r3, #0
 800540c:	d102      	bne.n	8005414 <__tzcalc_limits+0x8c>
 800540e:	9b02      	ldr	r3, [sp, #8]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d103      	bne.n	800541c <__tzcalc_limits+0x94>
 8005414:	2400      	movs	r4, #0
 8005416:	9b03      	ldr	r3, [sp, #12]
 8005418:	42a3      	cmp	r3, r4
 800541a:	d103      	bne.n	8005424 <__tzcalc_limits+0x9c>
 800541c:	2401      	movs	r4, #1
 800541e:	2f3b      	cmp	r7, #59	; 0x3b
 8005420:	dc00      	bgt.n	8005424 <__tzcalc_limits+0x9c>
 8005422:	2400      	movs	r4, #0
 8005424:	1900      	adds	r0, r0, r4
 8005426:	3801      	subs	r0, #1
 8005428:	2300      	movs	r3, #0
 800542a:	4a32      	ldr	r2, [pc, #200]	; (80054f4 <__tzcalc_limits+0x16c>)
 800542c:	17c1      	asrs	r1, r0, #31
 800542e:	f7fb f841 	bl	80004b4 <__aeabi_lmul>
 8005432:	6933      	ldr	r3, [r6, #16]
 8005434:	9304      	str	r3, [sp, #16]
 8005436:	17db      	asrs	r3, r3, #31
 8005438:	9305      	str	r3, [sp, #20]
 800543a:	9b04      	ldr	r3, [sp, #16]
 800543c:	9c05      	ldr	r4, [sp, #20]
 800543e:	18c0      	adds	r0, r0, r3
 8005440:	4161      	adcs	r1, r4
 8005442:	6a33      	ldr	r3, [r6, #32]
 8005444:	9306      	str	r3, [sp, #24]
 8005446:	17db      	asrs	r3, r3, #31
 8005448:	9307      	str	r3, [sp, #28]
 800544a:	9b06      	ldr	r3, [sp, #24]
 800544c:	9c07      	ldr	r4, [sp, #28]
 800544e:	18c0      	adds	r0, r0, r3
 8005450:	4161      	adcs	r1, r4
 8005452:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005454:	61b0      	str	r0, [r6, #24]
 8005456:	61f1      	str	r1, [r6, #28]
 8005458:	3628      	adds	r6, #40	; 0x28
 800545a:	42b3      	cmp	r3, r6
 800545c:	d1ce      	bne.n	80053fc <__tzcalc_limits+0x74>
 800545e:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8005460:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8005462:	2301      	movs	r3, #1
 8005464:	4291      	cmp	r1, r2
 8005466:	dc05      	bgt.n	8005474 <__tzcalc_limits+0xec>
 8005468:	d103      	bne.n	8005472 <__tzcalc_limits+0xea>
 800546a:	6caa      	ldr	r2, [r5, #72]	; 0x48
 800546c:	6a29      	ldr	r1, [r5, #32]
 800546e:	428a      	cmp	r2, r1
 8005470:	d800      	bhi.n	8005474 <__tzcalc_limits+0xec>
 8005472:	2300      	movs	r3, #0
 8005474:	2001      	movs	r0, #1
 8005476:	602b      	str	r3, [r5, #0]
 8005478:	b00d      	add	sp, #52	; 0x34
 800547a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800547c:	2b44      	cmp	r3, #68	; 0x44
 800547e:	d102      	bne.n	8005486 <__tzcalc_limits+0xfe>
 8005480:	9b01      	ldr	r3, [sp, #4]
 8005482:	19d8      	adds	r0, r3, r7
 8005484:	e7d0      	b.n	8005428 <__tzcalc_limits+0xa0>
 8005486:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005488:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800548a:	2a00      	cmp	r2, #0
 800548c:	d103      	bne.n	8005496 <__tzcalc_limits+0x10e>
 800548e:	9a02      	ldr	r2, [sp, #8]
 8005490:	2a00      	cmp	r2, #0
 8005492:	d000      	beq.n	8005496 <__tzcalc_limits+0x10e>
 8005494:	2301      	movs	r3, #1
 8005496:	2230      	movs	r2, #48	; 0x30
 8005498:	4353      	muls	r3, r2
 800549a:	2200      	movs	r2, #0
 800549c:	4816      	ldr	r0, [pc, #88]	; (80054f8 <__tzcalc_limits+0x170>)
 800549e:	3b04      	subs	r3, #4
 80054a0:	6871      	ldr	r1, [r6, #4]
 80054a2:	9c01      	ldr	r4, [sp, #4]
 80054a4:	181b      	adds	r3, r3, r0
 80054a6:	3201      	adds	r2, #1
 80054a8:	0090      	lsls	r0, r2, #2
 80054aa:	5818      	ldr	r0, [r3, r0]
 80054ac:	9008      	str	r0, [sp, #32]
 80054ae:	4291      	cmp	r1, r2
 80054b0:	dc10      	bgt.n	80054d4 <__tzcalc_limits+0x14c>
 80054b2:	2107      	movs	r1, #7
 80054b4:	1d20      	adds	r0, r4, #4
 80054b6:	f7fa ffb3 	bl	8000420 <__aeabi_idivmod>
 80054ba:	1a79      	subs	r1, r7, r1
 80054bc:	d500      	bpl.n	80054c0 <__tzcalc_limits+0x138>
 80054be:	3107      	adds	r1, #7
 80054c0:	2007      	movs	r0, #7
 80054c2:	68b3      	ldr	r3, [r6, #8]
 80054c4:	3b01      	subs	r3, #1
 80054c6:	4358      	muls	r0, r3
 80054c8:	1840      	adds	r0, r0, r1
 80054ca:	9b08      	ldr	r3, [sp, #32]
 80054cc:	4298      	cmp	r0, r3
 80054ce:	da04      	bge.n	80054da <__tzcalc_limits+0x152>
 80054d0:	1820      	adds	r0, r4, r0
 80054d2:	e7a9      	b.n	8005428 <__tzcalc_limits+0xa0>
 80054d4:	9808      	ldr	r0, [sp, #32]
 80054d6:	1824      	adds	r4, r4, r0
 80054d8:	e7e5      	b.n	80054a6 <__tzcalc_limits+0x11e>
 80054da:	3807      	subs	r0, #7
 80054dc:	e7f5      	b.n	80054ca <__tzcalc_limits+0x142>
 80054de:	46c0      	nop			; (mov r8, r8)
 80054e0:	000007b1 	.word	0x000007b1
 80054e4:	fffff84e 	.word	0xfffff84e
 80054e8:	fffff84f 	.word	0xfffff84f
 80054ec:	fffff893 	.word	0xfffff893
 80054f0:	fffff9bf 	.word	0xfffff9bf
 80054f4:	00015180 	.word	0x00015180
 80054f8:	080077e0 	.word	0x080077e0

080054fc <__tz_lock>:
 80054fc:	b510      	push	{r4, lr}
 80054fe:	4802      	ldr	r0, [pc, #8]	; (8005508 <__tz_lock+0xc>)
 8005500:	f000 faf7 	bl	8005af2 <__retarget_lock_acquire>
 8005504:	bd10      	pop	{r4, pc}
 8005506:	46c0      	nop			; (mov r8, r8)
 8005508:	20000258 	.word	0x20000258

0800550c <__tz_unlock>:
 800550c:	b510      	push	{r4, lr}
 800550e:	4802      	ldr	r0, [pc, #8]	; (8005518 <__tz_unlock+0xc>)
 8005510:	f000 faf1 	bl	8005af6 <__retarget_lock_release>
 8005514:	bd10      	pop	{r4, pc}
 8005516:	46c0      	nop			; (mov r8, r8)
 8005518:	20000258 	.word	0x20000258

0800551c <_tzset_unlocked>:
 800551c:	b510      	push	{r4, lr}
 800551e:	4b02      	ldr	r3, [pc, #8]	; (8005528 <_tzset_unlocked+0xc>)
 8005520:	6818      	ldr	r0, [r3, #0]
 8005522:	f000 f803 	bl	800552c <_tzset_unlocked_r>
 8005526:	bd10      	pop	{r4, pc}
 8005528:	20000018 	.word	0x20000018

0800552c <_tzset_unlocked_r>:
 800552c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800552e:	b08d      	sub	sp, #52	; 0x34
 8005530:	0006      	movs	r6, r0
 8005532:	f000 fa05 	bl	8005940 <__gettzinfo>
 8005536:	49b1      	ldr	r1, [pc, #708]	; (80057fc <_tzset_unlocked_r+0x2d0>)
 8005538:	0007      	movs	r7, r0
 800553a:	0030      	movs	r0, r6
 800553c:	f000 f9fa 	bl	8005934 <_getenv_r>
 8005540:	4caf      	ldr	r4, [pc, #700]	; (8005800 <_tzset_unlocked_r+0x2d4>)
 8005542:	1e05      	subs	r5, r0, #0
 8005544:	d10d      	bne.n	8005562 <_tzset_unlocked_r+0x36>
 8005546:	4baf      	ldr	r3, [pc, #700]	; (8005804 <_tzset_unlocked_r+0x2d8>)
 8005548:	4aaf      	ldr	r2, [pc, #700]	; (8005808 <_tzset_unlocked_r+0x2dc>)
 800554a:	6018      	str	r0, [r3, #0]
 800554c:	4baf      	ldr	r3, [pc, #700]	; (800580c <_tzset_unlocked_r+0x2e0>)
 800554e:	6018      	str	r0, [r3, #0]
 8005550:	4baf      	ldr	r3, [pc, #700]	; (8005810 <_tzset_unlocked_r+0x2e4>)
 8005552:	6820      	ldr	r0, [r4, #0]
 8005554:	601a      	str	r2, [r3, #0]
 8005556:	605a      	str	r2, [r3, #4]
 8005558:	f7ff fa3e 	bl	80049d8 <free>
 800555c:	6025      	str	r5, [r4, #0]
 800555e:	b00d      	add	sp, #52	; 0x34
 8005560:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005562:	6821      	ldr	r1, [r4, #0]
 8005564:	2900      	cmp	r1, #0
 8005566:	d159      	bne.n	800561c <_tzset_unlocked_r+0xf0>
 8005568:	6820      	ldr	r0, [r4, #0]
 800556a:	f7ff fa35 	bl	80049d8 <free>
 800556e:	0028      	movs	r0, r5
 8005570:	f7fa fdd4 	bl	800011c <strlen>
 8005574:	1c41      	adds	r1, r0, #1
 8005576:	0030      	movs	r0, r6
 8005578:	f7ff fd4e 	bl	8005018 <_malloc_r>
 800557c:	6020      	str	r0, [r4, #0]
 800557e:	2800      	cmp	r0, #0
 8005580:	d151      	bne.n	8005626 <_tzset_unlocked_r+0xfa>
 8005582:	782b      	ldrb	r3, [r5, #0]
 8005584:	49a3      	ldr	r1, [pc, #652]	; (8005814 <_tzset_unlocked_r+0x2e8>)
 8005586:	3b3a      	subs	r3, #58	; 0x3a
 8005588:	425a      	negs	r2, r3
 800558a:	4153      	adcs	r3, r2
 800558c:	18ed      	adds	r5, r5, r3
 800558e:	0028      	movs	r0, r5
 8005590:	4aa1      	ldr	r2, [pc, #644]	; (8005818 <_tzset_unlocked_r+0x2ec>)
 8005592:	ab0a      	add	r3, sp, #40	; 0x28
 8005594:	f000 ff08 	bl	80063a8 <siscanf>
 8005598:	2800      	cmp	r0, #0
 800559a:	dde0      	ble.n	800555e <_tzset_unlocked_r+0x32>
 800559c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800559e:	18ec      	adds	r4, r5, r3
 80055a0:	5ceb      	ldrb	r3, [r5, r3]
 80055a2:	2b2d      	cmp	r3, #45	; 0x2d
 80055a4:	d143      	bne.n	800562e <_tzset_unlocked_r+0x102>
 80055a6:	3b2e      	subs	r3, #46	; 0x2e
 80055a8:	3401      	adds	r4, #1
 80055aa:	9304      	str	r3, [sp, #16]
 80055ac:	2616      	movs	r6, #22
 80055ae:	ab02      	add	r3, sp, #8
 80055b0:	18f6      	adds	r6, r6, r3
 80055b2:	2300      	movs	r3, #0
 80055b4:	ad08      	add	r5, sp, #32
 80055b6:	8033      	strh	r3, [r6, #0]
 80055b8:	802b      	strh	r3, [r5, #0]
 80055ba:	ab0a      	add	r3, sp, #40	; 0x28
 80055bc:	0020      	movs	r0, r4
 80055be:	4997      	ldr	r1, [pc, #604]	; (800581c <_tzset_unlocked_r+0x2f0>)
 80055c0:	9303      	str	r3, [sp, #12]
 80055c2:	9502      	str	r5, [sp, #8]
 80055c4:	9301      	str	r3, [sp, #4]
 80055c6:	9600      	str	r6, [sp, #0]
 80055c8:	aa07      	add	r2, sp, #28
 80055ca:	f000 feed 	bl	80063a8 <siscanf>
 80055ce:	2800      	cmp	r0, #0
 80055d0:	ddc5      	ble.n	800555e <_tzset_unlocked_r+0x32>
 80055d2:	233c      	movs	r3, #60	; 0x3c
 80055d4:	8832      	ldrh	r2, [r6, #0]
 80055d6:	4e92      	ldr	r6, [pc, #584]	; (8005820 <_tzset_unlocked_r+0x2f4>)
 80055d8:	4353      	muls	r3, r2
 80055da:	882a      	ldrh	r2, [r5, #0]
 80055dc:	4d8c      	ldr	r5, [pc, #560]	; (8005810 <_tzset_unlocked_r+0x2e4>)
 80055de:	189b      	adds	r3, r3, r2
 80055e0:	aa02      	add	r2, sp, #8
 80055e2:	8a91      	ldrh	r1, [r2, #20]
 80055e4:	22e1      	movs	r2, #225	; 0xe1
 80055e6:	0112      	lsls	r2, r2, #4
 80055e8:	434a      	muls	r2, r1
 80055ea:	189b      	adds	r3, r3, r2
 80055ec:	9a04      	ldr	r2, [sp, #16]
 80055ee:	4989      	ldr	r1, [pc, #548]	; (8005814 <_tzset_unlocked_r+0x2e8>)
 80055f0:	435a      	muls	r2, r3
 80055f2:	4b89      	ldr	r3, [pc, #548]	; (8005818 <_tzset_unlocked_r+0x2ec>)
 80055f4:	62ba      	str	r2, [r7, #40]	; 0x28
 80055f6:	602b      	str	r3, [r5, #0]
 80055f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055fa:	0032      	movs	r2, r6
 80055fc:	18e4      	adds	r4, r4, r3
 80055fe:	0020      	movs	r0, r4
 8005600:	ab0a      	add	r3, sp, #40	; 0x28
 8005602:	f000 fed1 	bl	80063a8 <siscanf>
 8005606:	2800      	cmp	r0, #0
 8005608:	dc18      	bgt.n	800563c <_tzset_unlocked_r+0x110>
 800560a:	682b      	ldr	r3, [r5, #0]
 800560c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800560e:	606b      	str	r3, [r5, #4]
 8005610:	4b7c      	ldr	r3, [pc, #496]	; (8005804 <_tzset_unlocked_r+0x2d8>)
 8005612:	601a      	str	r2, [r3, #0]
 8005614:	2200      	movs	r2, #0
 8005616:	4b7d      	ldr	r3, [pc, #500]	; (800580c <_tzset_unlocked_r+0x2e0>)
 8005618:	601a      	str	r2, [r3, #0]
 800561a:	e7a0      	b.n	800555e <_tzset_unlocked_r+0x32>
 800561c:	f7fa fd74 	bl	8000108 <strcmp>
 8005620:	2800      	cmp	r0, #0
 8005622:	d1a1      	bne.n	8005568 <_tzset_unlocked_r+0x3c>
 8005624:	e79b      	b.n	800555e <_tzset_unlocked_r+0x32>
 8005626:	0029      	movs	r1, r5
 8005628:	f000 ff34 	bl	8006494 <strcpy>
 800562c:	e7a9      	b.n	8005582 <_tzset_unlocked_r+0x56>
 800562e:	2201      	movs	r2, #1
 8005630:	3b2b      	subs	r3, #43	; 0x2b
 8005632:	9204      	str	r2, [sp, #16]
 8005634:	425a      	negs	r2, r3
 8005636:	4153      	adcs	r3, r2
 8005638:	18e4      	adds	r4, r4, r3
 800563a:	e7b7      	b.n	80055ac <_tzset_unlocked_r+0x80>
 800563c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800563e:	606e      	str	r6, [r5, #4]
 8005640:	18e5      	adds	r5, r4, r3
 8005642:	5ce3      	ldrb	r3, [r4, r3]
 8005644:	2b2d      	cmp	r3, #45	; 0x2d
 8005646:	d000      	beq.n	800564a <_tzset_unlocked_r+0x11e>
 8005648:	e093      	b.n	8005772 <_tzset_unlocked_r+0x246>
 800564a:	3b2e      	subs	r3, #46	; 0x2e
 800564c:	3501      	adds	r5, #1
 800564e:	9304      	str	r3, [sp, #16]
 8005650:	2416      	movs	r4, #22
 8005652:	2300      	movs	r3, #0
 8005654:	aa02      	add	r2, sp, #8
 8005656:	18a4      	adds	r4, r4, r2
 8005658:	ae08      	add	r6, sp, #32
 800565a:	8293      	strh	r3, [r2, #20]
 800565c:	8023      	strh	r3, [r4, #0]
 800565e:	8033      	strh	r3, [r6, #0]
 8005660:	930a      	str	r3, [sp, #40]	; 0x28
 8005662:	ab0a      	add	r3, sp, #40	; 0x28
 8005664:	0028      	movs	r0, r5
 8005666:	496d      	ldr	r1, [pc, #436]	; (800581c <_tzset_unlocked_r+0x2f0>)
 8005668:	9303      	str	r3, [sp, #12]
 800566a:	9602      	str	r6, [sp, #8]
 800566c:	9301      	str	r3, [sp, #4]
 800566e:	9400      	str	r4, [sp, #0]
 8005670:	aa07      	add	r2, sp, #28
 8005672:	f000 fe99 	bl	80063a8 <siscanf>
 8005676:	2800      	cmp	r0, #0
 8005678:	dd00      	ble.n	800567c <_tzset_unlocked_r+0x150>
 800567a:	e081      	b.n	8005780 <_tzset_unlocked_r+0x254>
 800567c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800567e:	4a69      	ldr	r2, [pc, #420]	; (8005824 <_tzset_unlocked_r+0x2f8>)
 8005680:	189c      	adds	r4, r3, r2
 8005682:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005684:	653c      	str	r4, [r7, #80]	; 0x50
 8005686:	003c      	movs	r4, r7
 8005688:	18ed      	adds	r5, r5, r3
 800568a:	2300      	movs	r3, #0
 800568c:	3408      	adds	r4, #8
 800568e:	9305      	str	r3, [sp, #20]
 8005690:	782b      	ldrb	r3, [r5, #0]
 8005692:	3b2c      	subs	r3, #44	; 0x2c
 8005694:	425a      	negs	r2, r3
 8005696:	4153      	adcs	r3, r2
 8005698:	18ed      	adds	r5, r5, r3
 800569a:	782b      	ldrb	r3, [r5, #0]
 800569c:	9304      	str	r3, [sp, #16]
 800569e:	2b4d      	cmp	r3, #77	; 0x4d
 80056a0:	d000      	beq.n	80056a4 <_tzset_unlocked_r+0x178>
 80056a2:	e07d      	b.n	80057a0 <_tzset_unlocked_r+0x274>
 80056a4:	261a      	movs	r6, #26
 80056a6:	ab02      	add	r3, sp, #8
 80056a8:	18f6      	adds	r6, r6, r3
 80056aa:	ab0a      	add	r3, sp, #40	; 0x28
 80056ac:	9303      	str	r3, [sp, #12]
 80056ae:	231e      	movs	r3, #30
 80056b0:	aa02      	add	r2, sp, #8
 80056b2:	189b      	adds	r3, r3, r2
 80056b4:	9302      	str	r3, [sp, #8]
 80056b6:	ab0a      	add	r3, sp, #40	; 0x28
 80056b8:	9301      	str	r3, [sp, #4]
 80056ba:	ab09      	add	r3, sp, #36	; 0x24
 80056bc:	9300      	str	r3, [sp, #0]
 80056be:	0032      	movs	r2, r6
 80056c0:	0028      	movs	r0, r5
 80056c2:	4959      	ldr	r1, [pc, #356]	; (8005828 <_tzset_unlocked_r+0x2fc>)
 80056c4:	ab0a      	add	r3, sp, #40	; 0x28
 80056c6:	f000 fe6f 	bl	80063a8 <siscanf>
 80056ca:	2803      	cmp	r0, #3
 80056cc:	d000      	beq.n	80056d0 <_tzset_unlocked_r+0x1a4>
 80056ce:	e746      	b.n	800555e <_tzset_unlocked_r+0x32>
 80056d0:	8831      	ldrh	r1, [r6, #0]
 80056d2:	1e4b      	subs	r3, r1, #1
 80056d4:	2b0b      	cmp	r3, #11
 80056d6:	d900      	bls.n	80056da <_tzset_unlocked_r+0x1ae>
 80056d8:	e741      	b.n	800555e <_tzset_unlocked_r+0x32>
 80056da:	ab02      	add	r3, sp, #8
 80056dc:	8b9a      	ldrh	r2, [r3, #28]
 80056de:	1e53      	subs	r3, r2, #1
 80056e0:	2b04      	cmp	r3, #4
 80056e2:	d900      	bls.n	80056e6 <_tzset_unlocked_r+0x1ba>
 80056e4:	e73b      	b.n	800555e <_tzset_unlocked_r+0x32>
 80056e6:	ab02      	add	r3, sp, #8
 80056e8:	8bdb      	ldrh	r3, [r3, #30]
 80056ea:	2b06      	cmp	r3, #6
 80056ec:	d900      	bls.n	80056f0 <_tzset_unlocked_r+0x1c4>
 80056ee:	e736      	b.n	800555e <_tzset_unlocked_r+0x32>
 80056f0:	9804      	ldr	r0, [sp, #16]
 80056f2:	6061      	str	r1, [r4, #4]
 80056f4:	7020      	strb	r0, [r4, #0]
 80056f6:	60a2      	str	r2, [r4, #8]
 80056f8:	60e3      	str	r3, [r4, #12]
 80056fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056fc:	18eb      	adds	r3, r5, r3
 80056fe:	9304      	str	r3, [sp, #16]
 8005700:	2302      	movs	r3, #2
 8005702:	2616      	movs	r6, #22
 8005704:	aa07      	add	r2, sp, #28
 8005706:	8013      	strh	r3, [r2, #0]
 8005708:	ab02      	add	r3, sp, #8
 800570a:	18f6      	adds	r6, r6, r3
 800570c:	2300      	movs	r3, #0
 800570e:	ad08      	add	r5, sp, #32
 8005710:	8033      	strh	r3, [r6, #0]
 8005712:	802b      	strh	r3, [r5, #0]
 8005714:	930a      	str	r3, [sp, #40]	; 0x28
 8005716:	9b04      	ldr	r3, [sp, #16]
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	2b2f      	cmp	r3, #47	; 0x2f
 800571c:	d108      	bne.n	8005730 <_tzset_unlocked_r+0x204>
 800571e:	ab0a      	add	r3, sp, #40	; 0x28
 8005720:	4942      	ldr	r1, [pc, #264]	; (800582c <_tzset_unlocked_r+0x300>)
 8005722:	9804      	ldr	r0, [sp, #16]
 8005724:	9303      	str	r3, [sp, #12]
 8005726:	9502      	str	r5, [sp, #8]
 8005728:	9301      	str	r3, [sp, #4]
 800572a:	9600      	str	r6, [sp, #0]
 800572c:	f000 fe3c 	bl	80063a8 <siscanf>
 8005730:	233c      	movs	r3, #60	; 0x3c
 8005732:	8832      	ldrh	r2, [r6, #0]
 8005734:	4353      	muls	r3, r2
 8005736:	882a      	ldrh	r2, [r5, #0]
 8005738:	9d04      	ldr	r5, [sp, #16]
 800573a:	189b      	adds	r3, r3, r2
 800573c:	aa07      	add	r2, sp, #28
 800573e:	8811      	ldrh	r1, [r2, #0]
 8005740:	22e1      	movs	r2, #225	; 0xe1
 8005742:	0112      	lsls	r2, r2, #4
 8005744:	434a      	muls	r2, r1
 8005746:	189b      	adds	r3, r3, r2
 8005748:	6123      	str	r3, [r4, #16]
 800574a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800574c:	3428      	adds	r4, #40	; 0x28
 800574e:	469c      	mov	ip, r3
 8005750:	9b05      	ldr	r3, [sp, #20]
 8005752:	4465      	add	r5, ip
 8005754:	2b01      	cmp	r3, #1
 8005756:	d121      	bne.n	800579c <_tzset_unlocked_r+0x270>
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f7ff fe15 	bl	8005388 <__tzcalc_limits>
 800575e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005760:	4b28      	ldr	r3, [pc, #160]	; (8005804 <_tzset_unlocked_r+0x2d8>)
 8005762:	601a      	str	r2, [r3, #0]
 8005764:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005766:	1a9b      	subs	r3, r3, r2
 8005768:	1e5a      	subs	r2, r3, #1
 800576a:	4193      	sbcs	r3, r2
 800576c:	4a27      	ldr	r2, [pc, #156]	; (800580c <_tzset_unlocked_r+0x2e0>)
 800576e:	6013      	str	r3, [r2, #0]
 8005770:	e6f5      	b.n	800555e <_tzset_unlocked_r+0x32>
 8005772:	2201      	movs	r2, #1
 8005774:	3b2b      	subs	r3, #43	; 0x2b
 8005776:	9204      	str	r2, [sp, #16]
 8005778:	425a      	negs	r2, r3
 800577a:	4153      	adcs	r3, r2
 800577c:	18ed      	adds	r5, r5, r3
 800577e:	e767      	b.n	8005650 <_tzset_unlocked_r+0x124>
 8005780:	233c      	movs	r3, #60	; 0x3c
 8005782:	8822      	ldrh	r2, [r4, #0]
 8005784:	9c04      	ldr	r4, [sp, #16]
 8005786:	4353      	muls	r3, r2
 8005788:	8832      	ldrh	r2, [r6, #0]
 800578a:	189b      	adds	r3, r3, r2
 800578c:	aa02      	add	r2, sp, #8
 800578e:	8a91      	ldrh	r1, [r2, #20]
 8005790:	22e1      	movs	r2, #225	; 0xe1
 8005792:	0112      	lsls	r2, r2, #4
 8005794:	434a      	muls	r2, r1
 8005796:	189b      	adds	r3, r3, r2
 8005798:	435c      	muls	r4, r3
 800579a:	e772      	b.n	8005682 <_tzset_unlocked_r+0x156>
 800579c:	2301      	movs	r3, #1
 800579e:	e776      	b.n	800568e <_tzset_unlocked_r+0x162>
 80057a0:	9b04      	ldr	r3, [sp, #16]
 80057a2:	2644      	movs	r6, #68	; 0x44
 80057a4:	2b4a      	cmp	r3, #74	; 0x4a
 80057a6:	d101      	bne.n	80057ac <_tzset_unlocked_r+0x280>
 80057a8:	001e      	movs	r6, r3
 80057aa:	3501      	adds	r5, #1
 80057ac:	220a      	movs	r2, #10
 80057ae:	0028      	movs	r0, r5
 80057b0:	a90b      	add	r1, sp, #44	; 0x2c
 80057b2:	f000 ff17 	bl	80065e4 <strtoul>
 80057b6:	231e      	movs	r3, #30
 80057b8:	aa02      	add	r2, sp, #8
 80057ba:	189b      	adds	r3, r3, r2
 80057bc:	8018      	strh	r0, [r3, #0]
 80057be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057c0:	9304      	str	r3, [sp, #16]
 80057c2:	42ab      	cmp	r3, r5
 80057c4:	d116      	bne.n	80057f4 <_tzset_unlocked_r+0x2c8>
 80057c6:	9b05      	ldr	r3, [sp, #20]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d108      	bne.n	80057de <_tzset_unlocked_r+0x2b2>
 80057cc:	334d      	adds	r3, #77	; 0x4d
 80057ce:	723b      	strb	r3, [r7, #8]
 80057d0:	3b4a      	subs	r3, #74	; 0x4a
 80057d2:	60fb      	str	r3, [r7, #12]
 80057d4:	3b01      	subs	r3, #1
 80057d6:	613b      	str	r3, [r7, #16]
 80057d8:	9b05      	ldr	r3, [sp, #20]
 80057da:	617b      	str	r3, [r7, #20]
 80057dc:	e790      	b.n	8005700 <_tzset_unlocked_r+0x1d4>
 80057de:	003b      	movs	r3, r7
 80057e0:	224d      	movs	r2, #77	; 0x4d
 80057e2:	3330      	adds	r3, #48	; 0x30
 80057e4:	701a      	strb	r2, [r3, #0]
 80057e6:	230b      	movs	r3, #11
 80057e8:	637b      	str	r3, [r7, #52]	; 0x34
 80057ea:	3b0a      	subs	r3, #10
 80057ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80057ee:	2300      	movs	r3, #0
 80057f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057f2:	e785      	b.n	8005700 <_tzset_unlocked_r+0x1d4>
 80057f4:	b280      	uxth	r0, r0
 80057f6:	7026      	strb	r6, [r4, #0]
 80057f8:	60e0      	str	r0, [r4, #12]
 80057fa:	e781      	b.n	8005700 <_tzset_unlocked_r+0x1d4>
 80057fc:	0800789d 	.word	0x0800789d
 8005800:	20000248 	.word	0x20000248
 8005804:	20000250 	.word	0x20000250
 8005808:	080078a0 	.word	0x080078a0
 800580c:	2000024c 	.word	0x2000024c
 8005810:	2000007c 	.word	0x2000007c
 8005814:	080078a4 	.word	0x080078a4
 8005818:	2000023b 	.word	0x2000023b
 800581c:	080078c7 	.word	0x080078c7
 8005820:	20000230 	.word	0x20000230
 8005824:	fffff1f0 	.word	0xfffff1f0
 8005828:	080078b3 	.word	0x080078b3
 800582c:	080078c6 	.word	0x080078c6

08005830 <__assert_func>:
 8005830:	b530      	push	{r4, r5, lr}
 8005832:	0014      	movs	r4, r2
 8005834:	001a      	movs	r2, r3
 8005836:	4b09      	ldr	r3, [pc, #36]	; (800585c <__assert_func+0x2c>)
 8005838:	0005      	movs	r5, r0
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	b085      	sub	sp, #20
 800583e:	68d8      	ldr	r0, [r3, #12]
 8005840:	4b07      	ldr	r3, [pc, #28]	; (8005860 <__assert_func+0x30>)
 8005842:	2c00      	cmp	r4, #0
 8005844:	d101      	bne.n	800584a <__assert_func+0x1a>
 8005846:	4b07      	ldr	r3, [pc, #28]	; (8005864 <__assert_func+0x34>)
 8005848:	001c      	movs	r4, r3
 800584a:	9301      	str	r3, [sp, #4]
 800584c:	9100      	str	r1, [sp, #0]
 800584e:	002b      	movs	r3, r5
 8005850:	4905      	ldr	r1, [pc, #20]	; (8005868 <__assert_func+0x38>)
 8005852:	9402      	str	r4, [sp, #8]
 8005854:	f000 f822 	bl	800589c <fiprintf>
 8005858:	f000 ffb2 	bl	80067c0 <abort>
 800585c:	20000018 	.word	0x20000018
 8005860:	080078d9 	.word	0x080078d9
 8005864:	08007914 	.word	0x08007914
 8005868:	080078e6 	.word	0x080078e6

0800586c <div>:
 800586c:	b570      	push	{r4, r5, r6, lr}
 800586e:	000e      	movs	r6, r1
 8005870:	0004      	movs	r4, r0
 8005872:	0011      	movs	r1, r2
 8005874:	0030      	movs	r0, r6
 8005876:	0015      	movs	r5, r2
 8005878:	f7fa fdd2 	bl	8000420 <__aeabi_idivmod>
 800587c:	2e00      	cmp	r6, #0
 800587e:	db07      	blt.n	8005890 <div+0x24>
 8005880:	2900      	cmp	r1, #0
 8005882:	da01      	bge.n	8005888 <div+0x1c>
 8005884:	3001      	adds	r0, #1
 8005886:	1b49      	subs	r1, r1, r5
 8005888:	6020      	str	r0, [r4, #0]
 800588a:	6061      	str	r1, [r4, #4]
 800588c:	0020      	movs	r0, r4
 800588e:	bd70      	pop	{r4, r5, r6, pc}
 8005890:	2900      	cmp	r1, #0
 8005892:	ddf9      	ble.n	8005888 <div+0x1c>
 8005894:	3801      	subs	r0, #1
 8005896:	1949      	adds	r1, r1, r5
 8005898:	e7f6      	b.n	8005888 <div+0x1c>
	...

0800589c <fiprintf>:
 800589c:	b40e      	push	{r1, r2, r3}
 800589e:	b503      	push	{r0, r1, lr}
 80058a0:	0001      	movs	r1, r0
 80058a2:	ab03      	add	r3, sp, #12
 80058a4:	4804      	ldr	r0, [pc, #16]	; (80058b8 <fiprintf+0x1c>)
 80058a6:	cb04      	ldmia	r3!, {r2}
 80058a8:	6800      	ldr	r0, [r0, #0]
 80058aa:	9301      	str	r3, [sp, #4]
 80058ac:	f000 fac0 	bl	8005e30 <_vfiprintf_r>
 80058b0:	b002      	add	sp, #8
 80058b2:	bc08      	pop	{r3}
 80058b4:	b003      	add	sp, #12
 80058b6:	4718      	bx	r3
 80058b8:	20000018 	.word	0x20000018

080058bc <_findenv_r>:
 80058bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058be:	000d      	movs	r5, r1
 80058c0:	b085      	sub	sp, #20
 80058c2:	0006      	movs	r6, r0
 80058c4:	9203      	str	r2, [sp, #12]
 80058c6:	f000 ff95 	bl	80067f4 <__env_lock>
 80058ca:	4f19      	ldr	r7, [pc, #100]	; (8005930 <_findenv_r+0x74>)
 80058cc:	002b      	movs	r3, r5
 80058ce:	683c      	ldr	r4, [r7, #0]
 80058d0:	2c00      	cmp	r4, #0
 80058d2:	d106      	bne.n	80058e2 <_findenv_r+0x26>
 80058d4:	0030      	movs	r0, r6
 80058d6:	f000 ff95 	bl	8006804 <__env_unlock>
 80058da:	2000      	movs	r0, #0
 80058dc:	b005      	add	sp, #20
 80058de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058e0:	3301      	adds	r3, #1
 80058e2:	781a      	ldrb	r2, [r3, #0]
 80058e4:	2a00      	cmp	r2, #0
 80058e6:	d01f      	beq.n	8005928 <_findenv_r+0x6c>
 80058e8:	2a3d      	cmp	r2, #61	; 0x3d
 80058ea:	d1f9      	bne.n	80058e0 <_findenv_r+0x24>
 80058ec:	e7f2      	b.n	80058d4 <_findenv_r+0x18>
 80058ee:	3404      	adds	r4, #4
 80058f0:	6820      	ldr	r0, [r4, #0]
 80058f2:	2800      	cmp	r0, #0
 80058f4:	d0ee      	beq.n	80058d4 <_findenv_r+0x18>
 80058f6:	0029      	movs	r1, r5
 80058f8:	9a01      	ldr	r2, [sp, #4]
 80058fa:	f000 fdd3 	bl	80064a4 <strncmp>
 80058fe:	2800      	cmp	r0, #0
 8005900:	d1f5      	bne.n	80058ee <_findenv_r+0x32>
 8005902:	6823      	ldr	r3, [r4, #0]
 8005904:	9a01      	ldr	r2, [sp, #4]
 8005906:	189a      	adds	r2, r3, r2
 8005908:	9202      	str	r2, [sp, #8]
 800590a:	9a01      	ldr	r2, [sp, #4]
 800590c:	5c9b      	ldrb	r3, [r3, r2]
 800590e:	2b3d      	cmp	r3, #61	; 0x3d
 8005910:	d1ed      	bne.n	80058ee <_findenv_r+0x32>
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	0030      	movs	r0, r6
 8005916:	1ae4      	subs	r4, r4, r3
 8005918:	9b03      	ldr	r3, [sp, #12]
 800591a:	10a4      	asrs	r4, r4, #2
 800591c:	601c      	str	r4, [r3, #0]
 800591e:	f000 ff71 	bl	8006804 <__env_unlock>
 8005922:	9802      	ldr	r0, [sp, #8]
 8005924:	3001      	adds	r0, #1
 8005926:	e7d9      	b.n	80058dc <_findenv_r+0x20>
 8005928:	1b5b      	subs	r3, r3, r5
 800592a:	9301      	str	r3, [sp, #4]
 800592c:	e7e0      	b.n	80058f0 <_findenv_r+0x34>
 800592e:	46c0      	nop			; (mov r8, r8)
 8005930:	20000008 	.word	0x20000008

08005934 <_getenv_r>:
 8005934:	b507      	push	{r0, r1, r2, lr}
 8005936:	aa01      	add	r2, sp, #4
 8005938:	f7ff ffc0 	bl	80058bc <_findenv_r>
 800593c:	bd0e      	pop	{r1, r2, r3, pc}
	...

08005940 <__gettzinfo>:
 8005940:	4800      	ldr	r0, [pc, #0]	; (8005944 <__gettzinfo+0x4>)
 8005942:	4770      	bx	lr
 8005944:	20000088 	.word	0x20000088

08005948 <gmtime_r>:
 8005948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800594a:	6806      	ldr	r6, [r0, #0]
 800594c:	6847      	ldr	r7, [r0, #4]
 800594e:	2300      	movs	r3, #0
 8005950:	0030      	movs	r0, r6
 8005952:	4a59      	ldr	r2, [pc, #356]	; (8005ab8 <gmtime_r+0x170>)
 8005954:	b085      	sub	sp, #20
 8005956:	000c      	movs	r4, r1
 8005958:	0039      	movs	r1, r7
 800595a:	f7fa fd67 	bl	800042c <__aeabi_ldivmod>
 800595e:	2300      	movs	r3, #0
 8005960:	0005      	movs	r5, r0
 8005962:	0039      	movs	r1, r7
 8005964:	0030      	movs	r0, r6
 8005966:	4a54      	ldr	r2, [pc, #336]	; (8005ab8 <gmtime_r+0x170>)
 8005968:	f7fa fd60 	bl	800042c <__aeabi_ldivmod>
 800596c:	1e16      	subs	r6, r2, #0
 800596e:	da00      	bge.n	8005972 <gmtime_r+0x2a>
 8005970:	e088      	b.n	8005a84 <gmtime_r+0x13c>
 8005972:	4b52      	ldr	r3, [pc, #328]	; (8005abc <gmtime_r+0x174>)
 8005974:	21e1      	movs	r1, #225	; 0xe1
 8005976:	0030      	movs	r0, r6
 8005978:	0109      	lsls	r1, r1, #4
 800597a:	18ed      	adds	r5, r5, r3
 800597c:	f7fa fc6a 	bl	8000254 <__divsi3>
 8005980:	21e1      	movs	r1, #225	; 0xe1
 8005982:	60a0      	str	r0, [r4, #8]
 8005984:	0109      	lsls	r1, r1, #4
 8005986:	0030      	movs	r0, r6
 8005988:	f7fa fd4a 	bl	8000420 <__aeabi_idivmod>
 800598c:	000e      	movs	r6, r1
 800598e:	213c      	movs	r1, #60	; 0x3c
 8005990:	0030      	movs	r0, r6
 8005992:	f7fa fc5f 	bl	8000254 <__divsi3>
 8005996:	213c      	movs	r1, #60	; 0x3c
 8005998:	6060      	str	r0, [r4, #4]
 800599a:	0030      	movs	r0, r6
 800599c:	f7fa fd40 	bl	8000420 <__aeabi_idivmod>
 80059a0:	1ce8      	adds	r0, r5, #3
 80059a2:	6021      	str	r1, [r4, #0]
 80059a4:	2107      	movs	r1, #7
 80059a6:	f7fa fd3b 	bl	8000420 <__aeabi_idivmod>
 80059aa:	2900      	cmp	r1, #0
 80059ac:	da00      	bge.n	80059b0 <gmtime_r+0x68>
 80059ae:	3107      	adds	r1, #7
 80059b0:	61a1      	str	r1, [r4, #24]
 80059b2:	1e28      	subs	r0, r5, #0
 80059b4:	4942      	ldr	r1, [pc, #264]	; (8005ac0 <gmtime_r+0x178>)
 80059b6:	da01      	bge.n	80059bc <gmtime_r+0x74>
 80059b8:	4b42      	ldr	r3, [pc, #264]	; (8005ac4 <gmtime_r+0x17c>)
 80059ba:	18e8      	adds	r0, r5, r3
 80059bc:	f7fa fc4a 	bl	8000254 <__divsi3>
 80059c0:	0007      	movs	r7, r0
 80059c2:	4841      	ldr	r0, [pc, #260]	; (8005ac8 <gmtime_r+0x180>)
 80059c4:	4941      	ldr	r1, [pc, #260]	; (8005acc <gmtime_r+0x184>)
 80059c6:	4378      	muls	r0, r7
 80059c8:	1945      	adds	r5, r0, r5
 80059ca:	0028      	movs	r0, r5
 80059cc:	f7fa fbb8 	bl	8000140 <__udivsi3>
 80059d0:	493f      	ldr	r1, [pc, #252]	; (8005ad0 <gmtime_r+0x188>)
 80059d2:	1946      	adds	r6, r0, r5
 80059d4:	0028      	movs	r0, r5
 80059d6:	f7fa fbb3 	bl	8000140 <__udivsi3>
 80059da:	493e      	ldr	r1, [pc, #248]	; (8005ad4 <gmtime_r+0x18c>)
 80059dc:	1a36      	subs	r6, r6, r0
 80059de:	0028      	movs	r0, r5
 80059e0:	f7fa fbae 	bl	8000140 <__udivsi3>
 80059e4:	216e      	movs	r1, #110	; 0x6e
 80059e6:	1a36      	subs	r6, r6, r0
 80059e8:	0030      	movs	r0, r6
 80059ea:	31ff      	adds	r1, #255	; 0xff
 80059ec:	f7fa fba8 	bl	8000140 <__udivsi3>
 80059f0:	2164      	movs	r1, #100	; 0x64
 80059f2:	9001      	str	r0, [sp, #4]
 80059f4:	f7fa fba4 	bl	8000140 <__udivsi3>
 80059f8:	4935      	ldr	r1, [pc, #212]	; (8005ad0 <gmtime_r+0x188>)
 80059fa:	9002      	str	r0, [sp, #8]
 80059fc:	0030      	movs	r0, r6
 80059fe:	f7fa fb9f 	bl	8000140 <__udivsi3>
 8005a02:	9b02      	ldr	r3, [sp, #8]
 8005a04:	2605      	movs	r6, #5
 8005a06:	1a18      	subs	r0, r3, r0
 8005a08:	1945      	adds	r5, r0, r5
 8005a0a:	206e      	movs	r0, #110	; 0x6e
 8005a0c:	9b01      	ldr	r3, [sp, #4]
 8005a0e:	30ff      	adds	r0, #255	; 0xff
 8005a10:	4358      	muls	r0, r3
 8005a12:	0033      	movs	r3, r6
 8005a14:	1a2d      	subs	r5, r5, r0
 8005a16:	436b      	muls	r3, r5
 8005a18:	3302      	adds	r3, #2
 8005a1a:	2199      	movs	r1, #153	; 0x99
 8005a1c:	0018      	movs	r0, r3
 8005a1e:	9302      	str	r3, [sp, #8]
 8005a20:	f7fa fb8e 	bl	8000140 <__udivsi3>
 8005a24:	9003      	str	r0, [sp, #12]
 8005a26:	2099      	movs	r0, #153	; 0x99
 8005a28:	9b03      	ldr	r3, [sp, #12]
 8005a2a:	0031      	movs	r1, r6
 8005a2c:	4358      	muls	r0, r3
 8005a2e:	3002      	adds	r0, #2
 8005a30:	f7fa fb86 	bl	8000140 <__udivsi3>
 8005a34:	1c6b      	adds	r3, r5, #1
 8005a36:	1a1b      	subs	r3, r3, r0
 8005a38:	469c      	mov	ip, r3
 8005a3a:	9a02      	ldr	r2, [sp, #8]
 8005a3c:	4b26      	ldr	r3, [pc, #152]	; (8005ad8 <gmtime_r+0x190>)
 8005a3e:	2102      	movs	r1, #2
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d900      	bls.n	8005a46 <gmtime_r+0xfe>
 8005a44:	390c      	subs	r1, #12
 8005a46:	20c8      	movs	r0, #200	; 0xc8
 8005a48:	0040      	lsls	r0, r0, #1
 8005a4a:	4347      	muls	r7, r0
 8005a4c:	9b03      	ldr	r3, [sp, #12]
 8005a4e:	2000      	movs	r0, #0
 8005a50:	18c9      	adds	r1, r1, r3
 8005a52:	9b01      	ldr	r3, [sp, #4]
 8005a54:	2299      	movs	r2, #153	; 0x99
 8005a56:	18ff      	adds	r7, r7, r3
 8005a58:	2301      	movs	r3, #1
 8005a5a:	428b      	cmp	r3, r1
 8005a5c:	4140      	adcs	r0, r0
 8005a5e:	0052      	lsls	r2, r2, #1
 8005a60:	183f      	adds	r7, r7, r0
 8005a62:	4295      	cmp	r5, r2
 8005a64:	d312      	bcc.n	8005a8c <gmtime_r+0x144>
 8005a66:	002b      	movs	r3, r5
 8005a68:	3b33      	subs	r3, #51	; 0x33
 8005a6a:	3bff      	subs	r3, #255	; 0xff
 8005a6c:	61e3      	str	r3, [r4, #28]
 8005a6e:	4b1b      	ldr	r3, [pc, #108]	; (8005adc <gmtime_r+0x194>)
 8005a70:	0020      	movs	r0, r4
 8005a72:	18ff      	adds	r7, r7, r3
 8005a74:	4663      	mov	r3, ip
 8005a76:	60e3      	str	r3, [r4, #12]
 8005a78:	2300      	movs	r3, #0
 8005a7a:	6167      	str	r7, [r4, #20]
 8005a7c:	6121      	str	r1, [r4, #16]
 8005a7e:	6223      	str	r3, [r4, #32]
 8005a80:	b005      	add	sp, #20
 8005a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a84:	4b0c      	ldr	r3, [pc, #48]	; (8005ab8 <gmtime_r+0x170>)
 8005a86:	18f6      	adds	r6, r6, r3
 8005a88:	4b15      	ldr	r3, [pc, #84]	; (8005ae0 <gmtime_r+0x198>)
 8005a8a:	e773      	b.n	8005974 <gmtime_r+0x2c>
 8005a8c:	9801      	ldr	r0, [sp, #4]
 8005a8e:	4a15      	ldr	r2, [pc, #84]	; (8005ae4 <gmtime_r+0x19c>)
 8005a90:	0780      	lsls	r0, r0, #30
 8005a92:	d106      	bne.n	8005aa2 <gmtime_r+0x15a>
 8005a94:	2002      	movs	r0, #2
 8005a96:	9e01      	ldr	r6, [sp, #4]
 8005a98:	4356      	muls	r6, r2
 8005a9a:	41c6      	rors	r6, r0
 8005a9c:	4812      	ldr	r0, [pc, #72]	; (8005ae8 <gmtime_r+0x1a0>)
 8005a9e:	4286      	cmp	r6, r0
 8005aa0:	d807      	bhi.n	8005ab2 <gmtime_r+0x16a>
 8005aa2:	9b01      	ldr	r3, [sp, #4]
 8005aa4:	4811      	ldr	r0, [pc, #68]	; (8005aec <gmtime_r+0x1a4>)
 8005aa6:	435a      	muls	r2, r3
 8005aa8:	2304      	movs	r3, #4
 8005aaa:	41da      	rors	r2, r3
 8005aac:	2300      	movs	r3, #0
 8005aae:	4290      	cmp	r0, r2
 8005ab0:	415b      	adcs	r3, r3
 8005ab2:	353b      	adds	r5, #59	; 0x3b
 8005ab4:	18eb      	adds	r3, r5, r3
 8005ab6:	e7d9      	b.n	8005a6c <gmtime_r+0x124>
 8005ab8:	00015180 	.word	0x00015180
 8005abc:	000afa6c 	.word	0x000afa6c
 8005ac0:	00023ab1 	.word	0x00023ab1
 8005ac4:	fffdc550 	.word	0xfffdc550
 8005ac8:	fffdc54f 	.word	0xfffdc54f
 8005acc:	00008eac 	.word	0x00008eac
 8005ad0:	000005b4 	.word	0x000005b4
 8005ad4:	00023ab0 	.word	0x00023ab0
 8005ad8:	000005f9 	.word	0x000005f9
 8005adc:	fffff894 	.word	0xfffff894
 8005ae0:	000afa6b 	.word	0x000afa6b
 8005ae4:	c28f5c29 	.word	0xc28f5c29
 8005ae8:	028f5c28 	.word	0x028f5c28
 8005aec:	00a3d70a 	.word	0x00a3d70a

08005af0 <__retarget_lock_init_recursive>:
 8005af0:	4770      	bx	lr

08005af2 <__retarget_lock_acquire>:
 8005af2:	4770      	bx	lr

08005af4 <__retarget_lock_acquire_recursive>:
 8005af4:	4770      	bx	lr

08005af6 <__retarget_lock_release>:
 8005af6:	4770      	bx	lr

08005af8 <__retarget_lock_release_recursive>:
 8005af8:	4770      	bx	lr
	...

08005afc <__malloc_lock>:
 8005afc:	b510      	push	{r4, lr}
 8005afe:	4802      	ldr	r0, [pc, #8]	; (8005b08 <__malloc_lock+0xc>)
 8005b00:	f7ff fff8 	bl	8005af4 <__retarget_lock_acquire_recursive>
 8005b04:	bd10      	pop	{r4, pc}
 8005b06:	46c0      	nop			; (mov r8, r8)
 8005b08:	20000255 	.word	0x20000255

08005b0c <__malloc_unlock>:
 8005b0c:	b510      	push	{r4, lr}
 8005b0e:	4802      	ldr	r0, [pc, #8]	; (8005b18 <__malloc_unlock+0xc>)
 8005b10:	f7ff fff2 	bl	8005af8 <__retarget_lock_release_recursive>
 8005b14:	bd10      	pop	{r4, pc}
 8005b16:	46c0      	nop			; (mov r8, r8)
 8005b18:	20000255 	.word	0x20000255

08005b1c <__ssputs_r>:
 8005b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b1e:	688e      	ldr	r6, [r1, #8]
 8005b20:	b085      	sub	sp, #20
 8005b22:	0007      	movs	r7, r0
 8005b24:	000c      	movs	r4, r1
 8005b26:	9203      	str	r2, [sp, #12]
 8005b28:	9301      	str	r3, [sp, #4]
 8005b2a:	429e      	cmp	r6, r3
 8005b2c:	d83c      	bhi.n	8005ba8 <__ssputs_r+0x8c>
 8005b2e:	2390      	movs	r3, #144	; 0x90
 8005b30:	898a      	ldrh	r2, [r1, #12]
 8005b32:	00db      	lsls	r3, r3, #3
 8005b34:	421a      	tst	r2, r3
 8005b36:	d034      	beq.n	8005ba2 <__ssputs_r+0x86>
 8005b38:	6909      	ldr	r1, [r1, #16]
 8005b3a:	6823      	ldr	r3, [r4, #0]
 8005b3c:	6960      	ldr	r0, [r4, #20]
 8005b3e:	1a5b      	subs	r3, r3, r1
 8005b40:	9302      	str	r3, [sp, #8]
 8005b42:	2303      	movs	r3, #3
 8005b44:	4343      	muls	r3, r0
 8005b46:	0fdd      	lsrs	r5, r3, #31
 8005b48:	18ed      	adds	r5, r5, r3
 8005b4a:	9b01      	ldr	r3, [sp, #4]
 8005b4c:	9802      	ldr	r0, [sp, #8]
 8005b4e:	3301      	adds	r3, #1
 8005b50:	181b      	adds	r3, r3, r0
 8005b52:	106d      	asrs	r5, r5, #1
 8005b54:	42ab      	cmp	r3, r5
 8005b56:	d900      	bls.n	8005b5a <__ssputs_r+0x3e>
 8005b58:	001d      	movs	r5, r3
 8005b5a:	0553      	lsls	r3, r2, #21
 8005b5c:	d532      	bpl.n	8005bc4 <__ssputs_r+0xa8>
 8005b5e:	0029      	movs	r1, r5
 8005b60:	0038      	movs	r0, r7
 8005b62:	f7ff fa59 	bl	8005018 <_malloc_r>
 8005b66:	1e06      	subs	r6, r0, #0
 8005b68:	d109      	bne.n	8005b7e <__ssputs_r+0x62>
 8005b6a:	230c      	movs	r3, #12
 8005b6c:	603b      	str	r3, [r7, #0]
 8005b6e:	2340      	movs	r3, #64	; 0x40
 8005b70:	2001      	movs	r0, #1
 8005b72:	89a2      	ldrh	r2, [r4, #12]
 8005b74:	4240      	negs	r0, r0
 8005b76:	4313      	orrs	r3, r2
 8005b78:	81a3      	strh	r3, [r4, #12]
 8005b7a:	b005      	add	sp, #20
 8005b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b7e:	9a02      	ldr	r2, [sp, #8]
 8005b80:	6921      	ldr	r1, [r4, #16]
 8005b82:	f7fe ff33 	bl	80049ec <memcpy>
 8005b86:	89a3      	ldrh	r3, [r4, #12]
 8005b88:	4a14      	ldr	r2, [pc, #80]	; (8005bdc <__ssputs_r+0xc0>)
 8005b8a:	401a      	ands	r2, r3
 8005b8c:	2380      	movs	r3, #128	; 0x80
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	81a3      	strh	r3, [r4, #12]
 8005b92:	9b02      	ldr	r3, [sp, #8]
 8005b94:	6126      	str	r6, [r4, #16]
 8005b96:	18f6      	adds	r6, r6, r3
 8005b98:	6026      	str	r6, [r4, #0]
 8005b9a:	6165      	str	r5, [r4, #20]
 8005b9c:	9e01      	ldr	r6, [sp, #4]
 8005b9e:	1aed      	subs	r5, r5, r3
 8005ba0:	60a5      	str	r5, [r4, #8]
 8005ba2:	9b01      	ldr	r3, [sp, #4]
 8005ba4:	429e      	cmp	r6, r3
 8005ba6:	d900      	bls.n	8005baa <__ssputs_r+0x8e>
 8005ba8:	9e01      	ldr	r6, [sp, #4]
 8005baa:	0032      	movs	r2, r6
 8005bac:	9903      	ldr	r1, [sp, #12]
 8005bae:	6820      	ldr	r0, [r4, #0]
 8005bb0:	f001 f889 	bl	8006cc6 <memmove>
 8005bb4:	68a3      	ldr	r3, [r4, #8]
 8005bb6:	2000      	movs	r0, #0
 8005bb8:	1b9b      	subs	r3, r3, r6
 8005bba:	60a3      	str	r3, [r4, #8]
 8005bbc:	6823      	ldr	r3, [r4, #0]
 8005bbe:	199e      	adds	r6, r3, r6
 8005bc0:	6026      	str	r6, [r4, #0]
 8005bc2:	e7da      	b.n	8005b7a <__ssputs_r+0x5e>
 8005bc4:	002a      	movs	r2, r5
 8005bc6:	0038      	movs	r0, r7
 8005bc8:	f001 f890 	bl	8006cec <_realloc_r>
 8005bcc:	1e06      	subs	r6, r0, #0
 8005bce:	d1e0      	bne.n	8005b92 <__ssputs_r+0x76>
 8005bd0:	0038      	movs	r0, r7
 8005bd2:	6921      	ldr	r1, [r4, #16]
 8005bd4:	f7ff f9b4 	bl	8004f40 <_free_r>
 8005bd8:	e7c7      	b.n	8005b6a <__ssputs_r+0x4e>
 8005bda:	46c0      	nop			; (mov r8, r8)
 8005bdc:	fffffb7f 	.word	0xfffffb7f

08005be0 <_svfiprintf_r>:
 8005be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005be2:	b0a1      	sub	sp, #132	; 0x84
 8005be4:	9003      	str	r0, [sp, #12]
 8005be6:	001d      	movs	r5, r3
 8005be8:	898b      	ldrh	r3, [r1, #12]
 8005bea:	000f      	movs	r7, r1
 8005bec:	0016      	movs	r6, r2
 8005bee:	061b      	lsls	r3, r3, #24
 8005bf0:	d511      	bpl.n	8005c16 <_svfiprintf_r+0x36>
 8005bf2:	690b      	ldr	r3, [r1, #16]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d10e      	bne.n	8005c16 <_svfiprintf_r+0x36>
 8005bf8:	2140      	movs	r1, #64	; 0x40
 8005bfa:	f7ff fa0d 	bl	8005018 <_malloc_r>
 8005bfe:	6038      	str	r0, [r7, #0]
 8005c00:	6138      	str	r0, [r7, #16]
 8005c02:	2800      	cmp	r0, #0
 8005c04:	d105      	bne.n	8005c12 <_svfiprintf_r+0x32>
 8005c06:	230c      	movs	r3, #12
 8005c08:	9a03      	ldr	r2, [sp, #12]
 8005c0a:	3801      	subs	r0, #1
 8005c0c:	6013      	str	r3, [r2, #0]
 8005c0e:	b021      	add	sp, #132	; 0x84
 8005c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c12:	2340      	movs	r3, #64	; 0x40
 8005c14:	617b      	str	r3, [r7, #20]
 8005c16:	2300      	movs	r3, #0
 8005c18:	ac08      	add	r4, sp, #32
 8005c1a:	6163      	str	r3, [r4, #20]
 8005c1c:	3320      	adds	r3, #32
 8005c1e:	7663      	strb	r3, [r4, #25]
 8005c20:	3310      	adds	r3, #16
 8005c22:	76a3      	strb	r3, [r4, #26]
 8005c24:	9507      	str	r5, [sp, #28]
 8005c26:	0035      	movs	r5, r6
 8005c28:	782b      	ldrb	r3, [r5, #0]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d001      	beq.n	8005c32 <_svfiprintf_r+0x52>
 8005c2e:	2b25      	cmp	r3, #37	; 0x25
 8005c30:	d147      	bne.n	8005cc2 <_svfiprintf_r+0xe2>
 8005c32:	1bab      	subs	r3, r5, r6
 8005c34:	9305      	str	r3, [sp, #20]
 8005c36:	42b5      	cmp	r5, r6
 8005c38:	d00c      	beq.n	8005c54 <_svfiprintf_r+0x74>
 8005c3a:	0032      	movs	r2, r6
 8005c3c:	0039      	movs	r1, r7
 8005c3e:	9803      	ldr	r0, [sp, #12]
 8005c40:	f7ff ff6c 	bl	8005b1c <__ssputs_r>
 8005c44:	1c43      	adds	r3, r0, #1
 8005c46:	d100      	bne.n	8005c4a <_svfiprintf_r+0x6a>
 8005c48:	e0ae      	b.n	8005da8 <_svfiprintf_r+0x1c8>
 8005c4a:	6962      	ldr	r2, [r4, #20]
 8005c4c:	9b05      	ldr	r3, [sp, #20]
 8005c4e:	4694      	mov	ip, r2
 8005c50:	4463      	add	r3, ip
 8005c52:	6163      	str	r3, [r4, #20]
 8005c54:	782b      	ldrb	r3, [r5, #0]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d100      	bne.n	8005c5c <_svfiprintf_r+0x7c>
 8005c5a:	e0a5      	b.n	8005da8 <_svfiprintf_r+0x1c8>
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	2300      	movs	r3, #0
 8005c60:	4252      	negs	r2, r2
 8005c62:	6062      	str	r2, [r4, #4]
 8005c64:	a904      	add	r1, sp, #16
 8005c66:	3254      	adds	r2, #84	; 0x54
 8005c68:	1852      	adds	r2, r2, r1
 8005c6a:	1c6e      	adds	r6, r5, #1
 8005c6c:	6023      	str	r3, [r4, #0]
 8005c6e:	60e3      	str	r3, [r4, #12]
 8005c70:	60a3      	str	r3, [r4, #8]
 8005c72:	7013      	strb	r3, [r2, #0]
 8005c74:	65a3      	str	r3, [r4, #88]	; 0x58
 8005c76:	2205      	movs	r2, #5
 8005c78:	7831      	ldrb	r1, [r6, #0]
 8005c7a:	4854      	ldr	r0, [pc, #336]	; (8005dcc <_svfiprintf_r+0x1ec>)
 8005c7c:	f001 f818 	bl	8006cb0 <memchr>
 8005c80:	1c75      	adds	r5, r6, #1
 8005c82:	2800      	cmp	r0, #0
 8005c84:	d11f      	bne.n	8005cc6 <_svfiprintf_r+0xe6>
 8005c86:	6822      	ldr	r2, [r4, #0]
 8005c88:	06d3      	lsls	r3, r2, #27
 8005c8a:	d504      	bpl.n	8005c96 <_svfiprintf_r+0xb6>
 8005c8c:	2353      	movs	r3, #83	; 0x53
 8005c8e:	a904      	add	r1, sp, #16
 8005c90:	185b      	adds	r3, r3, r1
 8005c92:	2120      	movs	r1, #32
 8005c94:	7019      	strb	r1, [r3, #0]
 8005c96:	0713      	lsls	r3, r2, #28
 8005c98:	d504      	bpl.n	8005ca4 <_svfiprintf_r+0xc4>
 8005c9a:	2353      	movs	r3, #83	; 0x53
 8005c9c:	a904      	add	r1, sp, #16
 8005c9e:	185b      	adds	r3, r3, r1
 8005ca0:	212b      	movs	r1, #43	; 0x2b
 8005ca2:	7019      	strb	r1, [r3, #0]
 8005ca4:	7833      	ldrb	r3, [r6, #0]
 8005ca6:	2b2a      	cmp	r3, #42	; 0x2a
 8005ca8:	d016      	beq.n	8005cd8 <_svfiprintf_r+0xf8>
 8005caa:	0035      	movs	r5, r6
 8005cac:	2100      	movs	r1, #0
 8005cae:	200a      	movs	r0, #10
 8005cb0:	68e3      	ldr	r3, [r4, #12]
 8005cb2:	782a      	ldrb	r2, [r5, #0]
 8005cb4:	1c6e      	adds	r6, r5, #1
 8005cb6:	3a30      	subs	r2, #48	; 0x30
 8005cb8:	2a09      	cmp	r2, #9
 8005cba:	d94e      	bls.n	8005d5a <_svfiprintf_r+0x17a>
 8005cbc:	2900      	cmp	r1, #0
 8005cbe:	d111      	bne.n	8005ce4 <_svfiprintf_r+0x104>
 8005cc0:	e017      	b.n	8005cf2 <_svfiprintf_r+0x112>
 8005cc2:	3501      	adds	r5, #1
 8005cc4:	e7b0      	b.n	8005c28 <_svfiprintf_r+0x48>
 8005cc6:	4b41      	ldr	r3, [pc, #260]	; (8005dcc <_svfiprintf_r+0x1ec>)
 8005cc8:	6822      	ldr	r2, [r4, #0]
 8005cca:	1ac0      	subs	r0, r0, r3
 8005ccc:	2301      	movs	r3, #1
 8005cce:	4083      	lsls	r3, r0
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	002e      	movs	r6, r5
 8005cd4:	6023      	str	r3, [r4, #0]
 8005cd6:	e7ce      	b.n	8005c76 <_svfiprintf_r+0x96>
 8005cd8:	9b07      	ldr	r3, [sp, #28]
 8005cda:	1d19      	adds	r1, r3, #4
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	9107      	str	r1, [sp, #28]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	db01      	blt.n	8005ce8 <_svfiprintf_r+0x108>
 8005ce4:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ce6:	e004      	b.n	8005cf2 <_svfiprintf_r+0x112>
 8005ce8:	425b      	negs	r3, r3
 8005cea:	60e3      	str	r3, [r4, #12]
 8005cec:	2302      	movs	r3, #2
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	6023      	str	r3, [r4, #0]
 8005cf2:	782b      	ldrb	r3, [r5, #0]
 8005cf4:	2b2e      	cmp	r3, #46	; 0x2e
 8005cf6:	d10a      	bne.n	8005d0e <_svfiprintf_r+0x12e>
 8005cf8:	786b      	ldrb	r3, [r5, #1]
 8005cfa:	2b2a      	cmp	r3, #42	; 0x2a
 8005cfc:	d135      	bne.n	8005d6a <_svfiprintf_r+0x18a>
 8005cfe:	9b07      	ldr	r3, [sp, #28]
 8005d00:	3502      	adds	r5, #2
 8005d02:	1d1a      	adds	r2, r3, #4
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	9207      	str	r2, [sp, #28]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	db2b      	blt.n	8005d64 <_svfiprintf_r+0x184>
 8005d0c:	9309      	str	r3, [sp, #36]	; 0x24
 8005d0e:	4e30      	ldr	r6, [pc, #192]	; (8005dd0 <_svfiprintf_r+0x1f0>)
 8005d10:	2203      	movs	r2, #3
 8005d12:	0030      	movs	r0, r6
 8005d14:	7829      	ldrb	r1, [r5, #0]
 8005d16:	f000 ffcb 	bl	8006cb0 <memchr>
 8005d1a:	2800      	cmp	r0, #0
 8005d1c:	d006      	beq.n	8005d2c <_svfiprintf_r+0x14c>
 8005d1e:	2340      	movs	r3, #64	; 0x40
 8005d20:	1b80      	subs	r0, r0, r6
 8005d22:	4083      	lsls	r3, r0
 8005d24:	6822      	ldr	r2, [r4, #0]
 8005d26:	3501      	adds	r5, #1
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	6023      	str	r3, [r4, #0]
 8005d2c:	7829      	ldrb	r1, [r5, #0]
 8005d2e:	2206      	movs	r2, #6
 8005d30:	4828      	ldr	r0, [pc, #160]	; (8005dd4 <_svfiprintf_r+0x1f4>)
 8005d32:	1c6e      	adds	r6, r5, #1
 8005d34:	7621      	strb	r1, [r4, #24]
 8005d36:	f000 ffbb 	bl	8006cb0 <memchr>
 8005d3a:	2800      	cmp	r0, #0
 8005d3c:	d03c      	beq.n	8005db8 <_svfiprintf_r+0x1d8>
 8005d3e:	4b26      	ldr	r3, [pc, #152]	; (8005dd8 <_svfiprintf_r+0x1f8>)
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d125      	bne.n	8005d90 <_svfiprintf_r+0x1b0>
 8005d44:	2207      	movs	r2, #7
 8005d46:	9b07      	ldr	r3, [sp, #28]
 8005d48:	3307      	adds	r3, #7
 8005d4a:	4393      	bics	r3, r2
 8005d4c:	3308      	adds	r3, #8
 8005d4e:	9307      	str	r3, [sp, #28]
 8005d50:	6963      	ldr	r3, [r4, #20]
 8005d52:	9a04      	ldr	r2, [sp, #16]
 8005d54:	189b      	adds	r3, r3, r2
 8005d56:	6163      	str	r3, [r4, #20]
 8005d58:	e765      	b.n	8005c26 <_svfiprintf_r+0x46>
 8005d5a:	4343      	muls	r3, r0
 8005d5c:	0035      	movs	r5, r6
 8005d5e:	2101      	movs	r1, #1
 8005d60:	189b      	adds	r3, r3, r2
 8005d62:	e7a6      	b.n	8005cb2 <_svfiprintf_r+0xd2>
 8005d64:	2301      	movs	r3, #1
 8005d66:	425b      	negs	r3, r3
 8005d68:	e7d0      	b.n	8005d0c <_svfiprintf_r+0x12c>
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	200a      	movs	r0, #10
 8005d6e:	001a      	movs	r2, r3
 8005d70:	3501      	adds	r5, #1
 8005d72:	6063      	str	r3, [r4, #4]
 8005d74:	7829      	ldrb	r1, [r5, #0]
 8005d76:	1c6e      	adds	r6, r5, #1
 8005d78:	3930      	subs	r1, #48	; 0x30
 8005d7a:	2909      	cmp	r1, #9
 8005d7c:	d903      	bls.n	8005d86 <_svfiprintf_r+0x1a6>
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d0c5      	beq.n	8005d0e <_svfiprintf_r+0x12e>
 8005d82:	9209      	str	r2, [sp, #36]	; 0x24
 8005d84:	e7c3      	b.n	8005d0e <_svfiprintf_r+0x12e>
 8005d86:	4342      	muls	r2, r0
 8005d88:	0035      	movs	r5, r6
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	1852      	adds	r2, r2, r1
 8005d8e:	e7f1      	b.n	8005d74 <_svfiprintf_r+0x194>
 8005d90:	ab07      	add	r3, sp, #28
 8005d92:	9300      	str	r3, [sp, #0]
 8005d94:	003a      	movs	r2, r7
 8005d96:	0021      	movs	r1, r4
 8005d98:	4b10      	ldr	r3, [pc, #64]	; (8005ddc <_svfiprintf_r+0x1fc>)
 8005d9a:	9803      	ldr	r0, [sp, #12]
 8005d9c:	e000      	b.n	8005da0 <_svfiprintf_r+0x1c0>
 8005d9e:	bf00      	nop
 8005da0:	9004      	str	r0, [sp, #16]
 8005da2:	9b04      	ldr	r3, [sp, #16]
 8005da4:	3301      	adds	r3, #1
 8005da6:	d1d3      	bne.n	8005d50 <_svfiprintf_r+0x170>
 8005da8:	89bb      	ldrh	r3, [r7, #12]
 8005daa:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005dac:	065b      	lsls	r3, r3, #25
 8005dae:	d400      	bmi.n	8005db2 <_svfiprintf_r+0x1d2>
 8005db0:	e72d      	b.n	8005c0e <_svfiprintf_r+0x2e>
 8005db2:	2001      	movs	r0, #1
 8005db4:	4240      	negs	r0, r0
 8005db6:	e72a      	b.n	8005c0e <_svfiprintf_r+0x2e>
 8005db8:	ab07      	add	r3, sp, #28
 8005dba:	9300      	str	r3, [sp, #0]
 8005dbc:	003a      	movs	r2, r7
 8005dbe:	0021      	movs	r1, r4
 8005dc0:	4b06      	ldr	r3, [pc, #24]	; (8005ddc <_svfiprintf_r+0x1fc>)
 8005dc2:	9803      	ldr	r0, [sp, #12]
 8005dc4:	f000 f9de 	bl	8006184 <_printf_i>
 8005dc8:	e7ea      	b.n	8005da0 <_svfiprintf_r+0x1c0>
 8005dca:	46c0      	nop			; (mov r8, r8)
 8005dcc:	08007a16 	.word	0x08007a16
 8005dd0:	08007a1c 	.word	0x08007a1c
 8005dd4:	08007a20 	.word	0x08007a20
 8005dd8:	00000000 	.word	0x00000000
 8005ddc:	08005b1d 	.word	0x08005b1d

08005de0 <__sfputc_r>:
 8005de0:	6893      	ldr	r3, [r2, #8]
 8005de2:	b510      	push	{r4, lr}
 8005de4:	3b01      	subs	r3, #1
 8005de6:	6093      	str	r3, [r2, #8]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	da04      	bge.n	8005df6 <__sfputc_r+0x16>
 8005dec:	6994      	ldr	r4, [r2, #24]
 8005dee:	42a3      	cmp	r3, r4
 8005df0:	db07      	blt.n	8005e02 <__sfputc_r+0x22>
 8005df2:	290a      	cmp	r1, #10
 8005df4:	d005      	beq.n	8005e02 <__sfputc_r+0x22>
 8005df6:	6813      	ldr	r3, [r2, #0]
 8005df8:	1c58      	adds	r0, r3, #1
 8005dfa:	6010      	str	r0, [r2, #0]
 8005dfc:	7019      	strb	r1, [r3, #0]
 8005dfe:	0008      	movs	r0, r1
 8005e00:	bd10      	pop	{r4, pc}
 8005e02:	f000 fbfb 	bl	80065fc <__swbuf_r>
 8005e06:	0001      	movs	r1, r0
 8005e08:	e7f9      	b.n	8005dfe <__sfputc_r+0x1e>

08005e0a <__sfputs_r>:
 8005e0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e0c:	0006      	movs	r6, r0
 8005e0e:	000f      	movs	r7, r1
 8005e10:	0014      	movs	r4, r2
 8005e12:	18d5      	adds	r5, r2, r3
 8005e14:	42ac      	cmp	r4, r5
 8005e16:	d101      	bne.n	8005e1c <__sfputs_r+0x12>
 8005e18:	2000      	movs	r0, #0
 8005e1a:	e007      	b.n	8005e2c <__sfputs_r+0x22>
 8005e1c:	7821      	ldrb	r1, [r4, #0]
 8005e1e:	003a      	movs	r2, r7
 8005e20:	0030      	movs	r0, r6
 8005e22:	f7ff ffdd 	bl	8005de0 <__sfputc_r>
 8005e26:	3401      	adds	r4, #1
 8005e28:	1c43      	adds	r3, r0, #1
 8005e2a:	d1f3      	bne.n	8005e14 <__sfputs_r+0xa>
 8005e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005e30 <_vfiprintf_r>:
 8005e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e32:	b0a1      	sub	sp, #132	; 0x84
 8005e34:	0006      	movs	r6, r0
 8005e36:	000c      	movs	r4, r1
 8005e38:	001f      	movs	r7, r3
 8005e3a:	9203      	str	r2, [sp, #12]
 8005e3c:	2800      	cmp	r0, #0
 8005e3e:	d004      	beq.n	8005e4a <_vfiprintf_r+0x1a>
 8005e40:	6983      	ldr	r3, [r0, #24]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d101      	bne.n	8005e4a <_vfiprintf_r+0x1a>
 8005e46:	f000 fe13 	bl	8006a70 <__sinit>
 8005e4a:	4b8e      	ldr	r3, [pc, #568]	; (8006084 <_vfiprintf_r+0x254>)
 8005e4c:	429c      	cmp	r4, r3
 8005e4e:	d11c      	bne.n	8005e8a <_vfiprintf_r+0x5a>
 8005e50:	6874      	ldr	r4, [r6, #4]
 8005e52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e54:	07db      	lsls	r3, r3, #31
 8005e56:	d405      	bmi.n	8005e64 <_vfiprintf_r+0x34>
 8005e58:	89a3      	ldrh	r3, [r4, #12]
 8005e5a:	059b      	lsls	r3, r3, #22
 8005e5c:	d402      	bmi.n	8005e64 <_vfiprintf_r+0x34>
 8005e5e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e60:	f7ff fe48 	bl	8005af4 <__retarget_lock_acquire_recursive>
 8005e64:	89a3      	ldrh	r3, [r4, #12]
 8005e66:	071b      	lsls	r3, r3, #28
 8005e68:	d502      	bpl.n	8005e70 <_vfiprintf_r+0x40>
 8005e6a:	6923      	ldr	r3, [r4, #16]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d11d      	bne.n	8005eac <_vfiprintf_r+0x7c>
 8005e70:	0021      	movs	r1, r4
 8005e72:	0030      	movs	r0, r6
 8005e74:	f000 fc2c 	bl	80066d0 <__swsetup_r>
 8005e78:	2800      	cmp	r0, #0
 8005e7a:	d017      	beq.n	8005eac <_vfiprintf_r+0x7c>
 8005e7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e7e:	07db      	lsls	r3, r3, #31
 8005e80:	d50d      	bpl.n	8005e9e <_vfiprintf_r+0x6e>
 8005e82:	2001      	movs	r0, #1
 8005e84:	4240      	negs	r0, r0
 8005e86:	b021      	add	sp, #132	; 0x84
 8005e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e8a:	4b7f      	ldr	r3, [pc, #508]	; (8006088 <_vfiprintf_r+0x258>)
 8005e8c:	429c      	cmp	r4, r3
 8005e8e:	d101      	bne.n	8005e94 <_vfiprintf_r+0x64>
 8005e90:	68b4      	ldr	r4, [r6, #8]
 8005e92:	e7de      	b.n	8005e52 <_vfiprintf_r+0x22>
 8005e94:	4b7d      	ldr	r3, [pc, #500]	; (800608c <_vfiprintf_r+0x25c>)
 8005e96:	429c      	cmp	r4, r3
 8005e98:	d1db      	bne.n	8005e52 <_vfiprintf_r+0x22>
 8005e9a:	68f4      	ldr	r4, [r6, #12]
 8005e9c:	e7d9      	b.n	8005e52 <_vfiprintf_r+0x22>
 8005e9e:	89a3      	ldrh	r3, [r4, #12]
 8005ea0:	059b      	lsls	r3, r3, #22
 8005ea2:	d4ee      	bmi.n	8005e82 <_vfiprintf_r+0x52>
 8005ea4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ea6:	f7ff fe27 	bl	8005af8 <__retarget_lock_release_recursive>
 8005eaa:	e7ea      	b.n	8005e82 <_vfiprintf_r+0x52>
 8005eac:	2300      	movs	r3, #0
 8005eae:	ad08      	add	r5, sp, #32
 8005eb0:	616b      	str	r3, [r5, #20]
 8005eb2:	3320      	adds	r3, #32
 8005eb4:	766b      	strb	r3, [r5, #25]
 8005eb6:	3310      	adds	r3, #16
 8005eb8:	76ab      	strb	r3, [r5, #26]
 8005eba:	9707      	str	r7, [sp, #28]
 8005ebc:	9f03      	ldr	r7, [sp, #12]
 8005ebe:	783b      	ldrb	r3, [r7, #0]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d001      	beq.n	8005ec8 <_vfiprintf_r+0x98>
 8005ec4:	2b25      	cmp	r3, #37	; 0x25
 8005ec6:	d14e      	bne.n	8005f66 <_vfiprintf_r+0x136>
 8005ec8:	9b03      	ldr	r3, [sp, #12]
 8005eca:	1afb      	subs	r3, r7, r3
 8005ecc:	9305      	str	r3, [sp, #20]
 8005ece:	9b03      	ldr	r3, [sp, #12]
 8005ed0:	429f      	cmp	r7, r3
 8005ed2:	d00d      	beq.n	8005ef0 <_vfiprintf_r+0xc0>
 8005ed4:	9b05      	ldr	r3, [sp, #20]
 8005ed6:	0021      	movs	r1, r4
 8005ed8:	0030      	movs	r0, r6
 8005eda:	9a03      	ldr	r2, [sp, #12]
 8005edc:	f7ff ff95 	bl	8005e0a <__sfputs_r>
 8005ee0:	1c43      	adds	r3, r0, #1
 8005ee2:	d100      	bne.n	8005ee6 <_vfiprintf_r+0xb6>
 8005ee4:	e0b5      	b.n	8006052 <_vfiprintf_r+0x222>
 8005ee6:	696a      	ldr	r2, [r5, #20]
 8005ee8:	9b05      	ldr	r3, [sp, #20]
 8005eea:	4694      	mov	ip, r2
 8005eec:	4463      	add	r3, ip
 8005eee:	616b      	str	r3, [r5, #20]
 8005ef0:	783b      	ldrb	r3, [r7, #0]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d100      	bne.n	8005ef8 <_vfiprintf_r+0xc8>
 8005ef6:	e0ac      	b.n	8006052 <_vfiprintf_r+0x222>
 8005ef8:	2201      	movs	r2, #1
 8005efa:	1c7b      	adds	r3, r7, #1
 8005efc:	9303      	str	r3, [sp, #12]
 8005efe:	2300      	movs	r3, #0
 8005f00:	4252      	negs	r2, r2
 8005f02:	606a      	str	r2, [r5, #4]
 8005f04:	a904      	add	r1, sp, #16
 8005f06:	3254      	adds	r2, #84	; 0x54
 8005f08:	1852      	adds	r2, r2, r1
 8005f0a:	602b      	str	r3, [r5, #0]
 8005f0c:	60eb      	str	r3, [r5, #12]
 8005f0e:	60ab      	str	r3, [r5, #8]
 8005f10:	7013      	strb	r3, [r2, #0]
 8005f12:	65ab      	str	r3, [r5, #88]	; 0x58
 8005f14:	9b03      	ldr	r3, [sp, #12]
 8005f16:	2205      	movs	r2, #5
 8005f18:	7819      	ldrb	r1, [r3, #0]
 8005f1a:	485d      	ldr	r0, [pc, #372]	; (8006090 <_vfiprintf_r+0x260>)
 8005f1c:	f000 fec8 	bl	8006cb0 <memchr>
 8005f20:	9b03      	ldr	r3, [sp, #12]
 8005f22:	1c5f      	adds	r7, r3, #1
 8005f24:	2800      	cmp	r0, #0
 8005f26:	d120      	bne.n	8005f6a <_vfiprintf_r+0x13a>
 8005f28:	682a      	ldr	r2, [r5, #0]
 8005f2a:	06d3      	lsls	r3, r2, #27
 8005f2c:	d504      	bpl.n	8005f38 <_vfiprintf_r+0x108>
 8005f2e:	2353      	movs	r3, #83	; 0x53
 8005f30:	a904      	add	r1, sp, #16
 8005f32:	185b      	adds	r3, r3, r1
 8005f34:	2120      	movs	r1, #32
 8005f36:	7019      	strb	r1, [r3, #0]
 8005f38:	0713      	lsls	r3, r2, #28
 8005f3a:	d504      	bpl.n	8005f46 <_vfiprintf_r+0x116>
 8005f3c:	2353      	movs	r3, #83	; 0x53
 8005f3e:	a904      	add	r1, sp, #16
 8005f40:	185b      	adds	r3, r3, r1
 8005f42:	212b      	movs	r1, #43	; 0x2b
 8005f44:	7019      	strb	r1, [r3, #0]
 8005f46:	9b03      	ldr	r3, [sp, #12]
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	2b2a      	cmp	r3, #42	; 0x2a
 8005f4c:	d016      	beq.n	8005f7c <_vfiprintf_r+0x14c>
 8005f4e:	2100      	movs	r1, #0
 8005f50:	68eb      	ldr	r3, [r5, #12]
 8005f52:	9f03      	ldr	r7, [sp, #12]
 8005f54:	783a      	ldrb	r2, [r7, #0]
 8005f56:	1c78      	adds	r0, r7, #1
 8005f58:	3a30      	subs	r2, #48	; 0x30
 8005f5a:	4684      	mov	ip, r0
 8005f5c:	2a09      	cmp	r2, #9
 8005f5e:	d94f      	bls.n	8006000 <_vfiprintf_r+0x1d0>
 8005f60:	2900      	cmp	r1, #0
 8005f62:	d111      	bne.n	8005f88 <_vfiprintf_r+0x158>
 8005f64:	e017      	b.n	8005f96 <_vfiprintf_r+0x166>
 8005f66:	3701      	adds	r7, #1
 8005f68:	e7a9      	b.n	8005ebe <_vfiprintf_r+0x8e>
 8005f6a:	4b49      	ldr	r3, [pc, #292]	; (8006090 <_vfiprintf_r+0x260>)
 8005f6c:	682a      	ldr	r2, [r5, #0]
 8005f6e:	1ac0      	subs	r0, r0, r3
 8005f70:	2301      	movs	r3, #1
 8005f72:	4083      	lsls	r3, r0
 8005f74:	4313      	orrs	r3, r2
 8005f76:	602b      	str	r3, [r5, #0]
 8005f78:	9703      	str	r7, [sp, #12]
 8005f7a:	e7cb      	b.n	8005f14 <_vfiprintf_r+0xe4>
 8005f7c:	9b07      	ldr	r3, [sp, #28]
 8005f7e:	1d19      	adds	r1, r3, #4
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	9107      	str	r1, [sp, #28]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	db01      	blt.n	8005f8c <_vfiprintf_r+0x15c>
 8005f88:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f8a:	e004      	b.n	8005f96 <_vfiprintf_r+0x166>
 8005f8c:	425b      	negs	r3, r3
 8005f8e:	60eb      	str	r3, [r5, #12]
 8005f90:	2302      	movs	r3, #2
 8005f92:	4313      	orrs	r3, r2
 8005f94:	602b      	str	r3, [r5, #0]
 8005f96:	783b      	ldrb	r3, [r7, #0]
 8005f98:	2b2e      	cmp	r3, #46	; 0x2e
 8005f9a:	d10a      	bne.n	8005fb2 <_vfiprintf_r+0x182>
 8005f9c:	787b      	ldrb	r3, [r7, #1]
 8005f9e:	2b2a      	cmp	r3, #42	; 0x2a
 8005fa0:	d137      	bne.n	8006012 <_vfiprintf_r+0x1e2>
 8005fa2:	9b07      	ldr	r3, [sp, #28]
 8005fa4:	3702      	adds	r7, #2
 8005fa6:	1d1a      	adds	r2, r3, #4
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	9207      	str	r2, [sp, #28]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	db2d      	blt.n	800600c <_vfiprintf_r+0x1dc>
 8005fb0:	9309      	str	r3, [sp, #36]	; 0x24
 8005fb2:	2203      	movs	r2, #3
 8005fb4:	7839      	ldrb	r1, [r7, #0]
 8005fb6:	4837      	ldr	r0, [pc, #220]	; (8006094 <_vfiprintf_r+0x264>)
 8005fb8:	f000 fe7a 	bl	8006cb0 <memchr>
 8005fbc:	2800      	cmp	r0, #0
 8005fbe:	d007      	beq.n	8005fd0 <_vfiprintf_r+0x1a0>
 8005fc0:	4b34      	ldr	r3, [pc, #208]	; (8006094 <_vfiprintf_r+0x264>)
 8005fc2:	682a      	ldr	r2, [r5, #0]
 8005fc4:	1ac0      	subs	r0, r0, r3
 8005fc6:	2340      	movs	r3, #64	; 0x40
 8005fc8:	4083      	lsls	r3, r0
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	3701      	adds	r7, #1
 8005fce:	602b      	str	r3, [r5, #0]
 8005fd0:	7839      	ldrb	r1, [r7, #0]
 8005fd2:	1c7b      	adds	r3, r7, #1
 8005fd4:	2206      	movs	r2, #6
 8005fd6:	4830      	ldr	r0, [pc, #192]	; (8006098 <_vfiprintf_r+0x268>)
 8005fd8:	9303      	str	r3, [sp, #12]
 8005fda:	7629      	strb	r1, [r5, #24]
 8005fdc:	f000 fe68 	bl	8006cb0 <memchr>
 8005fe0:	2800      	cmp	r0, #0
 8005fe2:	d045      	beq.n	8006070 <_vfiprintf_r+0x240>
 8005fe4:	4b2d      	ldr	r3, [pc, #180]	; (800609c <_vfiprintf_r+0x26c>)
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d127      	bne.n	800603a <_vfiprintf_r+0x20a>
 8005fea:	2207      	movs	r2, #7
 8005fec:	9b07      	ldr	r3, [sp, #28]
 8005fee:	3307      	adds	r3, #7
 8005ff0:	4393      	bics	r3, r2
 8005ff2:	3308      	adds	r3, #8
 8005ff4:	9307      	str	r3, [sp, #28]
 8005ff6:	696b      	ldr	r3, [r5, #20]
 8005ff8:	9a04      	ldr	r2, [sp, #16]
 8005ffa:	189b      	adds	r3, r3, r2
 8005ffc:	616b      	str	r3, [r5, #20]
 8005ffe:	e75d      	b.n	8005ebc <_vfiprintf_r+0x8c>
 8006000:	210a      	movs	r1, #10
 8006002:	434b      	muls	r3, r1
 8006004:	4667      	mov	r7, ip
 8006006:	189b      	adds	r3, r3, r2
 8006008:	3909      	subs	r1, #9
 800600a:	e7a3      	b.n	8005f54 <_vfiprintf_r+0x124>
 800600c:	2301      	movs	r3, #1
 800600e:	425b      	negs	r3, r3
 8006010:	e7ce      	b.n	8005fb0 <_vfiprintf_r+0x180>
 8006012:	2300      	movs	r3, #0
 8006014:	001a      	movs	r2, r3
 8006016:	3701      	adds	r7, #1
 8006018:	606b      	str	r3, [r5, #4]
 800601a:	7839      	ldrb	r1, [r7, #0]
 800601c:	1c78      	adds	r0, r7, #1
 800601e:	3930      	subs	r1, #48	; 0x30
 8006020:	4684      	mov	ip, r0
 8006022:	2909      	cmp	r1, #9
 8006024:	d903      	bls.n	800602e <_vfiprintf_r+0x1fe>
 8006026:	2b00      	cmp	r3, #0
 8006028:	d0c3      	beq.n	8005fb2 <_vfiprintf_r+0x182>
 800602a:	9209      	str	r2, [sp, #36]	; 0x24
 800602c:	e7c1      	b.n	8005fb2 <_vfiprintf_r+0x182>
 800602e:	230a      	movs	r3, #10
 8006030:	435a      	muls	r2, r3
 8006032:	4667      	mov	r7, ip
 8006034:	1852      	adds	r2, r2, r1
 8006036:	3b09      	subs	r3, #9
 8006038:	e7ef      	b.n	800601a <_vfiprintf_r+0x1ea>
 800603a:	ab07      	add	r3, sp, #28
 800603c:	9300      	str	r3, [sp, #0]
 800603e:	0022      	movs	r2, r4
 8006040:	0029      	movs	r1, r5
 8006042:	0030      	movs	r0, r6
 8006044:	4b16      	ldr	r3, [pc, #88]	; (80060a0 <_vfiprintf_r+0x270>)
 8006046:	e000      	b.n	800604a <_vfiprintf_r+0x21a>
 8006048:	bf00      	nop
 800604a:	9004      	str	r0, [sp, #16]
 800604c:	9b04      	ldr	r3, [sp, #16]
 800604e:	3301      	adds	r3, #1
 8006050:	d1d1      	bne.n	8005ff6 <_vfiprintf_r+0x1c6>
 8006052:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006054:	07db      	lsls	r3, r3, #31
 8006056:	d405      	bmi.n	8006064 <_vfiprintf_r+0x234>
 8006058:	89a3      	ldrh	r3, [r4, #12]
 800605a:	059b      	lsls	r3, r3, #22
 800605c:	d402      	bmi.n	8006064 <_vfiprintf_r+0x234>
 800605e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006060:	f7ff fd4a 	bl	8005af8 <__retarget_lock_release_recursive>
 8006064:	89a3      	ldrh	r3, [r4, #12]
 8006066:	065b      	lsls	r3, r3, #25
 8006068:	d500      	bpl.n	800606c <_vfiprintf_r+0x23c>
 800606a:	e70a      	b.n	8005e82 <_vfiprintf_r+0x52>
 800606c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800606e:	e70a      	b.n	8005e86 <_vfiprintf_r+0x56>
 8006070:	ab07      	add	r3, sp, #28
 8006072:	9300      	str	r3, [sp, #0]
 8006074:	0022      	movs	r2, r4
 8006076:	0029      	movs	r1, r5
 8006078:	0030      	movs	r0, r6
 800607a:	4b09      	ldr	r3, [pc, #36]	; (80060a0 <_vfiprintf_r+0x270>)
 800607c:	f000 f882 	bl	8006184 <_printf_i>
 8006080:	e7e3      	b.n	800604a <_vfiprintf_r+0x21a>
 8006082:	46c0      	nop			; (mov r8, r8)
 8006084:	08007a6c 	.word	0x08007a6c
 8006088:	08007a8c 	.word	0x08007a8c
 800608c:	08007a4c 	.word	0x08007a4c
 8006090:	08007a16 	.word	0x08007a16
 8006094:	08007a1c 	.word	0x08007a1c
 8006098:	08007a20 	.word	0x08007a20
 800609c:	00000000 	.word	0x00000000
 80060a0:	08005e0b 	.word	0x08005e0b

080060a4 <_printf_common>:
 80060a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060a6:	0015      	movs	r5, r2
 80060a8:	9301      	str	r3, [sp, #4]
 80060aa:	688a      	ldr	r2, [r1, #8]
 80060ac:	690b      	ldr	r3, [r1, #16]
 80060ae:	000c      	movs	r4, r1
 80060b0:	9000      	str	r0, [sp, #0]
 80060b2:	4293      	cmp	r3, r2
 80060b4:	da00      	bge.n	80060b8 <_printf_common+0x14>
 80060b6:	0013      	movs	r3, r2
 80060b8:	0022      	movs	r2, r4
 80060ba:	602b      	str	r3, [r5, #0]
 80060bc:	3243      	adds	r2, #67	; 0x43
 80060be:	7812      	ldrb	r2, [r2, #0]
 80060c0:	2a00      	cmp	r2, #0
 80060c2:	d001      	beq.n	80060c8 <_printf_common+0x24>
 80060c4:	3301      	adds	r3, #1
 80060c6:	602b      	str	r3, [r5, #0]
 80060c8:	6823      	ldr	r3, [r4, #0]
 80060ca:	069b      	lsls	r3, r3, #26
 80060cc:	d502      	bpl.n	80060d4 <_printf_common+0x30>
 80060ce:	682b      	ldr	r3, [r5, #0]
 80060d0:	3302      	adds	r3, #2
 80060d2:	602b      	str	r3, [r5, #0]
 80060d4:	6822      	ldr	r2, [r4, #0]
 80060d6:	2306      	movs	r3, #6
 80060d8:	0017      	movs	r7, r2
 80060da:	401f      	ands	r7, r3
 80060dc:	421a      	tst	r2, r3
 80060de:	d027      	beq.n	8006130 <_printf_common+0x8c>
 80060e0:	0023      	movs	r3, r4
 80060e2:	3343      	adds	r3, #67	; 0x43
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	1e5a      	subs	r2, r3, #1
 80060e8:	4193      	sbcs	r3, r2
 80060ea:	6822      	ldr	r2, [r4, #0]
 80060ec:	0692      	lsls	r2, r2, #26
 80060ee:	d430      	bmi.n	8006152 <_printf_common+0xae>
 80060f0:	0022      	movs	r2, r4
 80060f2:	9901      	ldr	r1, [sp, #4]
 80060f4:	9800      	ldr	r0, [sp, #0]
 80060f6:	9e08      	ldr	r6, [sp, #32]
 80060f8:	3243      	adds	r2, #67	; 0x43
 80060fa:	47b0      	blx	r6
 80060fc:	1c43      	adds	r3, r0, #1
 80060fe:	d025      	beq.n	800614c <_printf_common+0xa8>
 8006100:	2306      	movs	r3, #6
 8006102:	6820      	ldr	r0, [r4, #0]
 8006104:	682a      	ldr	r2, [r5, #0]
 8006106:	68e1      	ldr	r1, [r4, #12]
 8006108:	2500      	movs	r5, #0
 800610a:	4003      	ands	r3, r0
 800610c:	2b04      	cmp	r3, #4
 800610e:	d103      	bne.n	8006118 <_printf_common+0x74>
 8006110:	1a8d      	subs	r5, r1, r2
 8006112:	43eb      	mvns	r3, r5
 8006114:	17db      	asrs	r3, r3, #31
 8006116:	401d      	ands	r5, r3
 8006118:	68a3      	ldr	r3, [r4, #8]
 800611a:	6922      	ldr	r2, [r4, #16]
 800611c:	4293      	cmp	r3, r2
 800611e:	dd01      	ble.n	8006124 <_printf_common+0x80>
 8006120:	1a9b      	subs	r3, r3, r2
 8006122:	18ed      	adds	r5, r5, r3
 8006124:	2700      	movs	r7, #0
 8006126:	42bd      	cmp	r5, r7
 8006128:	d120      	bne.n	800616c <_printf_common+0xc8>
 800612a:	2000      	movs	r0, #0
 800612c:	e010      	b.n	8006150 <_printf_common+0xac>
 800612e:	3701      	adds	r7, #1
 8006130:	68e3      	ldr	r3, [r4, #12]
 8006132:	682a      	ldr	r2, [r5, #0]
 8006134:	1a9b      	subs	r3, r3, r2
 8006136:	42bb      	cmp	r3, r7
 8006138:	ddd2      	ble.n	80060e0 <_printf_common+0x3c>
 800613a:	0022      	movs	r2, r4
 800613c:	2301      	movs	r3, #1
 800613e:	9901      	ldr	r1, [sp, #4]
 8006140:	9800      	ldr	r0, [sp, #0]
 8006142:	9e08      	ldr	r6, [sp, #32]
 8006144:	3219      	adds	r2, #25
 8006146:	47b0      	blx	r6
 8006148:	1c43      	adds	r3, r0, #1
 800614a:	d1f0      	bne.n	800612e <_printf_common+0x8a>
 800614c:	2001      	movs	r0, #1
 800614e:	4240      	negs	r0, r0
 8006150:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006152:	2030      	movs	r0, #48	; 0x30
 8006154:	18e1      	adds	r1, r4, r3
 8006156:	3143      	adds	r1, #67	; 0x43
 8006158:	7008      	strb	r0, [r1, #0]
 800615a:	0021      	movs	r1, r4
 800615c:	1c5a      	adds	r2, r3, #1
 800615e:	3145      	adds	r1, #69	; 0x45
 8006160:	7809      	ldrb	r1, [r1, #0]
 8006162:	18a2      	adds	r2, r4, r2
 8006164:	3243      	adds	r2, #67	; 0x43
 8006166:	3302      	adds	r3, #2
 8006168:	7011      	strb	r1, [r2, #0]
 800616a:	e7c1      	b.n	80060f0 <_printf_common+0x4c>
 800616c:	0022      	movs	r2, r4
 800616e:	2301      	movs	r3, #1
 8006170:	9901      	ldr	r1, [sp, #4]
 8006172:	9800      	ldr	r0, [sp, #0]
 8006174:	9e08      	ldr	r6, [sp, #32]
 8006176:	321a      	adds	r2, #26
 8006178:	47b0      	blx	r6
 800617a:	1c43      	adds	r3, r0, #1
 800617c:	d0e6      	beq.n	800614c <_printf_common+0xa8>
 800617e:	3701      	adds	r7, #1
 8006180:	e7d1      	b.n	8006126 <_printf_common+0x82>
	...

08006184 <_printf_i>:
 8006184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006186:	b08b      	sub	sp, #44	; 0x2c
 8006188:	9206      	str	r2, [sp, #24]
 800618a:	000a      	movs	r2, r1
 800618c:	3243      	adds	r2, #67	; 0x43
 800618e:	9307      	str	r3, [sp, #28]
 8006190:	9005      	str	r0, [sp, #20]
 8006192:	9204      	str	r2, [sp, #16]
 8006194:	7e0a      	ldrb	r2, [r1, #24]
 8006196:	000c      	movs	r4, r1
 8006198:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800619a:	2a78      	cmp	r2, #120	; 0x78
 800619c:	d807      	bhi.n	80061ae <_printf_i+0x2a>
 800619e:	2a62      	cmp	r2, #98	; 0x62
 80061a0:	d809      	bhi.n	80061b6 <_printf_i+0x32>
 80061a2:	2a00      	cmp	r2, #0
 80061a4:	d100      	bne.n	80061a8 <_printf_i+0x24>
 80061a6:	e0c1      	b.n	800632c <_printf_i+0x1a8>
 80061a8:	2a58      	cmp	r2, #88	; 0x58
 80061aa:	d100      	bne.n	80061ae <_printf_i+0x2a>
 80061ac:	e08c      	b.n	80062c8 <_printf_i+0x144>
 80061ae:	0026      	movs	r6, r4
 80061b0:	3642      	adds	r6, #66	; 0x42
 80061b2:	7032      	strb	r2, [r6, #0]
 80061b4:	e022      	b.n	80061fc <_printf_i+0x78>
 80061b6:	0010      	movs	r0, r2
 80061b8:	3863      	subs	r0, #99	; 0x63
 80061ba:	2815      	cmp	r0, #21
 80061bc:	d8f7      	bhi.n	80061ae <_printf_i+0x2a>
 80061be:	f7f9 ffb5 	bl	800012c <__gnu_thumb1_case_shi>
 80061c2:	0016      	.short	0x0016
 80061c4:	fff6001f 	.word	0xfff6001f
 80061c8:	fff6fff6 	.word	0xfff6fff6
 80061cc:	001ffff6 	.word	0x001ffff6
 80061d0:	fff6fff6 	.word	0xfff6fff6
 80061d4:	fff6fff6 	.word	0xfff6fff6
 80061d8:	003600a8 	.word	0x003600a8
 80061dc:	fff6009a 	.word	0xfff6009a
 80061e0:	00b9fff6 	.word	0x00b9fff6
 80061e4:	0036fff6 	.word	0x0036fff6
 80061e8:	fff6fff6 	.word	0xfff6fff6
 80061ec:	009e      	.short	0x009e
 80061ee:	0026      	movs	r6, r4
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	3642      	adds	r6, #66	; 0x42
 80061f4:	1d11      	adds	r1, r2, #4
 80061f6:	6019      	str	r1, [r3, #0]
 80061f8:	6813      	ldr	r3, [r2, #0]
 80061fa:	7033      	strb	r3, [r6, #0]
 80061fc:	2301      	movs	r3, #1
 80061fe:	e0a7      	b.n	8006350 <_printf_i+0x1cc>
 8006200:	6808      	ldr	r0, [r1, #0]
 8006202:	6819      	ldr	r1, [r3, #0]
 8006204:	1d0a      	adds	r2, r1, #4
 8006206:	0605      	lsls	r5, r0, #24
 8006208:	d50b      	bpl.n	8006222 <_printf_i+0x9e>
 800620a:	680d      	ldr	r5, [r1, #0]
 800620c:	601a      	str	r2, [r3, #0]
 800620e:	2d00      	cmp	r5, #0
 8006210:	da03      	bge.n	800621a <_printf_i+0x96>
 8006212:	232d      	movs	r3, #45	; 0x2d
 8006214:	9a04      	ldr	r2, [sp, #16]
 8006216:	426d      	negs	r5, r5
 8006218:	7013      	strb	r3, [r2, #0]
 800621a:	4b61      	ldr	r3, [pc, #388]	; (80063a0 <_printf_i+0x21c>)
 800621c:	270a      	movs	r7, #10
 800621e:	9303      	str	r3, [sp, #12]
 8006220:	e01b      	b.n	800625a <_printf_i+0xd6>
 8006222:	680d      	ldr	r5, [r1, #0]
 8006224:	601a      	str	r2, [r3, #0]
 8006226:	0641      	lsls	r1, r0, #25
 8006228:	d5f1      	bpl.n	800620e <_printf_i+0x8a>
 800622a:	b22d      	sxth	r5, r5
 800622c:	e7ef      	b.n	800620e <_printf_i+0x8a>
 800622e:	680d      	ldr	r5, [r1, #0]
 8006230:	6819      	ldr	r1, [r3, #0]
 8006232:	1d08      	adds	r0, r1, #4
 8006234:	6018      	str	r0, [r3, #0]
 8006236:	062e      	lsls	r6, r5, #24
 8006238:	d501      	bpl.n	800623e <_printf_i+0xba>
 800623a:	680d      	ldr	r5, [r1, #0]
 800623c:	e003      	b.n	8006246 <_printf_i+0xc2>
 800623e:	066d      	lsls	r5, r5, #25
 8006240:	d5fb      	bpl.n	800623a <_printf_i+0xb6>
 8006242:	680d      	ldr	r5, [r1, #0]
 8006244:	b2ad      	uxth	r5, r5
 8006246:	4b56      	ldr	r3, [pc, #344]	; (80063a0 <_printf_i+0x21c>)
 8006248:	2708      	movs	r7, #8
 800624a:	9303      	str	r3, [sp, #12]
 800624c:	2a6f      	cmp	r2, #111	; 0x6f
 800624e:	d000      	beq.n	8006252 <_printf_i+0xce>
 8006250:	3702      	adds	r7, #2
 8006252:	0023      	movs	r3, r4
 8006254:	2200      	movs	r2, #0
 8006256:	3343      	adds	r3, #67	; 0x43
 8006258:	701a      	strb	r2, [r3, #0]
 800625a:	6863      	ldr	r3, [r4, #4]
 800625c:	60a3      	str	r3, [r4, #8]
 800625e:	2b00      	cmp	r3, #0
 8006260:	db03      	blt.n	800626a <_printf_i+0xe6>
 8006262:	2204      	movs	r2, #4
 8006264:	6821      	ldr	r1, [r4, #0]
 8006266:	4391      	bics	r1, r2
 8006268:	6021      	str	r1, [r4, #0]
 800626a:	2d00      	cmp	r5, #0
 800626c:	d102      	bne.n	8006274 <_printf_i+0xf0>
 800626e:	9e04      	ldr	r6, [sp, #16]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d00c      	beq.n	800628e <_printf_i+0x10a>
 8006274:	9e04      	ldr	r6, [sp, #16]
 8006276:	0028      	movs	r0, r5
 8006278:	0039      	movs	r1, r7
 800627a:	f7f9 ffe7 	bl	800024c <__aeabi_uidivmod>
 800627e:	9b03      	ldr	r3, [sp, #12]
 8006280:	3e01      	subs	r6, #1
 8006282:	5c5b      	ldrb	r3, [r3, r1]
 8006284:	7033      	strb	r3, [r6, #0]
 8006286:	002b      	movs	r3, r5
 8006288:	0005      	movs	r5, r0
 800628a:	429f      	cmp	r7, r3
 800628c:	d9f3      	bls.n	8006276 <_printf_i+0xf2>
 800628e:	2f08      	cmp	r7, #8
 8006290:	d109      	bne.n	80062a6 <_printf_i+0x122>
 8006292:	6823      	ldr	r3, [r4, #0]
 8006294:	07db      	lsls	r3, r3, #31
 8006296:	d506      	bpl.n	80062a6 <_printf_i+0x122>
 8006298:	6863      	ldr	r3, [r4, #4]
 800629a:	6922      	ldr	r2, [r4, #16]
 800629c:	4293      	cmp	r3, r2
 800629e:	dc02      	bgt.n	80062a6 <_printf_i+0x122>
 80062a0:	2330      	movs	r3, #48	; 0x30
 80062a2:	3e01      	subs	r6, #1
 80062a4:	7033      	strb	r3, [r6, #0]
 80062a6:	9b04      	ldr	r3, [sp, #16]
 80062a8:	1b9b      	subs	r3, r3, r6
 80062aa:	6123      	str	r3, [r4, #16]
 80062ac:	9b07      	ldr	r3, [sp, #28]
 80062ae:	0021      	movs	r1, r4
 80062b0:	9300      	str	r3, [sp, #0]
 80062b2:	9805      	ldr	r0, [sp, #20]
 80062b4:	9b06      	ldr	r3, [sp, #24]
 80062b6:	aa09      	add	r2, sp, #36	; 0x24
 80062b8:	f7ff fef4 	bl	80060a4 <_printf_common>
 80062bc:	1c43      	adds	r3, r0, #1
 80062be:	d14c      	bne.n	800635a <_printf_i+0x1d6>
 80062c0:	2001      	movs	r0, #1
 80062c2:	4240      	negs	r0, r0
 80062c4:	b00b      	add	sp, #44	; 0x2c
 80062c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062c8:	3145      	adds	r1, #69	; 0x45
 80062ca:	700a      	strb	r2, [r1, #0]
 80062cc:	4a34      	ldr	r2, [pc, #208]	; (80063a0 <_printf_i+0x21c>)
 80062ce:	9203      	str	r2, [sp, #12]
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	6821      	ldr	r1, [r4, #0]
 80062d4:	ca20      	ldmia	r2!, {r5}
 80062d6:	601a      	str	r2, [r3, #0]
 80062d8:	0608      	lsls	r0, r1, #24
 80062da:	d516      	bpl.n	800630a <_printf_i+0x186>
 80062dc:	07cb      	lsls	r3, r1, #31
 80062de:	d502      	bpl.n	80062e6 <_printf_i+0x162>
 80062e0:	2320      	movs	r3, #32
 80062e2:	4319      	orrs	r1, r3
 80062e4:	6021      	str	r1, [r4, #0]
 80062e6:	2710      	movs	r7, #16
 80062e8:	2d00      	cmp	r5, #0
 80062ea:	d1b2      	bne.n	8006252 <_printf_i+0xce>
 80062ec:	2320      	movs	r3, #32
 80062ee:	6822      	ldr	r2, [r4, #0]
 80062f0:	439a      	bics	r2, r3
 80062f2:	6022      	str	r2, [r4, #0]
 80062f4:	e7ad      	b.n	8006252 <_printf_i+0xce>
 80062f6:	2220      	movs	r2, #32
 80062f8:	6809      	ldr	r1, [r1, #0]
 80062fa:	430a      	orrs	r2, r1
 80062fc:	6022      	str	r2, [r4, #0]
 80062fe:	0022      	movs	r2, r4
 8006300:	2178      	movs	r1, #120	; 0x78
 8006302:	3245      	adds	r2, #69	; 0x45
 8006304:	7011      	strb	r1, [r2, #0]
 8006306:	4a27      	ldr	r2, [pc, #156]	; (80063a4 <_printf_i+0x220>)
 8006308:	e7e1      	b.n	80062ce <_printf_i+0x14a>
 800630a:	0648      	lsls	r0, r1, #25
 800630c:	d5e6      	bpl.n	80062dc <_printf_i+0x158>
 800630e:	b2ad      	uxth	r5, r5
 8006310:	e7e4      	b.n	80062dc <_printf_i+0x158>
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	680d      	ldr	r5, [r1, #0]
 8006316:	1d10      	adds	r0, r2, #4
 8006318:	6949      	ldr	r1, [r1, #20]
 800631a:	6018      	str	r0, [r3, #0]
 800631c:	6813      	ldr	r3, [r2, #0]
 800631e:	062e      	lsls	r6, r5, #24
 8006320:	d501      	bpl.n	8006326 <_printf_i+0x1a2>
 8006322:	6019      	str	r1, [r3, #0]
 8006324:	e002      	b.n	800632c <_printf_i+0x1a8>
 8006326:	066d      	lsls	r5, r5, #25
 8006328:	d5fb      	bpl.n	8006322 <_printf_i+0x19e>
 800632a:	8019      	strh	r1, [r3, #0]
 800632c:	2300      	movs	r3, #0
 800632e:	9e04      	ldr	r6, [sp, #16]
 8006330:	6123      	str	r3, [r4, #16]
 8006332:	e7bb      	b.n	80062ac <_printf_i+0x128>
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	1d11      	adds	r1, r2, #4
 8006338:	6019      	str	r1, [r3, #0]
 800633a:	6816      	ldr	r6, [r2, #0]
 800633c:	2100      	movs	r1, #0
 800633e:	0030      	movs	r0, r6
 8006340:	6862      	ldr	r2, [r4, #4]
 8006342:	f000 fcb5 	bl	8006cb0 <memchr>
 8006346:	2800      	cmp	r0, #0
 8006348:	d001      	beq.n	800634e <_printf_i+0x1ca>
 800634a:	1b80      	subs	r0, r0, r6
 800634c:	6060      	str	r0, [r4, #4]
 800634e:	6863      	ldr	r3, [r4, #4]
 8006350:	6123      	str	r3, [r4, #16]
 8006352:	2300      	movs	r3, #0
 8006354:	9a04      	ldr	r2, [sp, #16]
 8006356:	7013      	strb	r3, [r2, #0]
 8006358:	e7a8      	b.n	80062ac <_printf_i+0x128>
 800635a:	6923      	ldr	r3, [r4, #16]
 800635c:	0032      	movs	r2, r6
 800635e:	9906      	ldr	r1, [sp, #24]
 8006360:	9805      	ldr	r0, [sp, #20]
 8006362:	9d07      	ldr	r5, [sp, #28]
 8006364:	47a8      	blx	r5
 8006366:	1c43      	adds	r3, r0, #1
 8006368:	d0aa      	beq.n	80062c0 <_printf_i+0x13c>
 800636a:	6823      	ldr	r3, [r4, #0]
 800636c:	079b      	lsls	r3, r3, #30
 800636e:	d415      	bmi.n	800639c <_printf_i+0x218>
 8006370:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006372:	68e0      	ldr	r0, [r4, #12]
 8006374:	4298      	cmp	r0, r3
 8006376:	daa5      	bge.n	80062c4 <_printf_i+0x140>
 8006378:	0018      	movs	r0, r3
 800637a:	e7a3      	b.n	80062c4 <_printf_i+0x140>
 800637c:	0022      	movs	r2, r4
 800637e:	2301      	movs	r3, #1
 8006380:	9906      	ldr	r1, [sp, #24]
 8006382:	9805      	ldr	r0, [sp, #20]
 8006384:	9e07      	ldr	r6, [sp, #28]
 8006386:	3219      	adds	r2, #25
 8006388:	47b0      	blx	r6
 800638a:	1c43      	adds	r3, r0, #1
 800638c:	d098      	beq.n	80062c0 <_printf_i+0x13c>
 800638e:	3501      	adds	r5, #1
 8006390:	68e3      	ldr	r3, [r4, #12]
 8006392:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006394:	1a9b      	subs	r3, r3, r2
 8006396:	42ab      	cmp	r3, r5
 8006398:	dcf0      	bgt.n	800637c <_printf_i+0x1f8>
 800639a:	e7e9      	b.n	8006370 <_printf_i+0x1ec>
 800639c:	2500      	movs	r5, #0
 800639e:	e7f7      	b.n	8006390 <_printf_i+0x20c>
 80063a0:	08007a27 	.word	0x08007a27
 80063a4:	08007a38 	.word	0x08007a38

080063a8 <siscanf>:
 80063a8:	b40e      	push	{r1, r2, r3}
 80063aa:	b530      	push	{r4, r5, lr}
 80063ac:	2381      	movs	r3, #129	; 0x81
 80063ae:	b09c      	sub	sp, #112	; 0x70
 80063b0:	466a      	mov	r2, sp
 80063b2:	ac1f      	add	r4, sp, #124	; 0x7c
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	cc20      	ldmia	r4!, {r5}
 80063b8:	8293      	strh	r3, [r2, #20]
 80063ba:	9002      	str	r0, [sp, #8]
 80063bc:	9006      	str	r0, [sp, #24]
 80063be:	f7f9 fead 	bl	800011c <strlen>
 80063c2:	4b0b      	ldr	r3, [pc, #44]	; (80063f0 <siscanf+0x48>)
 80063c4:	466a      	mov	r2, sp
 80063c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80063c8:	2300      	movs	r3, #0
 80063ca:	9003      	str	r0, [sp, #12]
 80063cc:	9007      	str	r0, [sp, #28]
 80063ce:	4809      	ldr	r0, [pc, #36]	; (80063f4 <siscanf+0x4c>)
 80063d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80063d2:	9314      	str	r3, [sp, #80]	; 0x50
 80063d4:	3b01      	subs	r3, #1
 80063d6:	82d3      	strh	r3, [r2, #22]
 80063d8:	a902      	add	r1, sp, #8
 80063da:	0023      	movs	r3, r4
 80063dc:	002a      	movs	r2, r5
 80063de:	6800      	ldr	r0, [r0, #0]
 80063e0:	9401      	str	r4, [sp, #4]
 80063e2:	f000 fd0d 	bl	8006e00 <__ssvfiscanf_r>
 80063e6:	b01c      	add	sp, #112	; 0x70
 80063e8:	bc30      	pop	{r4, r5}
 80063ea:	bc08      	pop	{r3}
 80063ec:	b003      	add	sp, #12
 80063ee:	4718      	bx	r3
 80063f0:	08006421 	.word	0x08006421
 80063f4:	20000018 	.word	0x20000018

080063f8 <__sread>:
 80063f8:	b570      	push	{r4, r5, r6, lr}
 80063fa:	000c      	movs	r4, r1
 80063fc:	250e      	movs	r5, #14
 80063fe:	5f49      	ldrsh	r1, [r1, r5]
 8006400:	f000 ffde 	bl	80073c0 <_read_r>
 8006404:	2800      	cmp	r0, #0
 8006406:	db03      	blt.n	8006410 <__sread+0x18>
 8006408:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800640a:	181b      	adds	r3, r3, r0
 800640c:	6563      	str	r3, [r4, #84]	; 0x54
 800640e:	bd70      	pop	{r4, r5, r6, pc}
 8006410:	89a3      	ldrh	r3, [r4, #12]
 8006412:	4a02      	ldr	r2, [pc, #8]	; (800641c <__sread+0x24>)
 8006414:	4013      	ands	r3, r2
 8006416:	81a3      	strh	r3, [r4, #12]
 8006418:	e7f9      	b.n	800640e <__sread+0x16>
 800641a:	46c0      	nop			; (mov r8, r8)
 800641c:	ffffefff 	.word	0xffffefff

08006420 <__seofread>:
 8006420:	2000      	movs	r0, #0
 8006422:	4770      	bx	lr

08006424 <__swrite>:
 8006424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006426:	001f      	movs	r7, r3
 8006428:	898b      	ldrh	r3, [r1, #12]
 800642a:	0005      	movs	r5, r0
 800642c:	000c      	movs	r4, r1
 800642e:	0016      	movs	r6, r2
 8006430:	05db      	lsls	r3, r3, #23
 8006432:	d505      	bpl.n	8006440 <__swrite+0x1c>
 8006434:	230e      	movs	r3, #14
 8006436:	5ec9      	ldrsh	r1, [r1, r3]
 8006438:	2200      	movs	r2, #0
 800643a:	2302      	movs	r3, #2
 800643c:	f000 fbb8 	bl	8006bb0 <_lseek_r>
 8006440:	89a3      	ldrh	r3, [r4, #12]
 8006442:	4a05      	ldr	r2, [pc, #20]	; (8006458 <__swrite+0x34>)
 8006444:	0028      	movs	r0, r5
 8006446:	4013      	ands	r3, r2
 8006448:	81a3      	strh	r3, [r4, #12]
 800644a:	0032      	movs	r2, r6
 800644c:	230e      	movs	r3, #14
 800644e:	5ee1      	ldrsh	r1, [r4, r3]
 8006450:	003b      	movs	r3, r7
 8006452:	f000 f929 	bl	80066a8 <_write_r>
 8006456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006458:	ffffefff 	.word	0xffffefff

0800645c <__sseek>:
 800645c:	b570      	push	{r4, r5, r6, lr}
 800645e:	000c      	movs	r4, r1
 8006460:	250e      	movs	r5, #14
 8006462:	5f49      	ldrsh	r1, [r1, r5]
 8006464:	f000 fba4 	bl	8006bb0 <_lseek_r>
 8006468:	89a3      	ldrh	r3, [r4, #12]
 800646a:	1c42      	adds	r2, r0, #1
 800646c:	d103      	bne.n	8006476 <__sseek+0x1a>
 800646e:	4a05      	ldr	r2, [pc, #20]	; (8006484 <__sseek+0x28>)
 8006470:	4013      	ands	r3, r2
 8006472:	81a3      	strh	r3, [r4, #12]
 8006474:	bd70      	pop	{r4, r5, r6, pc}
 8006476:	2280      	movs	r2, #128	; 0x80
 8006478:	0152      	lsls	r2, r2, #5
 800647a:	4313      	orrs	r3, r2
 800647c:	81a3      	strh	r3, [r4, #12]
 800647e:	6560      	str	r0, [r4, #84]	; 0x54
 8006480:	e7f8      	b.n	8006474 <__sseek+0x18>
 8006482:	46c0      	nop			; (mov r8, r8)
 8006484:	ffffefff 	.word	0xffffefff

08006488 <__sclose>:
 8006488:	b510      	push	{r4, lr}
 800648a:	230e      	movs	r3, #14
 800648c:	5ec9      	ldrsh	r1, [r1, r3]
 800648e:	f000 f99f 	bl	80067d0 <_close_r>
 8006492:	bd10      	pop	{r4, pc}

08006494 <strcpy>:
 8006494:	0003      	movs	r3, r0
 8006496:	780a      	ldrb	r2, [r1, #0]
 8006498:	3101      	adds	r1, #1
 800649a:	701a      	strb	r2, [r3, #0]
 800649c:	3301      	adds	r3, #1
 800649e:	2a00      	cmp	r2, #0
 80064a0:	d1f9      	bne.n	8006496 <strcpy+0x2>
 80064a2:	4770      	bx	lr

080064a4 <strncmp>:
 80064a4:	b530      	push	{r4, r5, lr}
 80064a6:	0005      	movs	r5, r0
 80064a8:	1e10      	subs	r0, r2, #0
 80064aa:	d008      	beq.n	80064be <strncmp+0x1a>
 80064ac:	2400      	movs	r4, #0
 80064ae:	3a01      	subs	r2, #1
 80064b0:	5d2b      	ldrb	r3, [r5, r4]
 80064b2:	5d08      	ldrb	r0, [r1, r4]
 80064b4:	4283      	cmp	r3, r0
 80064b6:	d101      	bne.n	80064bc <strncmp+0x18>
 80064b8:	4294      	cmp	r4, r2
 80064ba:	d101      	bne.n	80064c0 <strncmp+0x1c>
 80064bc:	1a18      	subs	r0, r3, r0
 80064be:	bd30      	pop	{r4, r5, pc}
 80064c0:	3401      	adds	r4, #1
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d1f4      	bne.n	80064b0 <strncmp+0xc>
 80064c6:	e7f9      	b.n	80064bc <strncmp+0x18>

080064c8 <_strtoul_l.constprop.0>:
 80064c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064ca:	b087      	sub	sp, #28
 80064cc:	9202      	str	r2, [sp, #8]
 80064ce:	4a42      	ldr	r2, [pc, #264]	; (80065d8 <_strtoul_l.constprop.0+0x110>)
 80064d0:	001e      	movs	r6, r3
 80064d2:	9101      	str	r1, [sp, #4]
 80064d4:	000b      	movs	r3, r1
 80064d6:	4694      	mov	ip, r2
 80064d8:	2108      	movs	r1, #8
 80064da:	9005      	str	r0, [sp, #20]
 80064dc:	001a      	movs	r2, r3
 80064de:	4660      	mov	r0, ip
 80064e0:	7814      	ldrb	r4, [r2, #0]
 80064e2:	3301      	adds	r3, #1
 80064e4:	5d00      	ldrb	r0, [r0, r4]
 80064e6:	001d      	movs	r5, r3
 80064e8:	0007      	movs	r7, r0
 80064ea:	400f      	ands	r7, r1
 80064ec:	4208      	tst	r0, r1
 80064ee:	d1f5      	bne.n	80064dc <_strtoul_l.constprop.0+0x14>
 80064f0:	2c2d      	cmp	r4, #45	; 0x2d
 80064f2:	d13a      	bne.n	800656a <_strtoul_l.constprop.0+0xa2>
 80064f4:	2701      	movs	r7, #1
 80064f6:	781c      	ldrb	r4, [r3, #0]
 80064f8:	1c95      	adds	r5, r2, #2
 80064fa:	2e00      	cmp	r6, #0
 80064fc:	d067      	beq.n	80065ce <_strtoul_l.constprop.0+0x106>
 80064fe:	2e10      	cmp	r6, #16
 8006500:	d109      	bne.n	8006516 <_strtoul_l.constprop.0+0x4e>
 8006502:	2c30      	cmp	r4, #48	; 0x30
 8006504:	d107      	bne.n	8006516 <_strtoul_l.constprop.0+0x4e>
 8006506:	2220      	movs	r2, #32
 8006508:	782b      	ldrb	r3, [r5, #0]
 800650a:	4393      	bics	r3, r2
 800650c:	2b58      	cmp	r3, #88	; 0x58
 800650e:	d159      	bne.n	80065c4 <_strtoul_l.constprop.0+0xfc>
 8006510:	2610      	movs	r6, #16
 8006512:	786c      	ldrb	r4, [r5, #1]
 8006514:	3502      	adds	r5, #2
 8006516:	2001      	movs	r0, #1
 8006518:	0031      	movs	r1, r6
 800651a:	4240      	negs	r0, r0
 800651c:	f7f9 fe10 	bl	8000140 <__udivsi3>
 8006520:	9003      	str	r0, [sp, #12]
 8006522:	2001      	movs	r0, #1
 8006524:	0031      	movs	r1, r6
 8006526:	4240      	negs	r0, r0
 8006528:	f7f9 fe90 	bl	800024c <__aeabi_uidivmod>
 800652c:	2300      	movs	r3, #0
 800652e:	9104      	str	r1, [sp, #16]
 8006530:	2101      	movs	r1, #1
 8006532:	2201      	movs	r2, #1
 8006534:	0018      	movs	r0, r3
 8006536:	468c      	mov	ip, r1
 8006538:	4252      	negs	r2, r2
 800653a:	0021      	movs	r1, r4
 800653c:	3930      	subs	r1, #48	; 0x30
 800653e:	2909      	cmp	r1, #9
 8006540:	d818      	bhi.n	8006574 <_strtoul_l.constprop.0+0xac>
 8006542:	000c      	movs	r4, r1
 8006544:	42a6      	cmp	r6, r4
 8006546:	dd23      	ble.n	8006590 <_strtoul_l.constprop.0+0xc8>
 8006548:	2b00      	cmp	r3, #0
 800654a:	db1f      	blt.n	800658c <_strtoul_l.constprop.0+0xc4>
 800654c:	9903      	ldr	r1, [sp, #12]
 800654e:	0013      	movs	r3, r2
 8006550:	4281      	cmp	r1, r0
 8006552:	d307      	bcc.n	8006564 <_strtoul_l.constprop.0+0x9c>
 8006554:	d103      	bne.n	800655e <_strtoul_l.constprop.0+0x96>
 8006556:	9904      	ldr	r1, [sp, #16]
 8006558:	0013      	movs	r3, r2
 800655a:	42a1      	cmp	r1, r4
 800655c:	db02      	blt.n	8006564 <_strtoul_l.constprop.0+0x9c>
 800655e:	4663      	mov	r3, ip
 8006560:	4370      	muls	r0, r6
 8006562:	1820      	adds	r0, r4, r0
 8006564:	782c      	ldrb	r4, [r5, #0]
 8006566:	3501      	adds	r5, #1
 8006568:	e7e7      	b.n	800653a <_strtoul_l.constprop.0+0x72>
 800656a:	2c2b      	cmp	r4, #43	; 0x2b
 800656c:	d1c5      	bne.n	80064fa <_strtoul_l.constprop.0+0x32>
 800656e:	781c      	ldrb	r4, [r3, #0]
 8006570:	1c95      	adds	r5, r2, #2
 8006572:	e7c2      	b.n	80064fa <_strtoul_l.constprop.0+0x32>
 8006574:	0021      	movs	r1, r4
 8006576:	3941      	subs	r1, #65	; 0x41
 8006578:	2919      	cmp	r1, #25
 800657a:	d801      	bhi.n	8006580 <_strtoul_l.constprop.0+0xb8>
 800657c:	3c37      	subs	r4, #55	; 0x37
 800657e:	e7e1      	b.n	8006544 <_strtoul_l.constprop.0+0x7c>
 8006580:	0021      	movs	r1, r4
 8006582:	3961      	subs	r1, #97	; 0x61
 8006584:	2919      	cmp	r1, #25
 8006586:	d803      	bhi.n	8006590 <_strtoul_l.constprop.0+0xc8>
 8006588:	3c57      	subs	r4, #87	; 0x57
 800658a:	e7db      	b.n	8006544 <_strtoul_l.constprop.0+0x7c>
 800658c:	0013      	movs	r3, r2
 800658e:	e7e9      	b.n	8006564 <_strtoul_l.constprop.0+0x9c>
 8006590:	2b00      	cmp	r3, #0
 8006592:	da09      	bge.n	80065a8 <_strtoul_l.constprop.0+0xe0>
 8006594:	2322      	movs	r3, #34	; 0x22
 8006596:	2001      	movs	r0, #1
 8006598:	9a05      	ldr	r2, [sp, #20]
 800659a:	4240      	negs	r0, r0
 800659c:	6013      	str	r3, [r2, #0]
 800659e:	9b02      	ldr	r3, [sp, #8]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d109      	bne.n	80065b8 <_strtoul_l.constprop.0+0xf0>
 80065a4:	b007      	add	sp, #28
 80065a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065a8:	2f00      	cmp	r7, #0
 80065aa:	d000      	beq.n	80065ae <_strtoul_l.constprop.0+0xe6>
 80065ac:	4240      	negs	r0, r0
 80065ae:	9a02      	ldr	r2, [sp, #8]
 80065b0:	2a00      	cmp	r2, #0
 80065b2:	d0f7      	beq.n	80065a4 <_strtoul_l.constprop.0+0xdc>
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d001      	beq.n	80065bc <_strtoul_l.constprop.0+0xf4>
 80065b8:	1e6b      	subs	r3, r5, #1
 80065ba:	9301      	str	r3, [sp, #4]
 80065bc:	9b02      	ldr	r3, [sp, #8]
 80065be:	9a01      	ldr	r2, [sp, #4]
 80065c0:	601a      	str	r2, [r3, #0]
 80065c2:	e7ef      	b.n	80065a4 <_strtoul_l.constprop.0+0xdc>
 80065c4:	2430      	movs	r4, #48	; 0x30
 80065c6:	2e00      	cmp	r6, #0
 80065c8:	d1a5      	bne.n	8006516 <_strtoul_l.constprop.0+0x4e>
 80065ca:	3608      	adds	r6, #8
 80065cc:	e7a3      	b.n	8006516 <_strtoul_l.constprop.0+0x4e>
 80065ce:	2c30      	cmp	r4, #48	; 0x30
 80065d0:	d099      	beq.n	8006506 <_strtoul_l.constprop.0+0x3e>
 80065d2:	260a      	movs	r6, #10
 80065d4:	e79f      	b.n	8006516 <_strtoul_l.constprop.0+0x4e>
 80065d6:	46c0      	nop			; (mov r8, r8)
 80065d8:	08007916 	.word	0x08007916

080065dc <_strtoul_r>:
 80065dc:	b510      	push	{r4, lr}
 80065de:	f7ff ff73 	bl	80064c8 <_strtoul_l.constprop.0>
 80065e2:	bd10      	pop	{r4, pc}

080065e4 <strtoul>:
 80065e4:	b510      	push	{r4, lr}
 80065e6:	0013      	movs	r3, r2
 80065e8:	000a      	movs	r2, r1
 80065ea:	0001      	movs	r1, r0
 80065ec:	4802      	ldr	r0, [pc, #8]	; (80065f8 <strtoul+0x14>)
 80065ee:	6800      	ldr	r0, [r0, #0]
 80065f0:	f7ff ff6a 	bl	80064c8 <_strtoul_l.constprop.0>
 80065f4:	bd10      	pop	{r4, pc}
 80065f6:	46c0      	nop			; (mov r8, r8)
 80065f8:	20000018 	.word	0x20000018

080065fc <__swbuf_r>:
 80065fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065fe:	0005      	movs	r5, r0
 8006600:	000e      	movs	r6, r1
 8006602:	0014      	movs	r4, r2
 8006604:	2800      	cmp	r0, #0
 8006606:	d004      	beq.n	8006612 <__swbuf_r+0x16>
 8006608:	6983      	ldr	r3, [r0, #24]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d101      	bne.n	8006612 <__swbuf_r+0x16>
 800660e:	f000 fa2f 	bl	8006a70 <__sinit>
 8006612:	4b22      	ldr	r3, [pc, #136]	; (800669c <__swbuf_r+0xa0>)
 8006614:	429c      	cmp	r4, r3
 8006616:	d12e      	bne.n	8006676 <__swbuf_r+0x7a>
 8006618:	686c      	ldr	r4, [r5, #4]
 800661a:	69a3      	ldr	r3, [r4, #24]
 800661c:	60a3      	str	r3, [r4, #8]
 800661e:	89a3      	ldrh	r3, [r4, #12]
 8006620:	071b      	lsls	r3, r3, #28
 8006622:	d532      	bpl.n	800668a <__swbuf_r+0x8e>
 8006624:	6923      	ldr	r3, [r4, #16]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d02f      	beq.n	800668a <__swbuf_r+0x8e>
 800662a:	6823      	ldr	r3, [r4, #0]
 800662c:	6922      	ldr	r2, [r4, #16]
 800662e:	b2f7      	uxtb	r7, r6
 8006630:	1a98      	subs	r0, r3, r2
 8006632:	6963      	ldr	r3, [r4, #20]
 8006634:	b2f6      	uxtb	r6, r6
 8006636:	4283      	cmp	r3, r0
 8006638:	dc05      	bgt.n	8006646 <__swbuf_r+0x4a>
 800663a:	0021      	movs	r1, r4
 800663c:	0028      	movs	r0, r5
 800663e:	f000 f975 	bl	800692c <_fflush_r>
 8006642:	2800      	cmp	r0, #0
 8006644:	d127      	bne.n	8006696 <__swbuf_r+0x9a>
 8006646:	68a3      	ldr	r3, [r4, #8]
 8006648:	3001      	adds	r0, #1
 800664a:	3b01      	subs	r3, #1
 800664c:	60a3      	str	r3, [r4, #8]
 800664e:	6823      	ldr	r3, [r4, #0]
 8006650:	1c5a      	adds	r2, r3, #1
 8006652:	6022      	str	r2, [r4, #0]
 8006654:	701f      	strb	r7, [r3, #0]
 8006656:	6963      	ldr	r3, [r4, #20]
 8006658:	4283      	cmp	r3, r0
 800665a:	d004      	beq.n	8006666 <__swbuf_r+0x6a>
 800665c:	89a3      	ldrh	r3, [r4, #12]
 800665e:	07db      	lsls	r3, r3, #31
 8006660:	d507      	bpl.n	8006672 <__swbuf_r+0x76>
 8006662:	2e0a      	cmp	r6, #10
 8006664:	d105      	bne.n	8006672 <__swbuf_r+0x76>
 8006666:	0021      	movs	r1, r4
 8006668:	0028      	movs	r0, r5
 800666a:	f000 f95f 	bl	800692c <_fflush_r>
 800666e:	2800      	cmp	r0, #0
 8006670:	d111      	bne.n	8006696 <__swbuf_r+0x9a>
 8006672:	0030      	movs	r0, r6
 8006674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006676:	4b0a      	ldr	r3, [pc, #40]	; (80066a0 <__swbuf_r+0xa4>)
 8006678:	429c      	cmp	r4, r3
 800667a:	d101      	bne.n	8006680 <__swbuf_r+0x84>
 800667c:	68ac      	ldr	r4, [r5, #8]
 800667e:	e7cc      	b.n	800661a <__swbuf_r+0x1e>
 8006680:	4b08      	ldr	r3, [pc, #32]	; (80066a4 <__swbuf_r+0xa8>)
 8006682:	429c      	cmp	r4, r3
 8006684:	d1c9      	bne.n	800661a <__swbuf_r+0x1e>
 8006686:	68ec      	ldr	r4, [r5, #12]
 8006688:	e7c7      	b.n	800661a <__swbuf_r+0x1e>
 800668a:	0021      	movs	r1, r4
 800668c:	0028      	movs	r0, r5
 800668e:	f000 f81f 	bl	80066d0 <__swsetup_r>
 8006692:	2800      	cmp	r0, #0
 8006694:	d0c9      	beq.n	800662a <__swbuf_r+0x2e>
 8006696:	2601      	movs	r6, #1
 8006698:	4276      	negs	r6, r6
 800669a:	e7ea      	b.n	8006672 <__swbuf_r+0x76>
 800669c:	08007a6c 	.word	0x08007a6c
 80066a0:	08007a8c 	.word	0x08007a8c
 80066a4:	08007a4c 	.word	0x08007a4c

080066a8 <_write_r>:
 80066a8:	b570      	push	{r4, r5, r6, lr}
 80066aa:	0004      	movs	r4, r0
 80066ac:	0008      	movs	r0, r1
 80066ae:	0011      	movs	r1, r2
 80066b0:	001a      	movs	r2, r3
 80066b2:	2300      	movs	r3, #0
 80066b4:	4d05      	ldr	r5, [pc, #20]	; (80066cc <_write_r+0x24>)
 80066b6:	602b      	str	r3, [r5, #0]
 80066b8:	f7fa fda7 	bl	800120a <_write>
 80066bc:	1c43      	adds	r3, r0, #1
 80066be:	d103      	bne.n	80066c8 <_write_r+0x20>
 80066c0:	682b      	ldr	r3, [r5, #0]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d000      	beq.n	80066c8 <_write_r+0x20>
 80066c6:	6023      	str	r3, [r4, #0]
 80066c8:	bd70      	pop	{r4, r5, r6, pc}
 80066ca:	46c0      	nop			; (mov r8, r8)
 80066cc:	2000025c 	.word	0x2000025c

080066d0 <__swsetup_r>:
 80066d0:	4b37      	ldr	r3, [pc, #220]	; (80067b0 <__swsetup_r+0xe0>)
 80066d2:	b570      	push	{r4, r5, r6, lr}
 80066d4:	681d      	ldr	r5, [r3, #0]
 80066d6:	0006      	movs	r6, r0
 80066d8:	000c      	movs	r4, r1
 80066da:	2d00      	cmp	r5, #0
 80066dc:	d005      	beq.n	80066ea <__swsetup_r+0x1a>
 80066de:	69ab      	ldr	r3, [r5, #24]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d102      	bne.n	80066ea <__swsetup_r+0x1a>
 80066e4:	0028      	movs	r0, r5
 80066e6:	f000 f9c3 	bl	8006a70 <__sinit>
 80066ea:	4b32      	ldr	r3, [pc, #200]	; (80067b4 <__swsetup_r+0xe4>)
 80066ec:	429c      	cmp	r4, r3
 80066ee:	d10f      	bne.n	8006710 <__swsetup_r+0x40>
 80066f0:	686c      	ldr	r4, [r5, #4]
 80066f2:	230c      	movs	r3, #12
 80066f4:	5ee2      	ldrsh	r2, [r4, r3]
 80066f6:	b293      	uxth	r3, r2
 80066f8:	0711      	lsls	r1, r2, #28
 80066fa:	d42d      	bmi.n	8006758 <__swsetup_r+0x88>
 80066fc:	06d9      	lsls	r1, r3, #27
 80066fe:	d411      	bmi.n	8006724 <__swsetup_r+0x54>
 8006700:	2309      	movs	r3, #9
 8006702:	2001      	movs	r0, #1
 8006704:	6033      	str	r3, [r6, #0]
 8006706:	3337      	adds	r3, #55	; 0x37
 8006708:	4313      	orrs	r3, r2
 800670a:	81a3      	strh	r3, [r4, #12]
 800670c:	4240      	negs	r0, r0
 800670e:	bd70      	pop	{r4, r5, r6, pc}
 8006710:	4b29      	ldr	r3, [pc, #164]	; (80067b8 <__swsetup_r+0xe8>)
 8006712:	429c      	cmp	r4, r3
 8006714:	d101      	bne.n	800671a <__swsetup_r+0x4a>
 8006716:	68ac      	ldr	r4, [r5, #8]
 8006718:	e7eb      	b.n	80066f2 <__swsetup_r+0x22>
 800671a:	4b28      	ldr	r3, [pc, #160]	; (80067bc <__swsetup_r+0xec>)
 800671c:	429c      	cmp	r4, r3
 800671e:	d1e8      	bne.n	80066f2 <__swsetup_r+0x22>
 8006720:	68ec      	ldr	r4, [r5, #12]
 8006722:	e7e6      	b.n	80066f2 <__swsetup_r+0x22>
 8006724:	075b      	lsls	r3, r3, #29
 8006726:	d513      	bpl.n	8006750 <__swsetup_r+0x80>
 8006728:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800672a:	2900      	cmp	r1, #0
 800672c:	d008      	beq.n	8006740 <__swsetup_r+0x70>
 800672e:	0023      	movs	r3, r4
 8006730:	3344      	adds	r3, #68	; 0x44
 8006732:	4299      	cmp	r1, r3
 8006734:	d002      	beq.n	800673c <__swsetup_r+0x6c>
 8006736:	0030      	movs	r0, r6
 8006738:	f7fe fc02 	bl	8004f40 <_free_r>
 800673c:	2300      	movs	r3, #0
 800673e:	6363      	str	r3, [r4, #52]	; 0x34
 8006740:	2224      	movs	r2, #36	; 0x24
 8006742:	89a3      	ldrh	r3, [r4, #12]
 8006744:	4393      	bics	r3, r2
 8006746:	81a3      	strh	r3, [r4, #12]
 8006748:	2300      	movs	r3, #0
 800674a:	6063      	str	r3, [r4, #4]
 800674c:	6923      	ldr	r3, [r4, #16]
 800674e:	6023      	str	r3, [r4, #0]
 8006750:	2308      	movs	r3, #8
 8006752:	89a2      	ldrh	r2, [r4, #12]
 8006754:	4313      	orrs	r3, r2
 8006756:	81a3      	strh	r3, [r4, #12]
 8006758:	6923      	ldr	r3, [r4, #16]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d10b      	bne.n	8006776 <__swsetup_r+0xa6>
 800675e:	21a0      	movs	r1, #160	; 0xa0
 8006760:	2280      	movs	r2, #128	; 0x80
 8006762:	89a3      	ldrh	r3, [r4, #12]
 8006764:	0089      	lsls	r1, r1, #2
 8006766:	0092      	lsls	r2, r2, #2
 8006768:	400b      	ands	r3, r1
 800676a:	4293      	cmp	r3, r2
 800676c:	d003      	beq.n	8006776 <__swsetup_r+0xa6>
 800676e:	0021      	movs	r1, r4
 8006770:	0030      	movs	r0, r6
 8006772:	f000 fa59 	bl	8006c28 <__smakebuf_r>
 8006776:	220c      	movs	r2, #12
 8006778:	5ea3      	ldrsh	r3, [r4, r2]
 800677a:	2001      	movs	r0, #1
 800677c:	001a      	movs	r2, r3
 800677e:	b299      	uxth	r1, r3
 8006780:	4002      	ands	r2, r0
 8006782:	4203      	tst	r3, r0
 8006784:	d00f      	beq.n	80067a6 <__swsetup_r+0xd6>
 8006786:	2200      	movs	r2, #0
 8006788:	60a2      	str	r2, [r4, #8]
 800678a:	6962      	ldr	r2, [r4, #20]
 800678c:	4252      	negs	r2, r2
 800678e:	61a2      	str	r2, [r4, #24]
 8006790:	2000      	movs	r0, #0
 8006792:	6922      	ldr	r2, [r4, #16]
 8006794:	4282      	cmp	r2, r0
 8006796:	d1ba      	bne.n	800670e <__swsetup_r+0x3e>
 8006798:	060a      	lsls	r2, r1, #24
 800679a:	d5b8      	bpl.n	800670e <__swsetup_r+0x3e>
 800679c:	2240      	movs	r2, #64	; 0x40
 800679e:	4313      	orrs	r3, r2
 80067a0:	81a3      	strh	r3, [r4, #12]
 80067a2:	3801      	subs	r0, #1
 80067a4:	e7b3      	b.n	800670e <__swsetup_r+0x3e>
 80067a6:	0788      	lsls	r0, r1, #30
 80067a8:	d400      	bmi.n	80067ac <__swsetup_r+0xdc>
 80067aa:	6962      	ldr	r2, [r4, #20]
 80067ac:	60a2      	str	r2, [r4, #8]
 80067ae:	e7ef      	b.n	8006790 <__swsetup_r+0xc0>
 80067b0:	20000018 	.word	0x20000018
 80067b4:	08007a6c 	.word	0x08007a6c
 80067b8:	08007a8c 	.word	0x08007a8c
 80067bc:	08007a4c 	.word	0x08007a4c

080067c0 <abort>:
 80067c0:	2006      	movs	r0, #6
 80067c2:	b510      	push	{r4, lr}
 80067c4:	f000 fe76 	bl	80074b4 <raise>
 80067c8:	2001      	movs	r0, #1
 80067ca:	f7fa fcf5 	bl	80011b8 <_exit>
	...

080067d0 <_close_r>:
 80067d0:	2300      	movs	r3, #0
 80067d2:	b570      	push	{r4, r5, r6, lr}
 80067d4:	4d06      	ldr	r5, [pc, #24]	; (80067f0 <_close_r+0x20>)
 80067d6:	0004      	movs	r4, r0
 80067d8:	0008      	movs	r0, r1
 80067da:	602b      	str	r3, [r5, #0]
 80067dc:	f7fa fd31 	bl	8001242 <_close>
 80067e0:	1c43      	adds	r3, r0, #1
 80067e2:	d103      	bne.n	80067ec <_close_r+0x1c>
 80067e4:	682b      	ldr	r3, [r5, #0]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d000      	beq.n	80067ec <_close_r+0x1c>
 80067ea:	6023      	str	r3, [r4, #0]
 80067ec:	bd70      	pop	{r4, r5, r6, pc}
 80067ee:	46c0      	nop			; (mov r8, r8)
 80067f0:	2000025c 	.word	0x2000025c

080067f4 <__env_lock>:
 80067f4:	b510      	push	{r4, lr}
 80067f6:	4802      	ldr	r0, [pc, #8]	; (8006800 <__env_lock+0xc>)
 80067f8:	f7ff f97c 	bl	8005af4 <__retarget_lock_acquire_recursive>
 80067fc:	bd10      	pop	{r4, pc}
 80067fe:	46c0      	nop			; (mov r8, r8)
 8006800:	20000254 	.word	0x20000254

08006804 <__env_unlock>:
 8006804:	b510      	push	{r4, lr}
 8006806:	4802      	ldr	r0, [pc, #8]	; (8006810 <__env_unlock+0xc>)
 8006808:	f7ff f976 	bl	8005af8 <__retarget_lock_release_recursive>
 800680c:	bd10      	pop	{r4, pc}
 800680e:	46c0      	nop			; (mov r8, r8)
 8006810:	20000254 	.word	0x20000254

08006814 <__sflush_r>:
 8006814:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006816:	898b      	ldrh	r3, [r1, #12]
 8006818:	0005      	movs	r5, r0
 800681a:	000c      	movs	r4, r1
 800681c:	071a      	lsls	r2, r3, #28
 800681e:	d45f      	bmi.n	80068e0 <__sflush_r+0xcc>
 8006820:	684a      	ldr	r2, [r1, #4]
 8006822:	2a00      	cmp	r2, #0
 8006824:	dc04      	bgt.n	8006830 <__sflush_r+0x1c>
 8006826:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8006828:	2a00      	cmp	r2, #0
 800682a:	dc01      	bgt.n	8006830 <__sflush_r+0x1c>
 800682c:	2000      	movs	r0, #0
 800682e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006830:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006832:	2f00      	cmp	r7, #0
 8006834:	d0fa      	beq.n	800682c <__sflush_r+0x18>
 8006836:	2200      	movs	r2, #0
 8006838:	2180      	movs	r1, #128	; 0x80
 800683a:	682e      	ldr	r6, [r5, #0]
 800683c:	602a      	str	r2, [r5, #0]
 800683e:	001a      	movs	r2, r3
 8006840:	0149      	lsls	r1, r1, #5
 8006842:	400a      	ands	r2, r1
 8006844:	420b      	tst	r3, r1
 8006846:	d034      	beq.n	80068b2 <__sflush_r+0x9e>
 8006848:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800684a:	89a3      	ldrh	r3, [r4, #12]
 800684c:	075b      	lsls	r3, r3, #29
 800684e:	d506      	bpl.n	800685e <__sflush_r+0x4a>
 8006850:	6863      	ldr	r3, [r4, #4]
 8006852:	1ac0      	subs	r0, r0, r3
 8006854:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006856:	2b00      	cmp	r3, #0
 8006858:	d001      	beq.n	800685e <__sflush_r+0x4a>
 800685a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800685c:	1ac0      	subs	r0, r0, r3
 800685e:	0002      	movs	r2, r0
 8006860:	6a21      	ldr	r1, [r4, #32]
 8006862:	2300      	movs	r3, #0
 8006864:	0028      	movs	r0, r5
 8006866:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006868:	47b8      	blx	r7
 800686a:	89a1      	ldrh	r1, [r4, #12]
 800686c:	1c43      	adds	r3, r0, #1
 800686e:	d106      	bne.n	800687e <__sflush_r+0x6a>
 8006870:	682b      	ldr	r3, [r5, #0]
 8006872:	2b1d      	cmp	r3, #29
 8006874:	d831      	bhi.n	80068da <__sflush_r+0xc6>
 8006876:	4a2c      	ldr	r2, [pc, #176]	; (8006928 <__sflush_r+0x114>)
 8006878:	40da      	lsrs	r2, r3
 800687a:	07d3      	lsls	r3, r2, #31
 800687c:	d52d      	bpl.n	80068da <__sflush_r+0xc6>
 800687e:	2300      	movs	r3, #0
 8006880:	6063      	str	r3, [r4, #4]
 8006882:	6923      	ldr	r3, [r4, #16]
 8006884:	6023      	str	r3, [r4, #0]
 8006886:	04cb      	lsls	r3, r1, #19
 8006888:	d505      	bpl.n	8006896 <__sflush_r+0x82>
 800688a:	1c43      	adds	r3, r0, #1
 800688c:	d102      	bne.n	8006894 <__sflush_r+0x80>
 800688e:	682b      	ldr	r3, [r5, #0]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d100      	bne.n	8006896 <__sflush_r+0x82>
 8006894:	6560      	str	r0, [r4, #84]	; 0x54
 8006896:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006898:	602e      	str	r6, [r5, #0]
 800689a:	2900      	cmp	r1, #0
 800689c:	d0c6      	beq.n	800682c <__sflush_r+0x18>
 800689e:	0023      	movs	r3, r4
 80068a0:	3344      	adds	r3, #68	; 0x44
 80068a2:	4299      	cmp	r1, r3
 80068a4:	d002      	beq.n	80068ac <__sflush_r+0x98>
 80068a6:	0028      	movs	r0, r5
 80068a8:	f7fe fb4a 	bl	8004f40 <_free_r>
 80068ac:	2000      	movs	r0, #0
 80068ae:	6360      	str	r0, [r4, #52]	; 0x34
 80068b0:	e7bd      	b.n	800682e <__sflush_r+0x1a>
 80068b2:	2301      	movs	r3, #1
 80068b4:	0028      	movs	r0, r5
 80068b6:	6a21      	ldr	r1, [r4, #32]
 80068b8:	47b8      	blx	r7
 80068ba:	1c43      	adds	r3, r0, #1
 80068bc:	d1c5      	bne.n	800684a <__sflush_r+0x36>
 80068be:	682b      	ldr	r3, [r5, #0]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d0c2      	beq.n	800684a <__sflush_r+0x36>
 80068c4:	2b1d      	cmp	r3, #29
 80068c6:	d001      	beq.n	80068cc <__sflush_r+0xb8>
 80068c8:	2b16      	cmp	r3, #22
 80068ca:	d101      	bne.n	80068d0 <__sflush_r+0xbc>
 80068cc:	602e      	str	r6, [r5, #0]
 80068ce:	e7ad      	b.n	800682c <__sflush_r+0x18>
 80068d0:	2340      	movs	r3, #64	; 0x40
 80068d2:	89a2      	ldrh	r2, [r4, #12]
 80068d4:	4313      	orrs	r3, r2
 80068d6:	81a3      	strh	r3, [r4, #12]
 80068d8:	e7a9      	b.n	800682e <__sflush_r+0x1a>
 80068da:	2340      	movs	r3, #64	; 0x40
 80068dc:	430b      	orrs	r3, r1
 80068de:	e7fa      	b.n	80068d6 <__sflush_r+0xc2>
 80068e0:	690f      	ldr	r7, [r1, #16]
 80068e2:	2f00      	cmp	r7, #0
 80068e4:	d0a2      	beq.n	800682c <__sflush_r+0x18>
 80068e6:	680a      	ldr	r2, [r1, #0]
 80068e8:	600f      	str	r7, [r1, #0]
 80068ea:	1bd2      	subs	r2, r2, r7
 80068ec:	9201      	str	r2, [sp, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	079b      	lsls	r3, r3, #30
 80068f2:	d100      	bne.n	80068f6 <__sflush_r+0xe2>
 80068f4:	694a      	ldr	r2, [r1, #20]
 80068f6:	60a2      	str	r2, [r4, #8]
 80068f8:	9b01      	ldr	r3, [sp, #4]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	dc00      	bgt.n	8006900 <__sflush_r+0xec>
 80068fe:	e795      	b.n	800682c <__sflush_r+0x18>
 8006900:	003a      	movs	r2, r7
 8006902:	0028      	movs	r0, r5
 8006904:	9b01      	ldr	r3, [sp, #4]
 8006906:	6a21      	ldr	r1, [r4, #32]
 8006908:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800690a:	47b0      	blx	r6
 800690c:	2800      	cmp	r0, #0
 800690e:	dc06      	bgt.n	800691e <__sflush_r+0x10a>
 8006910:	2340      	movs	r3, #64	; 0x40
 8006912:	2001      	movs	r0, #1
 8006914:	89a2      	ldrh	r2, [r4, #12]
 8006916:	4240      	negs	r0, r0
 8006918:	4313      	orrs	r3, r2
 800691a:	81a3      	strh	r3, [r4, #12]
 800691c:	e787      	b.n	800682e <__sflush_r+0x1a>
 800691e:	9b01      	ldr	r3, [sp, #4]
 8006920:	183f      	adds	r7, r7, r0
 8006922:	1a1b      	subs	r3, r3, r0
 8006924:	9301      	str	r3, [sp, #4]
 8006926:	e7e7      	b.n	80068f8 <__sflush_r+0xe4>
 8006928:	20400001 	.word	0x20400001

0800692c <_fflush_r>:
 800692c:	690b      	ldr	r3, [r1, #16]
 800692e:	b570      	push	{r4, r5, r6, lr}
 8006930:	0005      	movs	r5, r0
 8006932:	000c      	movs	r4, r1
 8006934:	2b00      	cmp	r3, #0
 8006936:	d102      	bne.n	800693e <_fflush_r+0x12>
 8006938:	2500      	movs	r5, #0
 800693a:	0028      	movs	r0, r5
 800693c:	bd70      	pop	{r4, r5, r6, pc}
 800693e:	2800      	cmp	r0, #0
 8006940:	d004      	beq.n	800694c <_fflush_r+0x20>
 8006942:	6983      	ldr	r3, [r0, #24]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d101      	bne.n	800694c <_fflush_r+0x20>
 8006948:	f000 f892 	bl	8006a70 <__sinit>
 800694c:	4b14      	ldr	r3, [pc, #80]	; (80069a0 <_fflush_r+0x74>)
 800694e:	429c      	cmp	r4, r3
 8006950:	d11b      	bne.n	800698a <_fflush_r+0x5e>
 8006952:	686c      	ldr	r4, [r5, #4]
 8006954:	220c      	movs	r2, #12
 8006956:	5ea3      	ldrsh	r3, [r4, r2]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d0ed      	beq.n	8006938 <_fflush_r+0xc>
 800695c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800695e:	07d2      	lsls	r2, r2, #31
 8006960:	d404      	bmi.n	800696c <_fflush_r+0x40>
 8006962:	059b      	lsls	r3, r3, #22
 8006964:	d402      	bmi.n	800696c <_fflush_r+0x40>
 8006966:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006968:	f7ff f8c4 	bl	8005af4 <__retarget_lock_acquire_recursive>
 800696c:	0028      	movs	r0, r5
 800696e:	0021      	movs	r1, r4
 8006970:	f7ff ff50 	bl	8006814 <__sflush_r>
 8006974:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006976:	0005      	movs	r5, r0
 8006978:	07db      	lsls	r3, r3, #31
 800697a:	d4de      	bmi.n	800693a <_fflush_r+0xe>
 800697c:	89a3      	ldrh	r3, [r4, #12]
 800697e:	059b      	lsls	r3, r3, #22
 8006980:	d4db      	bmi.n	800693a <_fflush_r+0xe>
 8006982:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006984:	f7ff f8b8 	bl	8005af8 <__retarget_lock_release_recursive>
 8006988:	e7d7      	b.n	800693a <_fflush_r+0xe>
 800698a:	4b06      	ldr	r3, [pc, #24]	; (80069a4 <_fflush_r+0x78>)
 800698c:	429c      	cmp	r4, r3
 800698e:	d101      	bne.n	8006994 <_fflush_r+0x68>
 8006990:	68ac      	ldr	r4, [r5, #8]
 8006992:	e7df      	b.n	8006954 <_fflush_r+0x28>
 8006994:	4b04      	ldr	r3, [pc, #16]	; (80069a8 <_fflush_r+0x7c>)
 8006996:	429c      	cmp	r4, r3
 8006998:	d1dc      	bne.n	8006954 <_fflush_r+0x28>
 800699a:	68ec      	ldr	r4, [r5, #12]
 800699c:	e7da      	b.n	8006954 <_fflush_r+0x28>
 800699e:	46c0      	nop			; (mov r8, r8)
 80069a0:	08007a6c 	.word	0x08007a6c
 80069a4:	08007a8c 	.word	0x08007a8c
 80069a8:	08007a4c 	.word	0x08007a4c

080069ac <std>:
 80069ac:	2300      	movs	r3, #0
 80069ae:	b510      	push	{r4, lr}
 80069b0:	0004      	movs	r4, r0
 80069b2:	6003      	str	r3, [r0, #0]
 80069b4:	6043      	str	r3, [r0, #4]
 80069b6:	6083      	str	r3, [r0, #8]
 80069b8:	8181      	strh	r1, [r0, #12]
 80069ba:	6643      	str	r3, [r0, #100]	; 0x64
 80069bc:	0019      	movs	r1, r3
 80069be:	81c2      	strh	r2, [r0, #14]
 80069c0:	6103      	str	r3, [r0, #16]
 80069c2:	6143      	str	r3, [r0, #20]
 80069c4:	6183      	str	r3, [r0, #24]
 80069c6:	2208      	movs	r2, #8
 80069c8:	305c      	adds	r0, #92	; 0x5c
 80069ca:	f7fe f818 	bl	80049fe <memset>
 80069ce:	4b05      	ldr	r3, [pc, #20]	; (80069e4 <std+0x38>)
 80069d0:	6224      	str	r4, [r4, #32]
 80069d2:	6263      	str	r3, [r4, #36]	; 0x24
 80069d4:	4b04      	ldr	r3, [pc, #16]	; (80069e8 <std+0x3c>)
 80069d6:	62a3      	str	r3, [r4, #40]	; 0x28
 80069d8:	4b04      	ldr	r3, [pc, #16]	; (80069ec <std+0x40>)
 80069da:	62e3      	str	r3, [r4, #44]	; 0x2c
 80069dc:	4b04      	ldr	r3, [pc, #16]	; (80069f0 <std+0x44>)
 80069de:	6323      	str	r3, [r4, #48]	; 0x30
 80069e0:	bd10      	pop	{r4, pc}
 80069e2:	46c0      	nop			; (mov r8, r8)
 80069e4:	080063f9 	.word	0x080063f9
 80069e8:	08006425 	.word	0x08006425
 80069ec:	0800645d 	.word	0x0800645d
 80069f0:	08006489 	.word	0x08006489

080069f4 <_cleanup_r>:
 80069f4:	b510      	push	{r4, lr}
 80069f6:	4902      	ldr	r1, [pc, #8]	; (8006a00 <_cleanup_r+0xc>)
 80069f8:	f000 f8ba 	bl	8006b70 <_fwalk_reent>
 80069fc:	bd10      	pop	{r4, pc}
 80069fe:	46c0      	nop			; (mov r8, r8)
 8006a00:	0800692d 	.word	0x0800692d

08006a04 <__sfmoreglue>:
 8006a04:	b570      	push	{r4, r5, r6, lr}
 8006a06:	2568      	movs	r5, #104	; 0x68
 8006a08:	1e4a      	subs	r2, r1, #1
 8006a0a:	4355      	muls	r5, r2
 8006a0c:	000e      	movs	r6, r1
 8006a0e:	0029      	movs	r1, r5
 8006a10:	3174      	adds	r1, #116	; 0x74
 8006a12:	f7fe fb01 	bl	8005018 <_malloc_r>
 8006a16:	1e04      	subs	r4, r0, #0
 8006a18:	d008      	beq.n	8006a2c <__sfmoreglue+0x28>
 8006a1a:	2100      	movs	r1, #0
 8006a1c:	002a      	movs	r2, r5
 8006a1e:	6001      	str	r1, [r0, #0]
 8006a20:	6046      	str	r6, [r0, #4]
 8006a22:	300c      	adds	r0, #12
 8006a24:	60a0      	str	r0, [r4, #8]
 8006a26:	3268      	adds	r2, #104	; 0x68
 8006a28:	f7fd ffe9 	bl	80049fe <memset>
 8006a2c:	0020      	movs	r0, r4
 8006a2e:	bd70      	pop	{r4, r5, r6, pc}

08006a30 <__sfp_lock_acquire>:
 8006a30:	b510      	push	{r4, lr}
 8006a32:	4802      	ldr	r0, [pc, #8]	; (8006a3c <__sfp_lock_acquire+0xc>)
 8006a34:	f7ff f85e 	bl	8005af4 <__retarget_lock_acquire_recursive>
 8006a38:	bd10      	pop	{r4, pc}
 8006a3a:	46c0      	nop			; (mov r8, r8)
 8006a3c:	20000256 	.word	0x20000256

08006a40 <__sfp_lock_release>:
 8006a40:	b510      	push	{r4, lr}
 8006a42:	4802      	ldr	r0, [pc, #8]	; (8006a4c <__sfp_lock_release+0xc>)
 8006a44:	f7ff f858 	bl	8005af8 <__retarget_lock_release_recursive>
 8006a48:	bd10      	pop	{r4, pc}
 8006a4a:	46c0      	nop			; (mov r8, r8)
 8006a4c:	20000256 	.word	0x20000256

08006a50 <__sinit_lock_acquire>:
 8006a50:	b510      	push	{r4, lr}
 8006a52:	4802      	ldr	r0, [pc, #8]	; (8006a5c <__sinit_lock_acquire+0xc>)
 8006a54:	f7ff f84e 	bl	8005af4 <__retarget_lock_acquire_recursive>
 8006a58:	bd10      	pop	{r4, pc}
 8006a5a:	46c0      	nop			; (mov r8, r8)
 8006a5c:	20000257 	.word	0x20000257

08006a60 <__sinit_lock_release>:
 8006a60:	b510      	push	{r4, lr}
 8006a62:	4802      	ldr	r0, [pc, #8]	; (8006a6c <__sinit_lock_release+0xc>)
 8006a64:	f7ff f848 	bl	8005af8 <__retarget_lock_release_recursive>
 8006a68:	bd10      	pop	{r4, pc}
 8006a6a:	46c0      	nop			; (mov r8, r8)
 8006a6c:	20000257 	.word	0x20000257

08006a70 <__sinit>:
 8006a70:	b513      	push	{r0, r1, r4, lr}
 8006a72:	0004      	movs	r4, r0
 8006a74:	f7ff ffec 	bl	8006a50 <__sinit_lock_acquire>
 8006a78:	69a3      	ldr	r3, [r4, #24]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d002      	beq.n	8006a84 <__sinit+0x14>
 8006a7e:	f7ff ffef 	bl	8006a60 <__sinit_lock_release>
 8006a82:	bd13      	pop	{r0, r1, r4, pc}
 8006a84:	64a3      	str	r3, [r4, #72]	; 0x48
 8006a86:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006a88:	6523      	str	r3, [r4, #80]	; 0x50
 8006a8a:	4b13      	ldr	r3, [pc, #76]	; (8006ad8 <__sinit+0x68>)
 8006a8c:	4a13      	ldr	r2, [pc, #76]	; (8006adc <__sinit+0x6c>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	62a2      	str	r2, [r4, #40]	; 0x28
 8006a92:	9301      	str	r3, [sp, #4]
 8006a94:	42a3      	cmp	r3, r4
 8006a96:	d101      	bne.n	8006a9c <__sinit+0x2c>
 8006a98:	2301      	movs	r3, #1
 8006a9a:	61a3      	str	r3, [r4, #24]
 8006a9c:	0020      	movs	r0, r4
 8006a9e:	f000 f81f 	bl	8006ae0 <__sfp>
 8006aa2:	6060      	str	r0, [r4, #4]
 8006aa4:	0020      	movs	r0, r4
 8006aa6:	f000 f81b 	bl	8006ae0 <__sfp>
 8006aaa:	60a0      	str	r0, [r4, #8]
 8006aac:	0020      	movs	r0, r4
 8006aae:	f000 f817 	bl	8006ae0 <__sfp>
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	2104      	movs	r1, #4
 8006ab6:	60e0      	str	r0, [r4, #12]
 8006ab8:	6860      	ldr	r0, [r4, #4]
 8006aba:	f7ff ff77 	bl	80069ac <std>
 8006abe:	2201      	movs	r2, #1
 8006ac0:	2109      	movs	r1, #9
 8006ac2:	68a0      	ldr	r0, [r4, #8]
 8006ac4:	f7ff ff72 	bl	80069ac <std>
 8006ac8:	2202      	movs	r2, #2
 8006aca:	2112      	movs	r1, #18
 8006acc:	68e0      	ldr	r0, [r4, #12]
 8006ace:	f7ff ff6d 	bl	80069ac <std>
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	61a3      	str	r3, [r4, #24]
 8006ad6:	e7d2      	b.n	8006a7e <__sinit+0xe>
 8006ad8:	08007708 	.word	0x08007708
 8006adc:	080069f5 	.word	0x080069f5

08006ae0 <__sfp>:
 8006ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ae2:	0007      	movs	r7, r0
 8006ae4:	f7ff ffa4 	bl	8006a30 <__sfp_lock_acquire>
 8006ae8:	4b1f      	ldr	r3, [pc, #124]	; (8006b68 <__sfp+0x88>)
 8006aea:	681e      	ldr	r6, [r3, #0]
 8006aec:	69b3      	ldr	r3, [r6, #24]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d102      	bne.n	8006af8 <__sfp+0x18>
 8006af2:	0030      	movs	r0, r6
 8006af4:	f7ff ffbc 	bl	8006a70 <__sinit>
 8006af8:	3648      	adds	r6, #72	; 0x48
 8006afa:	68b4      	ldr	r4, [r6, #8]
 8006afc:	6873      	ldr	r3, [r6, #4]
 8006afe:	3b01      	subs	r3, #1
 8006b00:	d504      	bpl.n	8006b0c <__sfp+0x2c>
 8006b02:	6833      	ldr	r3, [r6, #0]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d022      	beq.n	8006b4e <__sfp+0x6e>
 8006b08:	6836      	ldr	r6, [r6, #0]
 8006b0a:	e7f6      	b.n	8006afa <__sfp+0x1a>
 8006b0c:	220c      	movs	r2, #12
 8006b0e:	5ea5      	ldrsh	r5, [r4, r2]
 8006b10:	2d00      	cmp	r5, #0
 8006b12:	d11a      	bne.n	8006b4a <__sfp+0x6a>
 8006b14:	0020      	movs	r0, r4
 8006b16:	4b15      	ldr	r3, [pc, #84]	; (8006b6c <__sfp+0x8c>)
 8006b18:	3058      	adds	r0, #88	; 0x58
 8006b1a:	60e3      	str	r3, [r4, #12]
 8006b1c:	6665      	str	r5, [r4, #100]	; 0x64
 8006b1e:	f7fe ffe7 	bl	8005af0 <__retarget_lock_init_recursive>
 8006b22:	f7ff ff8d 	bl	8006a40 <__sfp_lock_release>
 8006b26:	0020      	movs	r0, r4
 8006b28:	2208      	movs	r2, #8
 8006b2a:	0029      	movs	r1, r5
 8006b2c:	6025      	str	r5, [r4, #0]
 8006b2e:	60a5      	str	r5, [r4, #8]
 8006b30:	6065      	str	r5, [r4, #4]
 8006b32:	6125      	str	r5, [r4, #16]
 8006b34:	6165      	str	r5, [r4, #20]
 8006b36:	61a5      	str	r5, [r4, #24]
 8006b38:	305c      	adds	r0, #92	; 0x5c
 8006b3a:	f7fd ff60 	bl	80049fe <memset>
 8006b3e:	6365      	str	r5, [r4, #52]	; 0x34
 8006b40:	63a5      	str	r5, [r4, #56]	; 0x38
 8006b42:	64a5      	str	r5, [r4, #72]	; 0x48
 8006b44:	64e5      	str	r5, [r4, #76]	; 0x4c
 8006b46:	0020      	movs	r0, r4
 8006b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b4a:	3468      	adds	r4, #104	; 0x68
 8006b4c:	e7d7      	b.n	8006afe <__sfp+0x1e>
 8006b4e:	2104      	movs	r1, #4
 8006b50:	0038      	movs	r0, r7
 8006b52:	f7ff ff57 	bl	8006a04 <__sfmoreglue>
 8006b56:	1e04      	subs	r4, r0, #0
 8006b58:	6030      	str	r0, [r6, #0]
 8006b5a:	d1d5      	bne.n	8006b08 <__sfp+0x28>
 8006b5c:	f7ff ff70 	bl	8006a40 <__sfp_lock_release>
 8006b60:	230c      	movs	r3, #12
 8006b62:	603b      	str	r3, [r7, #0]
 8006b64:	e7ef      	b.n	8006b46 <__sfp+0x66>
 8006b66:	46c0      	nop			; (mov r8, r8)
 8006b68:	08007708 	.word	0x08007708
 8006b6c:	ffff0001 	.word	0xffff0001

08006b70 <_fwalk_reent>:
 8006b70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b72:	0004      	movs	r4, r0
 8006b74:	0006      	movs	r6, r0
 8006b76:	2700      	movs	r7, #0
 8006b78:	9101      	str	r1, [sp, #4]
 8006b7a:	3448      	adds	r4, #72	; 0x48
 8006b7c:	6863      	ldr	r3, [r4, #4]
 8006b7e:	68a5      	ldr	r5, [r4, #8]
 8006b80:	9300      	str	r3, [sp, #0]
 8006b82:	9b00      	ldr	r3, [sp, #0]
 8006b84:	3b01      	subs	r3, #1
 8006b86:	9300      	str	r3, [sp, #0]
 8006b88:	d504      	bpl.n	8006b94 <_fwalk_reent+0x24>
 8006b8a:	6824      	ldr	r4, [r4, #0]
 8006b8c:	2c00      	cmp	r4, #0
 8006b8e:	d1f5      	bne.n	8006b7c <_fwalk_reent+0xc>
 8006b90:	0038      	movs	r0, r7
 8006b92:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006b94:	89ab      	ldrh	r3, [r5, #12]
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d908      	bls.n	8006bac <_fwalk_reent+0x3c>
 8006b9a:	220e      	movs	r2, #14
 8006b9c:	5eab      	ldrsh	r3, [r5, r2]
 8006b9e:	3301      	adds	r3, #1
 8006ba0:	d004      	beq.n	8006bac <_fwalk_reent+0x3c>
 8006ba2:	0029      	movs	r1, r5
 8006ba4:	0030      	movs	r0, r6
 8006ba6:	9b01      	ldr	r3, [sp, #4]
 8006ba8:	4798      	blx	r3
 8006baa:	4307      	orrs	r7, r0
 8006bac:	3568      	adds	r5, #104	; 0x68
 8006bae:	e7e8      	b.n	8006b82 <_fwalk_reent+0x12>

08006bb0 <_lseek_r>:
 8006bb0:	b570      	push	{r4, r5, r6, lr}
 8006bb2:	0004      	movs	r4, r0
 8006bb4:	0008      	movs	r0, r1
 8006bb6:	0011      	movs	r1, r2
 8006bb8:	001a      	movs	r2, r3
 8006bba:	2300      	movs	r3, #0
 8006bbc:	4d05      	ldr	r5, [pc, #20]	; (8006bd4 <_lseek_r+0x24>)
 8006bbe:	602b      	str	r3, [r5, #0]
 8006bc0:	f7fa fb60 	bl	8001284 <_lseek>
 8006bc4:	1c43      	adds	r3, r0, #1
 8006bc6:	d103      	bne.n	8006bd0 <_lseek_r+0x20>
 8006bc8:	682b      	ldr	r3, [r5, #0]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d000      	beq.n	8006bd0 <_lseek_r+0x20>
 8006bce:	6023      	str	r3, [r4, #0]
 8006bd0:	bd70      	pop	{r4, r5, r6, pc}
 8006bd2:	46c0      	nop			; (mov r8, r8)
 8006bd4:	2000025c 	.word	0x2000025c

08006bd8 <__swhatbuf_r>:
 8006bd8:	b570      	push	{r4, r5, r6, lr}
 8006bda:	000e      	movs	r6, r1
 8006bdc:	001d      	movs	r5, r3
 8006bde:	230e      	movs	r3, #14
 8006be0:	5ec9      	ldrsh	r1, [r1, r3]
 8006be2:	0014      	movs	r4, r2
 8006be4:	b096      	sub	sp, #88	; 0x58
 8006be6:	2900      	cmp	r1, #0
 8006be8:	da08      	bge.n	8006bfc <__swhatbuf_r+0x24>
 8006bea:	220c      	movs	r2, #12
 8006bec:	5eb3      	ldrsh	r3, [r6, r2]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	602a      	str	r2, [r5, #0]
 8006bf2:	061b      	lsls	r3, r3, #24
 8006bf4:	d411      	bmi.n	8006c1a <__swhatbuf_r+0x42>
 8006bf6:	2380      	movs	r3, #128	; 0x80
 8006bf8:	00db      	lsls	r3, r3, #3
 8006bfa:	e00f      	b.n	8006c1c <__swhatbuf_r+0x44>
 8006bfc:	466a      	mov	r2, sp
 8006bfe:	f000 fcb7 	bl	8007570 <_fstat_r>
 8006c02:	2800      	cmp	r0, #0
 8006c04:	dbf1      	blt.n	8006bea <__swhatbuf_r+0x12>
 8006c06:	23f0      	movs	r3, #240	; 0xf0
 8006c08:	9901      	ldr	r1, [sp, #4]
 8006c0a:	021b      	lsls	r3, r3, #8
 8006c0c:	4019      	ands	r1, r3
 8006c0e:	4b05      	ldr	r3, [pc, #20]	; (8006c24 <__swhatbuf_r+0x4c>)
 8006c10:	18c9      	adds	r1, r1, r3
 8006c12:	424b      	negs	r3, r1
 8006c14:	4159      	adcs	r1, r3
 8006c16:	6029      	str	r1, [r5, #0]
 8006c18:	e7ed      	b.n	8006bf6 <__swhatbuf_r+0x1e>
 8006c1a:	2340      	movs	r3, #64	; 0x40
 8006c1c:	2000      	movs	r0, #0
 8006c1e:	6023      	str	r3, [r4, #0]
 8006c20:	b016      	add	sp, #88	; 0x58
 8006c22:	bd70      	pop	{r4, r5, r6, pc}
 8006c24:	ffffe000 	.word	0xffffe000

08006c28 <__smakebuf_r>:
 8006c28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c2a:	2602      	movs	r6, #2
 8006c2c:	898b      	ldrh	r3, [r1, #12]
 8006c2e:	0005      	movs	r5, r0
 8006c30:	000c      	movs	r4, r1
 8006c32:	4233      	tst	r3, r6
 8006c34:	d006      	beq.n	8006c44 <__smakebuf_r+0x1c>
 8006c36:	0023      	movs	r3, r4
 8006c38:	3347      	adds	r3, #71	; 0x47
 8006c3a:	6023      	str	r3, [r4, #0]
 8006c3c:	6123      	str	r3, [r4, #16]
 8006c3e:	2301      	movs	r3, #1
 8006c40:	6163      	str	r3, [r4, #20]
 8006c42:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8006c44:	466a      	mov	r2, sp
 8006c46:	ab01      	add	r3, sp, #4
 8006c48:	f7ff ffc6 	bl	8006bd8 <__swhatbuf_r>
 8006c4c:	9900      	ldr	r1, [sp, #0]
 8006c4e:	0007      	movs	r7, r0
 8006c50:	0028      	movs	r0, r5
 8006c52:	f7fe f9e1 	bl	8005018 <_malloc_r>
 8006c56:	2800      	cmp	r0, #0
 8006c58:	d108      	bne.n	8006c6c <__smakebuf_r+0x44>
 8006c5a:	220c      	movs	r2, #12
 8006c5c:	5ea3      	ldrsh	r3, [r4, r2]
 8006c5e:	059a      	lsls	r2, r3, #22
 8006c60:	d4ef      	bmi.n	8006c42 <__smakebuf_r+0x1a>
 8006c62:	2203      	movs	r2, #3
 8006c64:	4393      	bics	r3, r2
 8006c66:	431e      	orrs	r6, r3
 8006c68:	81a6      	strh	r6, [r4, #12]
 8006c6a:	e7e4      	b.n	8006c36 <__smakebuf_r+0xe>
 8006c6c:	4b0f      	ldr	r3, [pc, #60]	; (8006cac <__smakebuf_r+0x84>)
 8006c6e:	62ab      	str	r3, [r5, #40]	; 0x28
 8006c70:	2380      	movs	r3, #128	; 0x80
 8006c72:	89a2      	ldrh	r2, [r4, #12]
 8006c74:	6020      	str	r0, [r4, #0]
 8006c76:	4313      	orrs	r3, r2
 8006c78:	81a3      	strh	r3, [r4, #12]
 8006c7a:	9b00      	ldr	r3, [sp, #0]
 8006c7c:	6120      	str	r0, [r4, #16]
 8006c7e:	6163      	str	r3, [r4, #20]
 8006c80:	9b01      	ldr	r3, [sp, #4]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d00d      	beq.n	8006ca2 <__smakebuf_r+0x7a>
 8006c86:	0028      	movs	r0, r5
 8006c88:	230e      	movs	r3, #14
 8006c8a:	5ee1      	ldrsh	r1, [r4, r3]
 8006c8c:	f000 fc82 	bl	8007594 <_isatty_r>
 8006c90:	2800      	cmp	r0, #0
 8006c92:	d006      	beq.n	8006ca2 <__smakebuf_r+0x7a>
 8006c94:	2203      	movs	r2, #3
 8006c96:	89a3      	ldrh	r3, [r4, #12]
 8006c98:	4393      	bics	r3, r2
 8006c9a:	001a      	movs	r2, r3
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	81a3      	strh	r3, [r4, #12]
 8006ca2:	89a0      	ldrh	r0, [r4, #12]
 8006ca4:	4307      	orrs	r7, r0
 8006ca6:	81a7      	strh	r7, [r4, #12]
 8006ca8:	e7cb      	b.n	8006c42 <__smakebuf_r+0x1a>
 8006caa:	46c0      	nop			; (mov r8, r8)
 8006cac:	080069f5 	.word	0x080069f5

08006cb0 <memchr>:
 8006cb0:	b2c9      	uxtb	r1, r1
 8006cb2:	1882      	adds	r2, r0, r2
 8006cb4:	4290      	cmp	r0, r2
 8006cb6:	d101      	bne.n	8006cbc <memchr+0xc>
 8006cb8:	2000      	movs	r0, #0
 8006cba:	4770      	bx	lr
 8006cbc:	7803      	ldrb	r3, [r0, #0]
 8006cbe:	428b      	cmp	r3, r1
 8006cc0:	d0fb      	beq.n	8006cba <memchr+0xa>
 8006cc2:	3001      	adds	r0, #1
 8006cc4:	e7f6      	b.n	8006cb4 <memchr+0x4>

08006cc6 <memmove>:
 8006cc6:	b510      	push	{r4, lr}
 8006cc8:	4288      	cmp	r0, r1
 8006cca:	d902      	bls.n	8006cd2 <memmove+0xc>
 8006ccc:	188b      	adds	r3, r1, r2
 8006cce:	4298      	cmp	r0, r3
 8006cd0:	d303      	bcc.n	8006cda <memmove+0x14>
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	e007      	b.n	8006ce6 <memmove+0x20>
 8006cd6:	5c8b      	ldrb	r3, [r1, r2]
 8006cd8:	5483      	strb	r3, [r0, r2]
 8006cda:	3a01      	subs	r2, #1
 8006cdc:	d2fb      	bcs.n	8006cd6 <memmove+0x10>
 8006cde:	bd10      	pop	{r4, pc}
 8006ce0:	5ccc      	ldrb	r4, [r1, r3]
 8006ce2:	54c4      	strb	r4, [r0, r3]
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d1fa      	bne.n	8006ce0 <memmove+0x1a>
 8006cea:	e7f8      	b.n	8006cde <memmove+0x18>

08006cec <_realloc_r>:
 8006cec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006cee:	0007      	movs	r7, r0
 8006cf0:	000e      	movs	r6, r1
 8006cf2:	0014      	movs	r4, r2
 8006cf4:	2900      	cmp	r1, #0
 8006cf6:	d105      	bne.n	8006d04 <_realloc_r+0x18>
 8006cf8:	0011      	movs	r1, r2
 8006cfa:	f7fe f98d 	bl	8005018 <_malloc_r>
 8006cfe:	0005      	movs	r5, r0
 8006d00:	0028      	movs	r0, r5
 8006d02:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006d04:	2a00      	cmp	r2, #0
 8006d06:	d103      	bne.n	8006d10 <_realloc_r+0x24>
 8006d08:	f7fe f91a 	bl	8004f40 <_free_r>
 8006d0c:	0025      	movs	r5, r4
 8006d0e:	e7f7      	b.n	8006d00 <_realloc_r+0x14>
 8006d10:	f000 fc52 	bl	80075b8 <_malloc_usable_size_r>
 8006d14:	9001      	str	r0, [sp, #4]
 8006d16:	4284      	cmp	r4, r0
 8006d18:	d803      	bhi.n	8006d22 <_realloc_r+0x36>
 8006d1a:	0035      	movs	r5, r6
 8006d1c:	0843      	lsrs	r3, r0, #1
 8006d1e:	42a3      	cmp	r3, r4
 8006d20:	d3ee      	bcc.n	8006d00 <_realloc_r+0x14>
 8006d22:	0021      	movs	r1, r4
 8006d24:	0038      	movs	r0, r7
 8006d26:	f7fe f977 	bl	8005018 <_malloc_r>
 8006d2a:	1e05      	subs	r5, r0, #0
 8006d2c:	d0e8      	beq.n	8006d00 <_realloc_r+0x14>
 8006d2e:	9b01      	ldr	r3, [sp, #4]
 8006d30:	0022      	movs	r2, r4
 8006d32:	429c      	cmp	r4, r3
 8006d34:	d900      	bls.n	8006d38 <_realloc_r+0x4c>
 8006d36:	001a      	movs	r2, r3
 8006d38:	0031      	movs	r1, r6
 8006d3a:	0028      	movs	r0, r5
 8006d3c:	f7fd fe56 	bl	80049ec <memcpy>
 8006d40:	0031      	movs	r1, r6
 8006d42:	0038      	movs	r0, r7
 8006d44:	f7fe f8fc 	bl	8004f40 <_free_r>
 8006d48:	e7da      	b.n	8006d00 <_realloc_r+0x14>

08006d4a <_sungetc_r>:
 8006d4a:	b570      	push	{r4, r5, r6, lr}
 8006d4c:	0014      	movs	r4, r2
 8006d4e:	1c4b      	adds	r3, r1, #1
 8006d50:	d103      	bne.n	8006d5a <_sungetc_r+0x10>
 8006d52:	2501      	movs	r5, #1
 8006d54:	426d      	negs	r5, r5
 8006d56:	0028      	movs	r0, r5
 8006d58:	bd70      	pop	{r4, r5, r6, pc}
 8006d5a:	8993      	ldrh	r3, [r2, #12]
 8006d5c:	2220      	movs	r2, #32
 8006d5e:	4393      	bics	r3, r2
 8006d60:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8006d62:	81a3      	strh	r3, [r4, #12]
 8006d64:	b2ce      	uxtb	r6, r1
 8006d66:	6863      	ldr	r3, [r4, #4]
 8006d68:	b2cd      	uxtb	r5, r1
 8006d6a:	2a00      	cmp	r2, #0
 8006d6c:	d010      	beq.n	8006d90 <_sungetc_r+0x46>
 8006d6e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006d70:	429a      	cmp	r2, r3
 8006d72:	dd07      	ble.n	8006d84 <_sungetc_r+0x3a>
 8006d74:	6823      	ldr	r3, [r4, #0]
 8006d76:	3b01      	subs	r3, #1
 8006d78:	6023      	str	r3, [r4, #0]
 8006d7a:	701e      	strb	r6, [r3, #0]
 8006d7c:	6863      	ldr	r3, [r4, #4]
 8006d7e:	3301      	adds	r3, #1
 8006d80:	6063      	str	r3, [r4, #4]
 8006d82:	e7e8      	b.n	8006d56 <_sungetc_r+0xc>
 8006d84:	0021      	movs	r1, r4
 8006d86:	f000 fbb5 	bl	80074f4 <__submore>
 8006d8a:	2800      	cmp	r0, #0
 8006d8c:	d0f2      	beq.n	8006d74 <_sungetc_r+0x2a>
 8006d8e:	e7e0      	b.n	8006d52 <_sungetc_r+0x8>
 8006d90:	6921      	ldr	r1, [r4, #16]
 8006d92:	6822      	ldr	r2, [r4, #0]
 8006d94:	2900      	cmp	r1, #0
 8006d96:	d007      	beq.n	8006da8 <_sungetc_r+0x5e>
 8006d98:	4291      	cmp	r1, r2
 8006d9a:	d205      	bcs.n	8006da8 <_sungetc_r+0x5e>
 8006d9c:	1e51      	subs	r1, r2, #1
 8006d9e:	7808      	ldrb	r0, [r1, #0]
 8006da0:	42a8      	cmp	r0, r5
 8006da2:	d101      	bne.n	8006da8 <_sungetc_r+0x5e>
 8006da4:	6021      	str	r1, [r4, #0]
 8006da6:	e7ea      	b.n	8006d7e <_sungetc_r+0x34>
 8006da8:	6423      	str	r3, [r4, #64]	; 0x40
 8006daa:	0023      	movs	r3, r4
 8006dac:	3344      	adds	r3, #68	; 0x44
 8006dae:	6363      	str	r3, [r4, #52]	; 0x34
 8006db0:	2303      	movs	r3, #3
 8006db2:	63a3      	str	r3, [r4, #56]	; 0x38
 8006db4:	0023      	movs	r3, r4
 8006db6:	3346      	adds	r3, #70	; 0x46
 8006db8:	63e2      	str	r2, [r4, #60]	; 0x3c
 8006dba:	701e      	strb	r6, [r3, #0]
 8006dbc:	6023      	str	r3, [r4, #0]
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e7de      	b.n	8006d80 <_sungetc_r+0x36>

08006dc2 <__ssrefill_r>:
 8006dc2:	b510      	push	{r4, lr}
 8006dc4:	000c      	movs	r4, r1
 8006dc6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006dc8:	2900      	cmp	r1, #0
 8006dca:	d00e      	beq.n	8006dea <__ssrefill_r+0x28>
 8006dcc:	0023      	movs	r3, r4
 8006dce:	3344      	adds	r3, #68	; 0x44
 8006dd0:	4299      	cmp	r1, r3
 8006dd2:	d001      	beq.n	8006dd8 <__ssrefill_r+0x16>
 8006dd4:	f7fe f8b4 	bl	8004f40 <_free_r>
 8006dd8:	2000      	movs	r0, #0
 8006dda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ddc:	6360      	str	r0, [r4, #52]	; 0x34
 8006dde:	6063      	str	r3, [r4, #4]
 8006de0:	4283      	cmp	r3, r0
 8006de2:	d002      	beq.n	8006dea <__ssrefill_r+0x28>
 8006de4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006de6:	6023      	str	r3, [r4, #0]
 8006de8:	bd10      	pop	{r4, pc}
 8006dea:	6923      	ldr	r3, [r4, #16]
 8006dec:	2001      	movs	r0, #1
 8006dee:	6023      	str	r3, [r4, #0]
 8006df0:	2300      	movs	r3, #0
 8006df2:	89a2      	ldrh	r2, [r4, #12]
 8006df4:	6063      	str	r3, [r4, #4]
 8006df6:	3320      	adds	r3, #32
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	81a3      	strh	r3, [r4, #12]
 8006dfc:	4240      	negs	r0, r0
 8006dfe:	e7f3      	b.n	8006de8 <__ssrefill_r+0x26>

08006e00 <__ssvfiscanf_r>:
 8006e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e02:	4cb8      	ldr	r4, [pc, #736]	; (80070e4 <__ssvfiscanf_r+0x2e4>)
 8006e04:	0006      	movs	r6, r0
 8006e06:	44a5      	add	sp, r4
 8006e08:	000c      	movs	r4, r1
 8006e0a:	2100      	movs	r1, #0
 8006e0c:	9146      	str	r1, [sp, #280]	; 0x118
 8006e0e:	9147      	str	r1, [sp, #284]	; 0x11c
 8006e10:	a903      	add	r1, sp, #12
 8006e12:	9148      	str	r1, [sp, #288]	; 0x120
 8006e14:	21be      	movs	r1, #190	; 0xbe
 8006e16:	48b4      	ldr	r0, [pc, #720]	; (80070e8 <__ssvfiscanf_r+0x2e8>)
 8006e18:	0049      	lsls	r1, r1, #1
 8006e1a:	ad43      	add	r5, sp, #268	; 0x10c
 8006e1c:	5068      	str	r0, [r5, r1]
 8006e1e:	25c0      	movs	r5, #192	; 0xc0
 8006e20:	49b2      	ldr	r1, [pc, #712]	; (80070ec <__ssvfiscanf_r+0x2ec>)
 8006e22:	006d      	lsls	r5, r5, #1
 8006e24:	a843      	add	r0, sp, #268	; 0x10c
 8006e26:	5141      	str	r1, [r0, r5]
 8006e28:	9302      	str	r3, [sp, #8]
 8006e2a:	7813      	ldrb	r3, [r2, #0]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d100      	bne.n	8006e32 <__ssvfiscanf_r+0x32>
 8006e30:	e155      	b.n	80070de <__ssvfiscanf_r+0x2de>
 8006e32:	49af      	ldr	r1, [pc, #700]	; (80070f0 <__ssvfiscanf_r+0x2f0>)
 8006e34:	2508      	movs	r5, #8
 8006e36:	5cc8      	ldrb	r0, [r1, r3]
 8006e38:	2108      	movs	r1, #8
 8006e3a:	1c57      	adds	r7, r2, #1
 8006e3c:	4001      	ands	r1, r0
 8006e3e:	4228      	tst	r0, r5
 8006e40:	d020      	beq.n	8006e84 <__ssvfiscanf_r+0x84>
 8006e42:	6863      	ldr	r3, [r4, #4]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	dd12      	ble.n	8006e6e <__ssvfiscanf_r+0x6e>
 8006e48:	6823      	ldr	r3, [r4, #0]
 8006e4a:	49a9      	ldr	r1, [pc, #676]	; (80070f0 <__ssvfiscanf_r+0x2f0>)
 8006e4c:	781a      	ldrb	r2, [r3, #0]
 8006e4e:	5c8a      	ldrb	r2, [r1, r2]
 8006e50:	2108      	movs	r1, #8
 8006e52:	420a      	tst	r2, r1
 8006e54:	d101      	bne.n	8006e5a <__ssvfiscanf_r+0x5a>
 8006e56:	003a      	movs	r2, r7
 8006e58:	e7e7      	b.n	8006e2a <__ssvfiscanf_r+0x2a>
 8006e5a:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	9200      	str	r2, [sp, #0]
 8006e60:	3201      	adds	r2, #1
 8006e62:	9247      	str	r2, [sp, #284]	; 0x11c
 8006e64:	6862      	ldr	r2, [r4, #4]
 8006e66:	6023      	str	r3, [r4, #0]
 8006e68:	3a01      	subs	r2, #1
 8006e6a:	6062      	str	r2, [r4, #4]
 8006e6c:	e7e9      	b.n	8006e42 <__ssvfiscanf_r+0x42>
 8006e6e:	22c0      	movs	r2, #192	; 0xc0
 8006e70:	ab43      	add	r3, sp, #268	; 0x10c
 8006e72:	0052      	lsls	r2, r2, #1
 8006e74:	589b      	ldr	r3, [r3, r2]
 8006e76:	0021      	movs	r1, r4
 8006e78:	0030      	movs	r0, r6
 8006e7a:	9300      	str	r3, [sp, #0]
 8006e7c:	4798      	blx	r3
 8006e7e:	2800      	cmp	r0, #0
 8006e80:	d0e2      	beq.n	8006e48 <__ssvfiscanf_r+0x48>
 8006e82:	e7e8      	b.n	8006e56 <__ssvfiscanf_r+0x56>
 8006e84:	001d      	movs	r5, r3
 8006e86:	2b25      	cmp	r3, #37	; 0x25
 8006e88:	d164      	bne.n	8006f54 <__ssvfiscanf_r+0x154>
 8006e8a:	9145      	str	r1, [sp, #276]	; 0x114
 8006e8c:	9143      	str	r1, [sp, #268]	; 0x10c
 8006e8e:	7853      	ldrb	r3, [r2, #1]
 8006e90:	2b2a      	cmp	r3, #42	; 0x2a
 8006e92:	d102      	bne.n	8006e9a <__ssvfiscanf_r+0x9a>
 8006e94:	3b1a      	subs	r3, #26
 8006e96:	9343      	str	r3, [sp, #268]	; 0x10c
 8006e98:	1c97      	adds	r7, r2, #2
 8006e9a:	003d      	movs	r5, r7
 8006e9c:	220a      	movs	r2, #10
 8006e9e:	7829      	ldrb	r1, [r5, #0]
 8006ea0:	1c6b      	adds	r3, r5, #1
 8006ea2:	9300      	str	r3, [sp, #0]
 8006ea4:	000b      	movs	r3, r1
 8006ea6:	3b30      	subs	r3, #48	; 0x30
 8006ea8:	2b09      	cmp	r3, #9
 8006eaa:	d91f      	bls.n	8006eec <__ssvfiscanf_r+0xec>
 8006eac:	4f91      	ldr	r7, [pc, #580]	; (80070f4 <__ssvfiscanf_r+0x2f4>)
 8006eae:	2203      	movs	r2, #3
 8006eb0:	0038      	movs	r0, r7
 8006eb2:	f7ff fefd 	bl	8006cb0 <memchr>
 8006eb6:	2800      	cmp	r0, #0
 8006eb8:	d007      	beq.n	8006eca <__ssvfiscanf_r+0xca>
 8006eba:	2301      	movs	r3, #1
 8006ebc:	1bc0      	subs	r0, r0, r7
 8006ebe:	4083      	lsls	r3, r0
 8006ec0:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8006ec2:	9d00      	ldr	r5, [sp, #0]
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	9201      	str	r2, [sp, #4]
 8006ec8:	9343      	str	r3, [sp, #268]	; 0x10c
 8006eca:	1c6f      	adds	r7, r5, #1
 8006ecc:	782d      	ldrb	r5, [r5, #0]
 8006ece:	2d78      	cmp	r5, #120	; 0x78
 8006ed0:	d807      	bhi.n	8006ee2 <__ssvfiscanf_r+0xe2>
 8006ed2:	2d57      	cmp	r5, #87	; 0x57
 8006ed4:	d812      	bhi.n	8006efc <__ssvfiscanf_r+0xfc>
 8006ed6:	2d25      	cmp	r5, #37	; 0x25
 8006ed8:	d03c      	beq.n	8006f54 <__ssvfiscanf_r+0x154>
 8006eda:	d836      	bhi.n	8006f4a <__ssvfiscanf_r+0x14a>
 8006edc:	2d00      	cmp	r5, #0
 8006ede:	d100      	bne.n	8006ee2 <__ssvfiscanf_r+0xe2>
 8006ee0:	e0fa      	b.n	80070d8 <__ssvfiscanf_r+0x2d8>
 8006ee2:	2303      	movs	r3, #3
 8006ee4:	9349      	str	r3, [sp, #292]	; 0x124
 8006ee6:	3307      	adds	r3, #7
 8006ee8:	9344      	str	r3, [sp, #272]	; 0x110
 8006eea:	e06d      	b.n	8006fc8 <__ssvfiscanf_r+0x1c8>
 8006eec:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8006eee:	9d00      	ldr	r5, [sp, #0]
 8006ef0:	9301      	str	r3, [sp, #4]
 8006ef2:	4353      	muls	r3, r2
 8006ef4:	3b30      	subs	r3, #48	; 0x30
 8006ef6:	185b      	adds	r3, r3, r1
 8006ef8:	9345      	str	r3, [sp, #276]	; 0x114
 8006efa:	e7d0      	b.n	8006e9e <__ssvfiscanf_r+0x9e>
 8006efc:	0028      	movs	r0, r5
 8006efe:	3858      	subs	r0, #88	; 0x58
 8006f00:	2820      	cmp	r0, #32
 8006f02:	d8ee      	bhi.n	8006ee2 <__ssvfiscanf_r+0xe2>
 8006f04:	f7f9 f912 	bl	800012c <__gnu_thumb1_case_shi>
 8006f08:	ffed0051 	.word	0xffed0051
 8006f0c:	0087ffed 	.word	0x0087ffed
 8006f10:	ffedffed 	.word	0xffedffed
 8006f14:	ffedffed 	.word	0xffedffed
 8006f18:	ffedffed 	.word	0xffedffed
 8006f1c:	0095ffed 	.word	0x0095ffed
 8006f20:	0024007d 	.word	0x0024007d
 8006f24:	00240024 	.word	0x00240024
 8006f28:	007fffed 	.word	0x007fffed
 8006f2c:	ffedffed 	.word	0xffedffed
 8006f30:	ffedffed 	.word	0xffedffed
 8006f34:	0083009f 	.word	0x0083009f
 8006f38:	ffed004b 	.word	0xffed004b
 8006f3c:	009dffed 	.word	0x009dffed
 8006f40:	007dffed 	.word	0x007dffed
 8006f44:	ffedffed 	.word	0xffedffed
 8006f48:	0051      	.short	0x0051
 8006f4a:	3d45      	subs	r5, #69	; 0x45
 8006f4c:	2d02      	cmp	r5, #2
 8006f4e:	d8c8      	bhi.n	8006ee2 <__ssvfiscanf_r+0xe2>
 8006f50:	2305      	movs	r3, #5
 8006f52:	e06c      	b.n	800702e <__ssvfiscanf_r+0x22e>
 8006f54:	6863      	ldr	r3, [r4, #4]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	dd0e      	ble.n	8006f78 <__ssvfiscanf_r+0x178>
 8006f5a:	6823      	ldr	r3, [r4, #0]
 8006f5c:	781a      	ldrb	r2, [r3, #0]
 8006f5e:	42aa      	cmp	r2, r5
 8006f60:	d000      	beq.n	8006f64 <__ssvfiscanf_r+0x164>
 8006f62:	e0bc      	b.n	80070de <__ssvfiscanf_r+0x2de>
 8006f64:	3301      	adds	r3, #1
 8006f66:	6862      	ldr	r2, [r4, #4]
 8006f68:	6023      	str	r3, [r4, #0]
 8006f6a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8006f6c:	3a01      	subs	r2, #1
 8006f6e:	9300      	str	r3, [sp, #0]
 8006f70:	3301      	adds	r3, #1
 8006f72:	6062      	str	r2, [r4, #4]
 8006f74:	9347      	str	r3, [sp, #284]	; 0x11c
 8006f76:	e76e      	b.n	8006e56 <__ssvfiscanf_r+0x56>
 8006f78:	22c0      	movs	r2, #192	; 0xc0
 8006f7a:	ab43      	add	r3, sp, #268	; 0x10c
 8006f7c:	0052      	lsls	r2, r2, #1
 8006f7e:	589b      	ldr	r3, [r3, r2]
 8006f80:	0021      	movs	r1, r4
 8006f82:	0030      	movs	r0, r6
 8006f84:	9300      	str	r3, [sp, #0]
 8006f86:	4798      	blx	r3
 8006f88:	2800      	cmp	r0, #0
 8006f8a:	d0e6      	beq.n	8006f5a <__ssvfiscanf_r+0x15a>
 8006f8c:	9846      	ldr	r0, [sp, #280]	; 0x118
 8006f8e:	2800      	cmp	r0, #0
 8006f90:	d000      	beq.n	8006f94 <__ssvfiscanf_r+0x194>
 8006f92:	e09d      	b.n	80070d0 <__ssvfiscanf_r+0x2d0>
 8006f94:	3801      	subs	r0, #1
 8006f96:	23a5      	movs	r3, #165	; 0xa5
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	449d      	add	sp, r3
 8006f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f9e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8006fa0:	9300      	str	r3, [sp, #0]
 8006fa2:	2320      	movs	r3, #32
 8006fa4:	9a00      	ldr	r2, [sp, #0]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	9343      	str	r3, [sp, #268]	; 0x10c
 8006faa:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8006fac:	9300      	str	r3, [sp, #0]
 8006fae:	2380      	movs	r3, #128	; 0x80
 8006fb0:	9a00      	ldr	r2, [sp, #0]
 8006fb2:	009b      	lsls	r3, r3, #2
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	9343      	str	r3, [sp, #268]	; 0x10c
 8006fb8:	2310      	movs	r3, #16
 8006fba:	9344      	str	r3, [sp, #272]	; 0x110
 8006fbc:	236e      	movs	r3, #110	; 0x6e
 8006fbe:	42ab      	cmp	r3, r5
 8006fc0:	41ad      	sbcs	r5, r5
 8006fc2:	426d      	negs	r5, r5
 8006fc4:	3503      	adds	r5, #3
 8006fc6:	9549      	str	r5, [sp, #292]	; 0x124
 8006fc8:	6863      	ldr	r3, [r4, #4]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	dd4a      	ble.n	8007064 <__ssvfiscanf_r+0x264>
 8006fce:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8006fd0:	9300      	str	r3, [sp, #0]
 8006fd2:	065b      	lsls	r3, r3, #25
 8006fd4:	d406      	bmi.n	8006fe4 <__ssvfiscanf_r+0x1e4>
 8006fd6:	6823      	ldr	r3, [r4, #0]
 8006fd8:	4945      	ldr	r1, [pc, #276]	; (80070f0 <__ssvfiscanf_r+0x2f0>)
 8006fda:	781a      	ldrb	r2, [r3, #0]
 8006fdc:	5c8a      	ldrb	r2, [r1, r2]
 8006fde:	2108      	movs	r1, #8
 8006fe0:	420a      	tst	r2, r1
 8006fe2:	d14a      	bne.n	800707a <__ssvfiscanf_r+0x27a>
 8006fe4:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8006fe6:	2b02      	cmp	r3, #2
 8006fe8:	dc5e      	bgt.n	80070a8 <__ssvfiscanf_r+0x2a8>
 8006fea:	0022      	movs	r2, r4
 8006fec:	0030      	movs	r0, r6
 8006fee:	ab02      	add	r3, sp, #8
 8006ff0:	a943      	add	r1, sp, #268	; 0x10c
 8006ff2:	f000 f883 	bl	80070fc <_scanf_chars>
 8006ff6:	2801      	cmp	r0, #1
 8006ff8:	d071      	beq.n	80070de <__ssvfiscanf_r+0x2de>
 8006ffa:	2802      	cmp	r0, #2
 8006ffc:	d000      	beq.n	8007000 <__ssvfiscanf_r+0x200>
 8006ffe:	e72a      	b.n	8006e56 <__ssvfiscanf_r+0x56>
 8007000:	e7c4      	b.n	8006f8c <__ssvfiscanf_r+0x18c>
 8007002:	230a      	movs	r3, #10
 8007004:	e7d9      	b.n	8006fba <__ssvfiscanf_r+0x1ba>
 8007006:	2300      	movs	r3, #0
 8007008:	2503      	movs	r5, #3
 800700a:	9344      	str	r3, [sp, #272]	; 0x110
 800700c:	e7db      	b.n	8006fc6 <__ssvfiscanf_r+0x1c6>
 800700e:	2308      	movs	r3, #8
 8007010:	2504      	movs	r5, #4
 8007012:	9344      	str	r3, [sp, #272]	; 0x110
 8007014:	e7d7      	b.n	8006fc6 <__ssvfiscanf_r+0x1c6>
 8007016:	0039      	movs	r1, r7
 8007018:	a803      	add	r0, sp, #12
 800701a:	f000 f9e5 	bl	80073e8 <__sccl>
 800701e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8007020:	0007      	movs	r7, r0
 8007022:	9300      	str	r3, [sp, #0]
 8007024:	2340      	movs	r3, #64	; 0x40
 8007026:	9a00      	ldr	r2, [sp, #0]
 8007028:	4313      	orrs	r3, r2
 800702a:	9343      	str	r3, [sp, #268]	; 0x10c
 800702c:	2301      	movs	r3, #1
 800702e:	9349      	str	r3, [sp, #292]	; 0x124
 8007030:	e7ca      	b.n	8006fc8 <__ssvfiscanf_r+0x1c8>
 8007032:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8007034:	9300      	str	r3, [sp, #0]
 8007036:	2340      	movs	r3, #64	; 0x40
 8007038:	9a00      	ldr	r2, [sp, #0]
 800703a:	4313      	orrs	r3, r2
 800703c:	9343      	str	r3, [sp, #268]	; 0x10c
 800703e:	2300      	movs	r3, #0
 8007040:	e7f5      	b.n	800702e <__ssvfiscanf_r+0x22e>
 8007042:	2302      	movs	r3, #2
 8007044:	e7f3      	b.n	800702e <__ssvfiscanf_r+0x22e>
 8007046:	9843      	ldr	r0, [sp, #268]	; 0x10c
 8007048:	06c3      	lsls	r3, r0, #27
 800704a:	d500      	bpl.n	800704e <__ssvfiscanf_r+0x24e>
 800704c:	e703      	b.n	8006e56 <__ssvfiscanf_r+0x56>
 800704e:	9b02      	ldr	r3, [sp, #8]
 8007050:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8007052:	1d19      	adds	r1, r3, #4
 8007054:	9102      	str	r1, [sp, #8]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	07c5      	lsls	r5, r0, #31
 800705a:	d501      	bpl.n	8007060 <__ssvfiscanf_r+0x260>
 800705c:	801a      	strh	r2, [r3, #0]
 800705e:	e6fa      	b.n	8006e56 <__ssvfiscanf_r+0x56>
 8007060:	601a      	str	r2, [r3, #0]
 8007062:	e6f8      	b.n	8006e56 <__ssvfiscanf_r+0x56>
 8007064:	22c0      	movs	r2, #192	; 0xc0
 8007066:	ab43      	add	r3, sp, #268	; 0x10c
 8007068:	0052      	lsls	r2, r2, #1
 800706a:	589b      	ldr	r3, [r3, r2]
 800706c:	0021      	movs	r1, r4
 800706e:	0030      	movs	r0, r6
 8007070:	9300      	str	r3, [sp, #0]
 8007072:	4798      	blx	r3
 8007074:	2800      	cmp	r0, #0
 8007076:	d0aa      	beq.n	8006fce <__ssvfiscanf_r+0x1ce>
 8007078:	e788      	b.n	8006f8c <__ssvfiscanf_r+0x18c>
 800707a:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800707c:	9200      	str	r2, [sp, #0]
 800707e:	3201      	adds	r2, #1
 8007080:	9247      	str	r2, [sp, #284]	; 0x11c
 8007082:	6862      	ldr	r2, [r4, #4]
 8007084:	3a01      	subs	r2, #1
 8007086:	6062      	str	r2, [r4, #4]
 8007088:	2a00      	cmp	r2, #0
 800708a:	dd02      	ble.n	8007092 <__ssvfiscanf_r+0x292>
 800708c:	3301      	adds	r3, #1
 800708e:	6023      	str	r3, [r4, #0]
 8007090:	e7a1      	b.n	8006fd6 <__ssvfiscanf_r+0x1d6>
 8007092:	22c0      	movs	r2, #192	; 0xc0
 8007094:	ab43      	add	r3, sp, #268	; 0x10c
 8007096:	0052      	lsls	r2, r2, #1
 8007098:	589b      	ldr	r3, [r3, r2]
 800709a:	0021      	movs	r1, r4
 800709c:	0030      	movs	r0, r6
 800709e:	9300      	str	r3, [sp, #0]
 80070a0:	4798      	blx	r3
 80070a2:	2800      	cmp	r0, #0
 80070a4:	d097      	beq.n	8006fd6 <__ssvfiscanf_r+0x1d6>
 80070a6:	e771      	b.n	8006f8c <__ssvfiscanf_r+0x18c>
 80070a8:	2b04      	cmp	r3, #4
 80070aa:	dc06      	bgt.n	80070ba <__ssvfiscanf_r+0x2ba>
 80070ac:	0022      	movs	r2, r4
 80070ae:	0030      	movs	r0, r6
 80070b0:	ab02      	add	r3, sp, #8
 80070b2:	a943      	add	r1, sp, #268	; 0x10c
 80070b4:	f000 f880 	bl	80071b8 <_scanf_i>
 80070b8:	e79d      	b.n	8006ff6 <__ssvfiscanf_r+0x1f6>
 80070ba:	4b0f      	ldr	r3, [pc, #60]	; (80070f8 <__ssvfiscanf_r+0x2f8>)
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d100      	bne.n	80070c2 <__ssvfiscanf_r+0x2c2>
 80070c0:	e6c9      	b.n	8006e56 <__ssvfiscanf_r+0x56>
 80070c2:	0022      	movs	r2, r4
 80070c4:	0030      	movs	r0, r6
 80070c6:	ab02      	add	r3, sp, #8
 80070c8:	a943      	add	r1, sp, #268	; 0x10c
 80070ca:	e000      	b.n	80070ce <__ssvfiscanf_r+0x2ce>
 80070cc:	bf00      	nop
 80070ce:	e792      	b.n	8006ff6 <__ssvfiscanf_r+0x1f6>
 80070d0:	89a3      	ldrh	r3, [r4, #12]
 80070d2:	065b      	lsls	r3, r3, #25
 80070d4:	d400      	bmi.n	80070d8 <__ssvfiscanf_r+0x2d8>
 80070d6:	e75e      	b.n	8006f96 <__ssvfiscanf_r+0x196>
 80070d8:	2001      	movs	r0, #1
 80070da:	4240      	negs	r0, r0
 80070dc:	e75b      	b.n	8006f96 <__ssvfiscanf_r+0x196>
 80070de:	9846      	ldr	r0, [sp, #280]	; 0x118
 80070e0:	e759      	b.n	8006f96 <__ssvfiscanf_r+0x196>
 80070e2:	46c0      	nop			; (mov r8, r8)
 80070e4:	fffffd6c 	.word	0xfffffd6c
 80070e8:	08006d4b 	.word	0x08006d4b
 80070ec:	08006dc3 	.word	0x08006dc3
 80070f0:	08007916 	.word	0x08007916
 80070f4:	08007a1c 	.word	0x08007a1c
 80070f8:	00000000 	.word	0x00000000

080070fc <_scanf_chars>:
 80070fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070fe:	0015      	movs	r5, r2
 8007100:	688a      	ldr	r2, [r1, #8]
 8007102:	000c      	movs	r4, r1
 8007104:	9001      	str	r0, [sp, #4]
 8007106:	2a00      	cmp	r2, #0
 8007108:	d105      	bne.n	8007116 <_scanf_chars+0x1a>
 800710a:	6989      	ldr	r1, [r1, #24]
 800710c:	3201      	adds	r2, #1
 800710e:	2900      	cmp	r1, #0
 8007110:	d000      	beq.n	8007114 <_scanf_chars+0x18>
 8007112:	3a02      	subs	r2, #2
 8007114:	60a2      	str	r2, [r4, #8]
 8007116:	6822      	ldr	r2, [r4, #0]
 8007118:	06d2      	lsls	r2, r2, #27
 800711a:	d403      	bmi.n	8007124 <_scanf_chars+0x28>
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	1d11      	adds	r1, r2, #4
 8007120:	6019      	str	r1, [r3, #0]
 8007122:	6817      	ldr	r7, [r2, #0]
 8007124:	2600      	movs	r6, #0
 8007126:	69a0      	ldr	r0, [r4, #24]
 8007128:	2800      	cmp	r0, #0
 800712a:	d013      	beq.n	8007154 <_scanf_chars+0x58>
 800712c:	2801      	cmp	r0, #1
 800712e:	d108      	bne.n	8007142 <_scanf_chars+0x46>
 8007130:	682b      	ldr	r3, [r5, #0]
 8007132:	6962      	ldr	r2, [r4, #20]
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	5cd3      	ldrb	r3, [r2, r3]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d10b      	bne.n	8007154 <_scanf_chars+0x58>
 800713c:	2e00      	cmp	r6, #0
 800713e:	d038      	beq.n	80071b2 <_scanf_chars+0xb6>
 8007140:	e026      	b.n	8007190 <_scanf_chars+0x94>
 8007142:	2802      	cmp	r0, #2
 8007144:	d124      	bne.n	8007190 <_scanf_chars+0x94>
 8007146:	682b      	ldr	r3, [r5, #0]
 8007148:	4a1a      	ldr	r2, [pc, #104]	; (80071b4 <_scanf_chars+0xb8>)
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	5cd3      	ldrb	r3, [r2, r3]
 800714e:	2208      	movs	r2, #8
 8007150:	4213      	tst	r3, r2
 8007152:	d11d      	bne.n	8007190 <_scanf_chars+0x94>
 8007154:	2210      	movs	r2, #16
 8007156:	6823      	ldr	r3, [r4, #0]
 8007158:	3601      	adds	r6, #1
 800715a:	4213      	tst	r3, r2
 800715c:	d103      	bne.n	8007166 <_scanf_chars+0x6a>
 800715e:	682b      	ldr	r3, [r5, #0]
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	703b      	strb	r3, [r7, #0]
 8007164:	3701      	adds	r7, #1
 8007166:	682a      	ldr	r2, [r5, #0]
 8007168:	686b      	ldr	r3, [r5, #4]
 800716a:	3201      	adds	r2, #1
 800716c:	602a      	str	r2, [r5, #0]
 800716e:	68a2      	ldr	r2, [r4, #8]
 8007170:	3b01      	subs	r3, #1
 8007172:	3a01      	subs	r2, #1
 8007174:	606b      	str	r3, [r5, #4]
 8007176:	60a2      	str	r2, [r4, #8]
 8007178:	2a00      	cmp	r2, #0
 800717a:	d009      	beq.n	8007190 <_scanf_chars+0x94>
 800717c:	2b00      	cmp	r3, #0
 800717e:	dcd2      	bgt.n	8007126 <_scanf_chars+0x2a>
 8007180:	23c0      	movs	r3, #192	; 0xc0
 8007182:	005b      	lsls	r3, r3, #1
 8007184:	0029      	movs	r1, r5
 8007186:	58e3      	ldr	r3, [r4, r3]
 8007188:	9801      	ldr	r0, [sp, #4]
 800718a:	4798      	blx	r3
 800718c:	2800      	cmp	r0, #0
 800718e:	d0ca      	beq.n	8007126 <_scanf_chars+0x2a>
 8007190:	6822      	ldr	r2, [r4, #0]
 8007192:	2310      	movs	r3, #16
 8007194:	0011      	movs	r1, r2
 8007196:	4019      	ands	r1, r3
 8007198:	421a      	tst	r2, r3
 800719a:	d106      	bne.n	80071aa <_scanf_chars+0xae>
 800719c:	68e3      	ldr	r3, [r4, #12]
 800719e:	3301      	adds	r3, #1
 80071a0:	60e3      	str	r3, [r4, #12]
 80071a2:	69a3      	ldr	r3, [r4, #24]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d000      	beq.n	80071aa <_scanf_chars+0xae>
 80071a8:	7039      	strb	r1, [r7, #0]
 80071aa:	2000      	movs	r0, #0
 80071ac:	6923      	ldr	r3, [r4, #16]
 80071ae:	199e      	adds	r6, r3, r6
 80071b0:	6126      	str	r6, [r4, #16]
 80071b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80071b4:	08007916 	.word	0x08007916

080071b8 <_scanf_i>:
 80071b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071ba:	000c      	movs	r4, r1
 80071bc:	b08d      	sub	sp, #52	; 0x34
 80071be:	9302      	str	r3, [sp, #8]
 80071c0:	4b79      	ldr	r3, [pc, #484]	; (80073a8 <_scanf_i+0x1f0>)
 80071c2:	0016      	movs	r6, r2
 80071c4:	9005      	str	r0, [sp, #20]
 80071c6:	aa09      	add	r2, sp, #36	; 0x24
 80071c8:	cb23      	ldmia	r3!, {r0, r1, r5}
 80071ca:	c223      	stmia	r2!, {r0, r1, r5}
 80071cc:	4b77      	ldr	r3, [pc, #476]	; (80073ac <_scanf_i+0x1f4>)
 80071ce:	9306      	str	r3, [sp, #24]
 80071d0:	69a3      	ldr	r3, [r4, #24]
 80071d2:	2b03      	cmp	r3, #3
 80071d4:	d001      	beq.n	80071da <_scanf_i+0x22>
 80071d6:	4b76      	ldr	r3, [pc, #472]	; (80073b0 <_scanf_i+0x1f8>)
 80071d8:	9306      	str	r3, [sp, #24]
 80071da:	22ae      	movs	r2, #174	; 0xae
 80071dc:	2000      	movs	r0, #0
 80071de:	68a3      	ldr	r3, [r4, #8]
 80071e0:	0052      	lsls	r2, r2, #1
 80071e2:	1e59      	subs	r1, r3, #1
 80071e4:	9004      	str	r0, [sp, #16]
 80071e6:	4291      	cmp	r1, r2
 80071e8:	d905      	bls.n	80071f6 <_scanf_i+0x3e>
 80071ea:	3b5e      	subs	r3, #94	; 0x5e
 80071ec:	3bff      	subs	r3, #255	; 0xff
 80071ee:	9304      	str	r3, [sp, #16]
 80071f0:	235e      	movs	r3, #94	; 0x5e
 80071f2:	33ff      	adds	r3, #255	; 0xff
 80071f4:	60a3      	str	r3, [r4, #8]
 80071f6:	0023      	movs	r3, r4
 80071f8:	331c      	adds	r3, #28
 80071fa:	9301      	str	r3, [sp, #4]
 80071fc:	23d0      	movs	r3, #208	; 0xd0
 80071fe:	2700      	movs	r7, #0
 8007200:	6822      	ldr	r2, [r4, #0]
 8007202:	011b      	lsls	r3, r3, #4
 8007204:	4313      	orrs	r3, r2
 8007206:	6023      	str	r3, [r4, #0]
 8007208:	9b01      	ldr	r3, [sp, #4]
 800720a:	9303      	str	r3, [sp, #12]
 800720c:	6833      	ldr	r3, [r6, #0]
 800720e:	a809      	add	r0, sp, #36	; 0x24
 8007210:	7819      	ldrb	r1, [r3, #0]
 8007212:	00bb      	lsls	r3, r7, #2
 8007214:	2202      	movs	r2, #2
 8007216:	5818      	ldr	r0, [r3, r0]
 8007218:	f7ff fd4a 	bl	8006cb0 <memchr>
 800721c:	2800      	cmp	r0, #0
 800721e:	d02b      	beq.n	8007278 <_scanf_i+0xc0>
 8007220:	2f01      	cmp	r7, #1
 8007222:	d162      	bne.n	80072ea <_scanf_i+0x132>
 8007224:	6863      	ldr	r3, [r4, #4]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d106      	bne.n	8007238 <_scanf_i+0x80>
 800722a:	3308      	adds	r3, #8
 800722c:	6822      	ldr	r2, [r4, #0]
 800722e:	6063      	str	r3, [r4, #4]
 8007230:	33f9      	adds	r3, #249	; 0xf9
 8007232:	33ff      	adds	r3, #255	; 0xff
 8007234:	4313      	orrs	r3, r2
 8007236:	6023      	str	r3, [r4, #0]
 8007238:	4b5e      	ldr	r3, [pc, #376]	; (80073b4 <_scanf_i+0x1fc>)
 800723a:	6822      	ldr	r2, [r4, #0]
 800723c:	4013      	ands	r3, r2
 800723e:	6023      	str	r3, [r4, #0]
 8007240:	68a3      	ldr	r3, [r4, #8]
 8007242:	1e5a      	subs	r2, r3, #1
 8007244:	60a2      	str	r2, [r4, #8]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d016      	beq.n	8007278 <_scanf_i+0xc0>
 800724a:	6833      	ldr	r3, [r6, #0]
 800724c:	1c5a      	adds	r2, r3, #1
 800724e:	6032      	str	r2, [r6, #0]
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	9a03      	ldr	r2, [sp, #12]
 8007254:	7013      	strb	r3, [r2, #0]
 8007256:	6873      	ldr	r3, [r6, #4]
 8007258:	1c55      	adds	r5, r2, #1
 800725a:	3b01      	subs	r3, #1
 800725c:	6073      	str	r3, [r6, #4]
 800725e:	9503      	str	r5, [sp, #12]
 8007260:	2b00      	cmp	r3, #0
 8007262:	dc09      	bgt.n	8007278 <_scanf_i+0xc0>
 8007264:	23c0      	movs	r3, #192	; 0xc0
 8007266:	005b      	lsls	r3, r3, #1
 8007268:	58e3      	ldr	r3, [r4, r3]
 800726a:	0031      	movs	r1, r6
 800726c:	9805      	ldr	r0, [sp, #20]
 800726e:	9307      	str	r3, [sp, #28]
 8007270:	4798      	blx	r3
 8007272:	2800      	cmp	r0, #0
 8007274:	d000      	beq.n	8007278 <_scanf_i+0xc0>
 8007276:	e081      	b.n	800737c <_scanf_i+0x1c4>
 8007278:	3701      	adds	r7, #1
 800727a:	2f03      	cmp	r7, #3
 800727c:	d1c6      	bne.n	800720c <_scanf_i+0x54>
 800727e:	6863      	ldr	r3, [r4, #4]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d101      	bne.n	8007288 <_scanf_i+0xd0>
 8007284:	330a      	adds	r3, #10
 8007286:	6063      	str	r3, [r4, #4]
 8007288:	2110      	movs	r1, #16
 800728a:	2700      	movs	r7, #0
 800728c:	6863      	ldr	r3, [r4, #4]
 800728e:	6960      	ldr	r0, [r4, #20]
 8007290:	1ac9      	subs	r1, r1, r3
 8007292:	4b49      	ldr	r3, [pc, #292]	; (80073b8 <_scanf_i+0x200>)
 8007294:	18c9      	adds	r1, r1, r3
 8007296:	f000 f8a7 	bl	80073e8 <__sccl>
 800729a:	9d03      	ldr	r5, [sp, #12]
 800729c:	68a3      	ldr	r3, [r4, #8]
 800729e:	6822      	ldr	r2, [r4, #0]
 80072a0:	9303      	str	r3, [sp, #12]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d041      	beq.n	800732a <_scanf_i+0x172>
 80072a6:	6831      	ldr	r1, [r6, #0]
 80072a8:	6963      	ldr	r3, [r4, #20]
 80072aa:	7808      	ldrb	r0, [r1, #0]
 80072ac:	5c1b      	ldrb	r3, [r3, r0]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d03b      	beq.n	800732a <_scanf_i+0x172>
 80072b2:	2830      	cmp	r0, #48	; 0x30
 80072b4:	d129      	bne.n	800730a <_scanf_i+0x152>
 80072b6:	2380      	movs	r3, #128	; 0x80
 80072b8:	011b      	lsls	r3, r3, #4
 80072ba:	421a      	tst	r2, r3
 80072bc:	d025      	beq.n	800730a <_scanf_i+0x152>
 80072be:	9b04      	ldr	r3, [sp, #16]
 80072c0:	3701      	adds	r7, #1
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d005      	beq.n	80072d2 <_scanf_i+0x11a>
 80072c6:	001a      	movs	r2, r3
 80072c8:	9b03      	ldr	r3, [sp, #12]
 80072ca:	3a01      	subs	r2, #1
 80072cc:	3301      	adds	r3, #1
 80072ce:	9204      	str	r2, [sp, #16]
 80072d0:	60a3      	str	r3, [r4, #8]
 80072d2:	6873      	ldr	r3, [r6, #4]
 80072d4:	3b01      	subs	r3, #1
 80072d6:	6073      	str	r3, [r6, #4]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	dd1d      	ble.n	8007318 <_scanf_i+0x160>
 80072dc:	6833      	ldr	r3, [r6, #0]
 80072de:	3301      	adds	r3, #1
 80072e0:	6033      	str	r3, [r6, #0]
 80072e2:	68a3      	ldr	r3, [r4, #8]
 80072e4:	3b01      	subs	r3, #1
 80072e6:	60a3      	str	r3, [r4, #8]
 80072e8:	e7d8      	b.n	800729c <_scanf_i+0xe4>
 80072ea:	2f02      	cmp	r7, #2
 80072ec:	d1a8      	bne.n	8007240 <_scanf_i+0x88>
 80072ee:	21c0      	movs	r1, #192	; 0xc0
 80072f0:	2380      	movs	r3, #128	; 0x80
 80072f2:	6822      	ldr	r2, [r4, #0]
 80072f4:	00c9      	lsls	r1, r1, #3
 80072f6:	4011      	ands	r1, r2
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	4299      	cmp	r1, r3
 80072fc:	d1bf      	bne.n	800727e <_scanf_i+0xc6>
 80072fe:	3bf1      	subs	r3, #241	; 0xf1
 8007300:	3bff      	subs	r3, #255	; 0xff
 8007302:	6063      	str	r3, [r4, #4]
 8007304:	33f0      	adds	r3, #240	; 0xf0
 8007306:	4313      	orrs	r3, r2
 8007308:	e799      	b.n	800723e <_scanf_i+0x86>
 800730a:	4b2c      	ldr	r3, [pc, #176]	; (80073bc <_scanf_i+0x204>)
 800730c:	4013      	ands	r3, r2
 800730e:	6023      	str	r3, [r4, #0]
 8007310:	780b      	ldrb	r3, [r1, #0]
 8007312:	702b      	strb	r3, [r5, #0]
 8007314:	3501      	adds	r5, #1
 8007316:	e7dc      	b.n	80072d2 <_scanf_i+0x11a>
 8007318:	23c0      	movs	r3, #192	; 0xc0
 800731a:	005b      	lsls	r3, r3, #1
 800731c:	58e3      	ldr	r3, [r4, r3]
 800731e:	0031      	movs	r1, r6
 8007320:	9805      	ldr	r0, [sp, #20]
 8007322:	9303      	str	r3, [sp, #12]
 8007324:	4798      	blx	r3
 8007326:	2800      	cmp	r0, #0
 8007328:	d0db      	beq.n	80072e2 <_scanf_i+0x12a>
 800732a:	6823      	ldr	r3, [r4, #0]
 800732c:	05db      	lsls	r3, r3, #23
 800732e:	d50e      	bpl.n	800734e <_scanf_i+0x196>
 8007330:	9b01      	ldr	r3, [sp, #4]
 8007332:	429d      	cmp	r5, r3
 8007334:	d907      	bls.n	8007346 <_scanf_i+0x18e>
 8007336:	23be      	movs	r3, #190	; 0xbe
 8007338:	3d01      	subs	r5, #1
 800733a:	005b      	lsls	r3, r3, #1
 800733c:	0032      	movs	r2, r6
 800733e:	7829      	ldrb	r1, [r5, #0]
 8007340:	58e3      	ldr	r3, [r4, r3]
 8007342:	9805      	ldr	r0, [sp, #20]
 8007344:	4798      	blx	r3
 8007346:	9b01      	ldr	r3, [sp, #4]
 8007348:	2001      	movs	r0, #1
 800734a:	429d      	cmp	r5, r3
 800734c:	d029      	beq.n	80073a2 <_scanf_i+0x1ea>
 800734e:	6821      	ldr	r1, [r4, #0]
 8007350:	2310      	movs	r3, #16
 8007352:	000a      	movs	r2, r1
 8007354:	401a      	ands	r2, r3
 8007356:	4219      	tst	r1, r3
 8007358:	d11c      	bne.n	8007394 <_scanf_i+0x1dc>
 800735a:	702a      	strb	r2, [r5, #0]
 800735c:	6863      	ldr	r3, [r4, #4]
 800735e:	9901      	ldr	r1, [sp, #4]
 8007360:	9805      	ldr	r0, [sp, #20]
 8007362:	9e06      	ldr	r6, [sp, #24]
 8007364:	47b0      	blx	r6
 8007366:	9b02      	ldr	r3, [sp, #8]
 8007368:	6821      	ldr	r1, [r4, #0]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	068a      	lsls	r2, r1, #26
 800736e:	d507      	bpl.n	8007380 <_scanf_i+0x1c8>
 8007370:	1d1a      	adds	r2, r3, #4
 8007372:	9902      	ldr	r1, [sp, #8]
 8007374:	600a      	str	r2, [r1, #0]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	6018      	str	r0, [r3, #0]
 800737a:	e008      	b.n	800738e <_scanf_i+0x1d6>
 800737c:	2700      	movs	r7, #0
 800737e:	e7d4      	b.n	800732a <_scanf_i+0x172>
 8007380:	1d1a      	adds	r2, r3, #4
 8007382:	07ce      	lsls	r6, r1, #31
 8007384:	d5f5      	bpl.n	8007372 <_scanf_i+0x1ba>
 8007386:	9902      	ldr	r1, [sp, #8]
 8007388:	600a      	str	r2, [r1, #0]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	8018      	strh	r0, [r3, #0]
 800738e:	68e3      	ldr	r3, [r4, #12]
 8007390:	3301      	adds	r3, #1
 8007392:	60e3      	str	r3, [r4, #12]
 8007394:	2000      	movs	r0, #0
 8007396:	9b01      	ldr	r3, [sp, #4]
 8007398:	1aed      	subs	r5, r5, r3
 800739a:	6923      	ldr	r3, [r4, #16]
 800739c:	19ef      	adds	r7, r5, r7
 800739e:	19df      	adds	r7, r3, r7
 80073a0:	6127      	str	r7, [r4, #16]
 80073a2:	b00d      	add	sp, #52	; 0x34
 80073a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073a6:	46c0      	nop			; (mov r8, r8)
 80073a8:	08007690 	.word	0x08007690
 80073ac:	08005369 	.word	0x08005369
 80073b0:	080065dd 	.word	0x080065dd
 80073b4:	fffffaff 	.word	0xfffffaff
 80073b8:	08007ab5 	.word	0x08007ab5
 80073bc:	fffff6ff 	.word	0xfffff6ff

080073c0 <_read_r>:
 80073c0:	b570      	push	{r4, r5, r6, lr}
 80073c2:	0004      	movs	r4, r0
 80073c4:	0008      	movs	r0, r1
 80073c6:	0011      	movs	r1, r2
 80073c8:	001a      	movs	r2, r3
 80073ca:	2300      	movs	r3, #0
 80073cc:	4d05      	ldr	r5, [pc, #20]	; (80073e4 <_read_r+0x24>)
 80073ce:	602b      	str	r3, [r5, #0]
 80073d0:	f7f9 fefe 	bl	80011d0 <_read>
 80073d4:	1c43      	adds	r3, r0, #1
 80073d6:	d103      	bne.n	80073e0 <_read_r+0x20>
 80073d8:	682b      	ldr	r3, [r5, #0]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d000      	beq.n	80073e0 <_read_r+0x20>
 80073de:	6023      	str	r3, [r4, #0]
 80073e0:	bd70      	pop	{r4, r5, r6, pc}
 80073e2:	46c0      	nop			; (mov r8, r8)
 80073e4:	2000025c 	.word	0x2000025c

080073e8 <__sccl>:
 80073e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073ea:	780b      	ldrb	r3, [r1, #0]
 80073ec:	0004      	movs	r4, r0
 80073ee:	2b5e      	cmp	r3, #94	; 0x5e
 80073f0:	d00c      	beq.n	800740c <__sccl+0x24>
 80073f2:	1c48      	adds	r0, r1, #1
 80073f4:	2100      	movs	r1, #0
 80073f6:	0022      	movs	r2, r4
 80073f8:	1c65      	adds	r5, r4, #1
 80073fa:	35ff      	adds	r5, #255	; 0xff
 80073fc:	7011      	strb	r1, [r2, #0]
 80073fe:	3201      	adds	r2, #1
 8007400:	42aa      	cmp	r2, r5
 8007402:	d1fb      	bne.n	80073fc <__sccl+0x14>
 8007404:	2b00      	cmp	r3, #0
 8007406:	d105      	bne.n	8007414 <__sccl+0x2c>
 8007408:	3801      	subs	r0, #1
 800740a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800740c:	784b      	ldrb	r3, [r1, #1]
 800740e:	1c88      	adds	r0, r1, #2
 8007410:	2101      	movs	r1, #1
 8007412:	e7f0      	b.n	80073f6 <__sccl+0xe>
 8007414:	2201      	movs	r2, #1
 8007416:	262d      	movs	r6, #45	; 0x2d
 8007418:	4051      	eors	r1, r2
 800741a:	0002      	movs	r2, r0
 800741c:	54e1      	strb	r1, [r4, r3]
 800741e:	7815      	ldrb	r5, [r2, #0]
 8007420:	1c50      	adds	r0, r2, #1
 8007422:	2d2d      	cmp	r5, #45	; 0x2d
 8007424:	d009      	beq.n	800743a <__sccl+0x52>
 8007426:	2d5d      	cmp	r5, #93	; 0x5d
 8007428:	d0ef      	beq.n	800740a <__sccl+0x22>
 800742a:	2d00      	cmp	r5, #0
 800742c:	d101      	bne.n	8007432 <__sccl+0x4a>
 800742e:	0010      	movs	r0, r2
 8007430:	e7eb      	b.n	800740a <__sccl+0x22>
 8007432:	002b      	movs	r3, r5
 8007434:	e7f1      	b.n	800741a <__sccl+0x32>
 8007436:	0033      	movs	r3, r6
 8007438:	e7ef      	b.n	800741a <__sccl+0x32>
 800743a:	7855      	ldrb	r5, [r2, #1]
 800743c:	2d5d      	cmp	r5, #93	; 0x5d
 800743e:	d0fa      	beq.n	8007436 <__sccl+0x4e>
 8007440:	42ab      	cmp	r3, r5
 8007442:	dcf8      	bgt.n	8007436 <__sccl+0x4e>
 8007444:	0018      	movs	r0, r3
 8007446:	3202      	adds	r2, #2
 8007448:	3001      	adds	r0, #1
 800744a:	5421      	strb	r1, [r4, r0]
 800744c:	4285      	cmp	r5, r0
 800744e:	dcfb      	bgt.n	8007448 <__sccl+0x60>
 8007450:	2000      	movs	r0, #0
 8007452:	1c5f      	adds	r7, r3, #1
 8007454:	42ab      	cmp	r3, r5
 8007456:	da01      	bge.n	800745c <__sccl+0x74>
 8007458:	1ae8      	subs	r0, r5, r3
 800745a:	3801      	subs	r0, #1
 800745c:	183b      	adds	r3, r7, r0
 800745e:	e7de      	b.n	800741e <__sccl+0x36>

08007460 <_raise_r>:
 8007460:	b570      	push	{r4, r5, r6, lr}
 8007462:	0004      	movs	r4, r0
 8007464:	000d      	movs	r5, r1
 8007466:	291f      	cmp	r1, #31
 8007468:	d904      	bls.n	8007474 <_raise_r+0x14>
 800746a:	2316      	movs	r3, #22
 800746c:	6003      	str	r3, [r0, #0]
 800746e:	2001      	movs	r0, #1
 8007470:	4240      	negs	r0, r0
 8007472:	bd70      	pop	{r4, r5, r6, pc}
 8007474:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8007476:	2b00      	cmp	r3, #0
 8007478:	d004      	beq.n	8007484 <_raise_r+0x24>
 800747a:	008a      	lsls	r2, r1, #2
 800747c:	189b      	adds	r3, r3, r2
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	2a00      	cmp	r2, #0
 8007482:	d108      	bne.n	8007496 <_raise_r+0x36>
 8007484:	0020      	movs	r0, r4
 8007486:	f000 f831 	bl	80074ec <_getpid_r>
 800748a:	002a      	movs	r2, r5
 800748c:	0001      	movs	r1, r0
 800748e:	0020      	movs	r0, r4
 8007490:	f000 f81a 	bl	80074c8 <_kill_r>
 8007494:	e7ed      	b.n	8007472 <_raise_r+0x12>
 8007496:	2000      	movs	r0, #0
 8007498:	2a01      	cmp	r2, #1
 800749a:	d0ea      	beq.n	8007472 <_raise_r+0x12>
 800749c:	1c51      	adds	r1, r2, #1
 800749e:	d103      	bne.n	80074a8 <_raise_r+0x48>
 80074a0:	2316      	movs	r3, #22
 80074a2:	3001      	adds	r0, #1
 80074a4:	6023      	str	r3, [r4, #0]
 80074a6:	e7e4      	b.n	8007472 <_raise_r+0x12>
 80074a8:	2400      	movs	r4, #0
 80074aa:	0028      	movs	r0, r5
 80074ac:	601c      	str	r4, [r3, #0]
 80074ae:	4790      	blx	r2
 80074b0:	0020      	movs	r0, r4
 80074b2:	e7de      	b.n	8007472 <_raise_r+0x12>

080074b4 <raise>:
 80074b4:	b510      	push	{r4, lr}
 80074b6:	4b03      	ldr	r3, [pc, #12]	; (80074c4 <raise+0x10>)
 80074b8:	0001      	movs	r1, r0
 80074ba:	6818      	ldr	r0, [r3, #0]
 80074bc:	f7ff ffd0 	bl	8007460 <_raise_r>
 80074c0:	bd10      	pop	{r4, pc}
 80074c2:	46c0      	nop			; (mov r8, r8)
 80074c4:	20000018 	.word	0x20000018

080074c8 <_kill_r>:
 80074c8:	2300      	movs	r3, #0
 80074ca:	b570      	push	{r4, r5, r6, lr}
 80074cc:	4d06      	ldr	r5, [pc, #24]	; (80074e8 <_kill_r+0x20>)
 80074ce:	0004      	movs	r4, r0
 80074d0:	0008      	movs	r0, r1
 80074d2:	0011      	movs	r1, r2
 80074d4:	602b      	str	r3, [r5, #0]
 80074d6:	f7f9 fe5f 	bl	8001198 <_kill>
 80074da:	1c43      	adds	r3, r0, #1
 80074dc:	d103      	bne.n	80074e6 <_kill_r+0x1e>
 80074de:	682b      	ldr	r3, [r5, #0]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d000      	beq.n	80074e6 <_kill_r+0x1e>
 80074e4:	6023      	str	r3, [r4, #0]
 80074e6:	bd70      	pop	{r4, r5, r6, pc}
 80074e8:	2000025c 	.word	0x2000025c

080074ec <_getpid_r>:
 80074ec:	b510      	push	{r4, lr}
 80074ee:	f7f9 fe4d 	bl	800118c <_getpid>
 80074f2:	bd10      	pop	{r4, pc}

080074f4 <__submore>:
 80074f4:	000b      	movs	r3, r1
 80074f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80074f8:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 80074fa:	3344      	adds	r3, #68	; 0x44
 80074fc:	000c      	movs	r4, r1
 80074fe:	429d      	cmp	r5, r3
 8007500:	d11c      	bne.n	800753c <__submore+0x48>
 8007502:	2680      	movs	r6, #128	; 0x80
 8007504:	00f6      	lsls	r6, r6, #3
 8007506:	0031      	movs	r1, r6
 8007508:	f7fd fd86 	bl	8005018 <_malloc_r>
 800750c:	2800      	cmp	r0, #0
 800750e:	d102      	bne.n	8007516 <__submore+0x22>
 8007510:	2001      	movs	r0, #1
 8007512:	4240      	negs	r0, r0
 8007514:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007516:	0023      	movs	r3, r4
 8007518:	6360      	str	r0, [r4, #52]	; 0x34
 800751a:	63a6      	str	r6, [r4, #56]	; 0x38
 800751c:	3346      	adds	r3, #70	; 0x46
 800751e:	781a      	ldrb	r2, [r3, #0]
 8007520:	4b10      	ldr	r3, [pc, #64]	; (8007564 <__submore+0x70>)
 8007522:	54c2      	strb	r2, [r0, r3]
 8007524:	0023      	movs	r3, r4
 8007526:	3345      	adds	r3, #69	; 0x45
 8007528:	781a      	ldrb	r2, [r3, #0]
 800752a:	4b0f      	ldr	r3, [pc, #60]	; (8007568 <__submore+0x74>)
 800752c:	54c2      	strb	r2, [r0, r3]
 800752e:	782a      	ldrb	r2, [r5, #0]
 8007530:	4b0e      	ldr	r3, [pc, #56]	; (800756c <__submore+0x78>)
 8007532:	54c2      	strb	r2, [r0, r3]
 8007534:	18c0      	adds	r0, r0, r3
 8007536:	6020      	str	r0, [r4, #0]
 8007538:	2000      	movs	r0, #0
 800753a:	e7eb      	b.n	8007514 <__submore+0x20>
 800753c:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 800753e:	0029      	movs	r1, r5
 8007540:	0073      	lsls	r3, r6, #1
 8007542:	001a      	movs	r2, r3
 8007544:	9301      	str	r3, [sp, #4]
 8007546:	f7ff fbd1 	bl	8006cec <_realloc_r>
 800754a:	1e05      	subs	r5, r0, #0
 800754c:	d0e0      	beq.n	8007510 <__submore+0x1c>
 800754e:	1987      	adds	r7, r0, r6
 8007550:	0001      	movs	r1, r0
 8007552:	0032      	movs	r2, r6
 8007554:	0038      	movs	r0, r7
 8007556:	f7fd fa49 	bl	80049ec <memcpy>
 800755a:	9b01      	ldr	r3, [sp, #4]
 800755c:	6027      	str	r7, [r4, #0]
 800755e:	6365      	str	r5, [r4, #52]	; 0x34
 8007560:	63a3      	str	r3, [r4, #56]	; 0x38
 8007562:	e7e9      	b.n	8007538 <__submore+0x44>
 8007564:	000003ff 	.word	0x000003ff
 8007568:	000003fe 	.word	0x000003fe
 800756c:	000003fd 	.word	0x000003fd

08007570 <_fstat_r>:
 8007570:	2300      	movs	r3, #0
 8007572:	b570      	push	{r4, r5, r6, lr}
 8007574:	4d06      	ldr	r5, [pc, #24]	; (8007590 <_fstat_r+0x20>)
 8007576:	0004      	movs	r4, r0
 8007578:	0008      	movs	r0, r1
 800757a:	0011      	movs	r1, r2
 800757c:	602b      	str	r3, [r5, #0]
 800757e:	f7f9 fe6a 	bl	8001256 <_fstat>
 8007582:	1c43      	adds	r3, r0, #1
 8007584:	d103      	bne.n	800758e <_fstat_r+0x1e>
 8007586:	682b      	ldr	r3, [r5, #0]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d000      	beq.n	800758e <_fstat_r+0x1e>
 800758c:	6023      	str	r3, [r4, #0]
 800758e:	bd70      	pop	{r4, r5, r6, pc}
 8007590:	2000025c 	.word	0x2000025c

08007594 <_isatty_r>:
 8007594:	2300      	movs	r3, #0
 8007596:	b570      	push	{r4, r5, r6, lr}
 8007598:	4d06      	ldr	r5, [pc, #24]	; (80075b4 <_isatty_r+0x20>)
 800759a:	0004      	movs	r4, r0
 800759c:	0008      	movs	r0, r1
 800759e:	602b      	str	r3, [r5, #0]
 80075a0:	f7f9 fe67 	bl	8001272 <_isatty>
 80075a4:	1c43      	adds	r3, r0, #1
 80075a6:	d103      	bne.n	80075b0 <_isatty_r+0x1c>
 80075a8:	682b      	ldr	r3, [r5, #0]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d000      	beq.n	80075b0 <_isatty_r+0x1c>
 80075ae:	6023      	str	r3, [r4, #0]
 80075b0:	bd70      	pop	{r4, r5, r6, pc}
 80075b2:	46c0      	nop			; (mov r8, r8)
 80075b4:	2000025c 	.word	0x2000025c

080075b8 <_malloc_usable_size_r>:
 80075b8:	1f0b      	subs	r3, r1, #4
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	1f18      	subs	r0, r3, #4
 80075be:	2b00      	cmp	r3, #0
 80075c0:	da01      	bge.n	80075c6 <_malloc_usable_size_r+0xe>
 80075c2:	580b      	ldr	r3, [r1, r0]
 80075c4:	18c0      	adds	r0, r0, r3
 80075c6:	4770      	bx	lr

080075c8 <_init>:
 80075c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ca:	46c0      	nop			; (mov r8, r8)
 80075cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075ce:	bc08      	pop	{r3}
 80075d0:	469e      	mov	lr, r3
 80075d2:	4770      	bx	lr

080075d4 <_fini>:
 80075d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075d6:	46c0      	nop			; (mov r8, r8)
 80075d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075da:	bc08      	pop	{r3}
 80075dc:	469e      	mov	lr, r3
 80075de:	4770      	bx	lr
